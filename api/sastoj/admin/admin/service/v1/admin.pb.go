// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: admin/admin/service/v1/admin.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/go-kratos/kratos/v2/errors"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ErrorReason int32

const (
	// 为某个枚举单独设置错误码
	ErrorReason_SERVER_ERROR      ErrorReason = 0
	ErrorReason_INVALID_ARGUMENT  ErrorReason = 1
	ErrorReason_CONTENT_MISSING   ErrorReason = 2
	ErrorReason_CONTEST_NOT_FOUND ErrorReason = 3
	ErrorReason_CONTEST_INVALID   ErrorReason = 4
	ErrorReason_CONTEST_EXISTED   ErrorReason = 5
	ErrorReason_GROUP_NOT_FOUND   ErrorReason = 6
	ErrorReason_GROUP_INVALID     ErrorReason = 7
	ErrorReason_GROUP_EXISTED     ErrorReason = 8
	ErrorReason_USER_NOT_FOUND    ErrorReason = 9
	ErrorReason_USER_EXISTED      ErrorReason = 10
	ErrorReason_USER_INVALID      ErrorReason = 11
)

// Enum value maps for ErrorReason.
var (
	ErrorReason_name = map[int32]string{
		0:  "SERVER_ERROR",
		1:  "INVALID_ARGUMENT",
		2:  "CONTENT_MISSING",
		3:  "CONTEST_NOT_FOUND",
		4:  "CONTEST_INVALID",
		5:  "CONTEST_EXISTED",
		6:  "GROUP_NOT_FOUND",
		7:  "GROUP_INVALID",
		8:  "GROUP_EXISTED",
		9:  "USER_NOT_FOUND",
		10: "USER_EXISTED",
		11: "USER_INVALID",
	}
	ErrorReason_value = map[string]int32{
		"SERVER_ERROR":      0,
		"INVALID_ARGUMENT":  1,
		"CONTENT_MISSING":   2,
		"CONTEST_NOT_FOUND": 3,
		"CONTEST_INVALID":   4,
		"CONTEST_EXISTED":   5,
		"GROUP_NOT_FOUND":   6,
		"GROUP_INVALID":     7,
		"GROUP_EXISTED":     8,
		"USER_NOT_FOUND":    9,
		"USER_EXISTED":      10,
		"USER_INVALID":      11,
	}
)

func (x ErrorReason) Enum() *ErrorReason {
	p := new(ErrorReason)
	*p = x
	return p
}

func (x ErrorReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorReason) Descriptor() protoreflect.EnumDescriptor {
	return file_admin_admin_service_v1_admin_proto_enumTypes[0].Descriptor()
}

func (ErrorReason) Type() protoreflect.EnumType {
	return &file_admin_admin_service_v1_admin_proto_enumTypes[0]
}

func (x ErrorReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorReason.Descriptor instead.
func (ErrorReason) EnumDescriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{0}
}

type Visibility int32

const (
	Visibility_Private Visibility = 0
	Visibility_Public  Visibility = 1
	Visibility_Contest Visibility = 2
)

// Enum value maps for Visibility.
var (
	Visibility_name = map[int32]string{
		0: "Private",
		1: "Public",
		2: "Contest",
	}
	Visibility_value = map[string]int32{
		"Private": 0,
		"Public":  1,
		"Contest": 2,
	}
)

func (x Visibility) Enum() *Visibility {
	p := new(Visibility)
	*p = x
	return p
}

func (x Visibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Visibility) Descriptor() protoreflect.EnumDescriptor {
	return file_admin_admin_service_v1_admin_proto_enumTypes[1].Descriptor()
}

func (Visibility) Type() protoreflect.EnumType {
	return &file_admin_admin_service_v1_admin_proto_enumTypes[1]
}

func (x Visibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Visibility.Descriptor instead.
func (Visibility) EnumDescriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{1}
}

type Case struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Point  int32 `protobuf:"varint,2,opt,name=point,proto3" json:"point,omitempty"`
	Index  int32 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	IsAuto bool  `protobuf:"varint,4,opt,name=is_auto,json=isAuto,proto3" json:"is_auto,omitempty"`
}

func (x *Case) Reset() {
	*x = Case{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Case) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Case) ProtoMessage() {}

func (x *Case) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Case.ProtoReflect.Descriptor instead.
func (*Case) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{0}
}

func (x *Case) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Case) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *Case) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Case) GetIsAuto() bool {
	if x != nil {
		return x.IsAuto
	}
	return false
}

type DeleteCasesByProblemIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId int64 `protobuf:"varint,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
}

func (x *DeleteCasesByProblemIdRequest) Reset() {
	*x = DeleteCasesByProblemIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCasesByProblemIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCasesByProblemIdRequest) ProtoMessage() {}

func (x *DeleteCasesByProblemIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCasesByProblemIdRequest.ProtoReflect.Descriptor instead.
func (*DeleteCasesByProblemIdRequest) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{1}
}

func (x *DeleteCasesByProblemIdRequest) GetProblemId() int64 {
	if x != nil {
		return x.ProblemId
	}
	return 0
}

type DeleteCasesByProblemIdReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCasesByProblemIdReply) Reset() {
	*x = DeleteCasesByProblemIdReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCasesByProblemIdReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCasesByProblemIdReply) ProtoMessage() {}

func (x *DeleteCasesByProblemIdReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCasesByProblemIdReply.ProtoReflect.Descriptor instead.
func (*DeleteCasesByProblemIdReply) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{2}
}

type CreateContestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Status      int32                  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Type        int32                  `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	StartTime   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Language    string                 `protobuf:"bytes,7,opt,name=language,proto3" json:"language,omitempty"`
	ExtraTime   int32                  `protobuf:"varint,8,opt,name=extra_time,json=extraTime,proto3" json:"extra_time,omitempty"`
	CreateTime  *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *CreateContestRequest) Reset() {
	*x = CreateContestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateContestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateContestRequest) ProtoMessage() {}

func (x *CreateContestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateContestRequest.ProtoReflect.Descriptor instead.
func (*CreateContestRequest) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{3}
}

func (x *CreateContestRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateContestRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateContestRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CreateContestRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CreateContestRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *CreateContestRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *CreateContestRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *CreateContestRequest) GetExtraTime() int32 {
	if x != nil {
		return x.ExtraTime
	}
	return 0
}

func (x *CreateContestRequest) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

type CreateContestReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateContestReply) Reset() {
	*x = CreateContestReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateContestReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateContestReply) ProtoMessage() {}

func (x *CreateContestReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateContestReply.ProtoReflect.Descriptor instead.
func (*CreateContestReply) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{4}
}

func (x *CreateContestReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateContestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Status      int32                  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	Type        int32                  `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
	StartTime   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Language    string                 `protobuf:"bytes,8,opt,name=language,proto3" json:"language,omitempty"`
	ExtraTime   int32                  `protobuf:"varint,9,opt,name=extra_time,json=extraTime,proto3" json:"extra_time,omitempty"`
	CreateTime  *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *UpdateContestRequest) Reset() {
	*x = UpdateContestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateContestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateContestRequest) ProtoMessage() {}

func (x *UpdateContestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateContestRequest.ProtoReflect.Descriptor instead.
func (*UpdateContestRequest) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateContestRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateContestRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateContestRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateContestRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateContestRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *UpdateContestRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *UpdateContestRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *UpdateContestRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *UpdateContestRequest) GetExtraTime() int32 {
	if x != nil {
		return x.ExtraTime
	}
	return 0
}

func (x *UpdateContestRequest) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

type UpdateContestReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *UpdateContestReply) Reset() {
	*x = UpdateContestReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateContestReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateContestReply) ProtoMessage() {}

func (x *UpdateContestReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateContestReply.ProtoReflect.Descriptor instead.
func (*UpdateContestReply) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateContestReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type DeleteContestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteContestRequest) Reset() {
	*x = DeleteContestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteContestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteContestRequest) ProtoMessage() {}

func (x *DeleteContestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteContestRequest.ProtoReflect.Descriptor instead.
func (*DeleteContestRequest) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteContestRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteContestReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteContestReply) Reset() {
	*x = DeleteContestReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteContestReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteContestReply) ProtoMessage() {}

func (x *DeleteContestReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteContestReply.ProtoReflect.Descriptor instead.
func (*DeleteContestReply) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteContestReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetContestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetContestRequest) Reset() {
	*x = GetContestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContestRequest) ProtoMessage() {}

func (x *GetContestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContestRequest.ProtoReflect.Descriptor instead.
func (*GetContestRequest) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{9}
}

func (x *GetContestRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetContestReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Status      int32                  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	Type        int32                  `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
	StartTime   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Language    string                 `protobuf:"bytes,8,opt,name=language,proto3" json:"language,omitempty"`
	ExtraTime   int32                  `protobuf:"varint,9,opt,name=extra_time,json=extraTime,proto3" json:"extra_time,omitempty"`
	CreateTime  *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *GetContestReply) Reset() {
	*x = GetContestReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContestReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContestReply) ProtoMessage() {}

func (x *GetContestReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContestReply.ProtoReflect.Descriptor instead.
func (*GetContestReply) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{10}
}

func (x *GetContestReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetContestReply) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetContestReply) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetContestReply) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetContestReply) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *GetContestReply) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetContestReply) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *GetContestReply) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *GetContestReply) GetExtraTime() int32 {
	if x != nil {
		return x.ExtraTime
	}
	return 0
}

func (x *GetContestReply) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

type ListContestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size    int64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	Current int64 `protobuf:"varint,2,opt,name=current,proto3" json:"current,omitempty"`
}

func (x *ListContestRequest) Reset() {
	*x = ListContestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContestRequest) ProtoMessage() {}

func (x *ListContestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContestRequest.ProtoReflect.Descriptor instead.
func (*ListContestRequest) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{11}
}

func (x *ListContestRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListContestRequest) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

type ListContestReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contests []*ListContestReply_Contest `protobuf:"bytes,1,rep,name=contests,proto3" json:"contests,omitempty"`
}

func (x *ListContestReply) Reset() {
	*x = ListContestReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContestReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContestReply) ProtoMessage() {}

func (x *ListContestReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContestReply.ProtoReflect.Descriptor instead.
func (*ListContestReply) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{12}
}

func (x *ListContestReply) GetContests() []*ListContestReply_Contest {
	if x != nil {
		return x.Contests
	}
	return nil
}

type AddContestantsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId   int64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	ContestId int64 `protobuf:"varint,2,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	Role      int32 `protobuf:"varint,3,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *AddContestantsRequest) Reset() {
	*x = AddContestantsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddContestantsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddContestantsRequest) ProtoMessage() {}

func (x *AddContestantsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddContestantsRequest.ProtoReflect.Descriptor instead.
func (*AddContestantsRequest) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{13}
}

func (x *AddContestantsRequest) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *AddContestantsRequest) GetContestId() int64 {
	if x != nil {
		return x.ContestId
	}
	return 0
}

func (x *AddContestantsRequest) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

type AddContestantsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *AddContestantsReply) Reset() {
	*x = AddContestantsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddContestantsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddContestantsReply) ProtoMessage() {}

func (x *AddContestantsReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddContestantsReply.ProtoReflect.Descriptor instead.
func (*AddContestantsReply) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{14}
}

func (x *AddContestantsReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ManualRankingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestId int64 `protobuf:"varint,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
}

func (x *ManualRankingRequest) Reset() {
	*x = ManualRankingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualRankingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualRankingRequest) ProtoMessage() {}

func (x *ManualRankingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualRankingRequest.ProtoReflect.Descriptor instead.
func (*ManualRankingRequest) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{15}
}

func (x *ManualRankingRequest) GetContestId() int64 {
	if x != nil {
		return x.ContestId
	}
	return 0
}

type ManualRankingReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ManualRankingReply) Reset() {
	*x = ManualRankingReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualRankingReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualRankingReply) ProtoMessage() {}

func (x *ManualRankingReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualRankingReply.ProtoReflect.Descriptor instead.
func (*ManualRankingReply) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{16}
}

func (x *ManualRankingReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetRankingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestId int64 `protobuf:"varint,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
}

func (x *GetRankingRequest) Reset() {
	*x = GetRankingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRankingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRankingRequest) ProtoMessage() {}

func (x *GetRankingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRankingRequest.ProtoReflect.Descriptor instead.
func (*GetRankingRequest) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{17}
}

func (x *GetRankingRequest) GetContestId() int64 {
	if x != nil {
		return x.ContestId
	}
	return 0
}

type GetRankingReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*GetRankingReply_UserResult `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *GetRankingReply) Reset() {
	*x = GetRankingReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRankingReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRankingReply) ProtoMessage() {}

func (x *GetRankingReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRankingReply.ProtoReflect.Descriptor instead.
func (*GetRankingReply) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{18}
}

func (x *GetRankingReply) GetUsers() []*GetRankingReply_UserResult {
	if x != nil {
		return x.Users
	}
	return nil
}

type CreateGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IsRoot   bool    `protobuf:"varint,2,opt,name=is_root,json=isRoot,proto3" json:"is_root,omitempty"`
	Manage   []int64 `protobuf:"varint,3,rep,packed,name=manage,proto3" json:"manage,omitempty"`
	Contests []int64 `protobuf:"varint,4,rep,packed,name=contests,proto3" json:"contests,omitempty"`
	Problems []int64 `protobuf:"varint,5,rep,packed,name=problems,proto3" json:"problems,omitempty"`
}

func (x *CreateGroupRequest) Reset() {
	*x = CreateGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupRequest) ProtoMessage() {}

func (x *CreateGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateGroupRequest) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{19}
}

func (x *CreateGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateGroupRequest) GetIsRoot() bool {
	if x != nil {
		return x.IsRoot
	}
	return false
}

func (x *CreateGroupRequest) GetManage() []int64 {
	if x != nil {
		return x.Manage
	}
	return nil
}

func (x *CreateGroupRequest) GetContests() []int64 {
	if x != nil {
		return x.Contests
	}
	return nil
}

func (x *CreateGroupRequest) GetProblems() []int64 {
	if x != nil {
		return x.Problems
	}
	return nil
}

type CreateGroupReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateGroupReply) Reset() {
	*x = CreateGroupReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupReply) ProtoMessage() {}

func (x *CreateGroupReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupReply.ProtoReflect.Descriptor instead.
func (*CreateGroupReply) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{20}
}

func (x *CreateGroupReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IsRoot   bool    `protobuf:"varint,3,opt,name=is_root,json=isRoot,proto3" json:"is_root,omitempty"`
	Manage   []int64 `protobuf:"varint,4,rep,packed,name=manage,proto3" json:"manage,omitempty"`
	Contests []int64 `protobuf:"varint,5,rep,packed,name=contests,proto3" json:"contests,omitempty"`
	Problems []int64 `protobuf:"varint,6,rep,packed,name=problems,proto3" json:"problems,omitempty"`
}

func (x *UpdateGroupRequest) Reset() {
	*x = UpdateGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupRequest) ProtoMessage() {}

func (x *UpdateGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateGroupRequest) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateGroupRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateGroupRequest) GetIsRoot() bool {
	if x != nil {
		return x.IsRoot
	}
	return false
}

func (x *UpdateGroupRequest) GetManage() []int64 {
	if x != nil {
		return x.Manage
	}
	return nil
}

func (x *UpdateGroupRequest) GetContests() []int64 {
	if x != nil {
		return x.Contests
	}
	return nil
}

func (x *UpdateGroupRequest) GetProblems() []int64 {
	if x != nil {
		return x.Problems
	}
	return nil
}

type UpdateGroupReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *UpdateGroupReply) Reset() {
	*x = UpdateGroupReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupReply) ProtoMessage() {}

func (x *UpdateGroupReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupReply.ProtoReflect.Descriptor instead.
func (*UpdateGroupReply) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateGroupReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type DeleteGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteGroupRequest) Reset() {
	*x = DeleteGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGroupRequest) ProtoMessage() {}

func (x *DeleteGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteGroupRequest) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteGroupRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteGroupReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteGroupReply) Reset() {
	*x = DeleteGroupReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGroupReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGroupReply) ProtoMessage() {}

func (x *DeleteGroupReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGroupReply.ProtoReflect.Descriptor instead.
func (*DeleteGroupReply) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteGroupReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetGroupRequest) Reset() {
	*x = GetGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupRequest) ProtoMessage() {}

func (x *GetGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupRequest.ProtoReflect.Descriptor instead.
func (*GetGroupRequest) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{25}
}

func (x *GetGroupRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetGroupReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IsRoot   bool    `protobuf:"varint,3,opt,name=is_root,json=isRoot,proto3" json:"is_root,omitempty"`
	Manage   []int64 `protobuf:"varint,4,rep,packed,name=manage,proto3" json:"manage,omitempty"`
	Contests []int64 `protobuf:"varint,5,rep,packed,name=contests,proto3" json:"contests,omitempty"`
	Problems []int64 `protobuf:"varint,6,rep,packed,name=problems,proto3" json:"problems,omitempty"`
}

func (x *GetGroupReply) Reset() {
	*x = GetGroupReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupReply) ProtoMessage() {}

func (x *GetGroupReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupReply.ProtoReflect.Descriptor instead.
func (*GetGroupReply) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{26}
}

func (x *GetGroupReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetGroupReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetGroupReply) GetIsRoot() bool {
	if x != nil {
		return x.IsRoot
	}
	return false
}

func (x *GetGroupReply) GetManage() []int64 {
	if x != nil {
		return x.Manage
	}
	return nil
}

func (x *GetGroupReply) GetContests() []int64 {
	if x != nil {
		return x.Contests
	}
	return nil
}

func (x *GetGroupReply) GetProblems() []int64 {
	if x != nil {
		return x.Problems
	}
	return nil
}

type ListGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size    int64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	Current int64 `protobuf:"varint,2,opt,name=current,proto3" json:"current,omitempty"`
}

func (x *ListGroupRequest) Reset() {
	*x = ListGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupRequest) ProtoMessage() {}

func (x *ListGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupRequest.ProtoReflect.Descriptor instead.
func (*ListGroupRequest) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{27}
}

func (x *ListGroupRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListGroupRequest) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

type ListGroupReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups []*ListGroupReply_Group `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *ListGroupReply) Reset() {
	*x = ListGroupReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGroupReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupReply) ProtoMessage() {}

func (x *ListGroupReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupReply.ProtoReflect.Descriptor instead.
func (*ListGroupReply) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{28}
}

func (x *ListGroupReply) GetGroups() []*ListGroupReply_Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

type Problem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content     string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Point       int32  `protobuf:"varint,4,opt,name=point,proto3" json:"point,omitempty"`
	ContestId   int64  `protobuf:"varint,5,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	CaseVersion int32  `protobuf:"varint,6,opt,name=case_version,json=caseVersion,proto3" json:"case_version,omitempty"`
	Index       int32  `protobuf:"varint,7,opt,name=index,proto3" json:"index,omitempty"`
	Config      string `protobuf:"bytes,8,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *Problem) Reset() {
	*x = Problem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Problem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Problem) ProtoMessage() {}

func (x *Problem) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Problem.ProtoReflect.Descriptor instead.
func (*Problem) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{29}
}

func (x *Problem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Problem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Problem) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Problem) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *Problem) GetContestId() int64 {
	if x != nil {
		return x.ContestId
	}
	return 0
}

func (x *Problem) GetCaseVersion() int32 {
	if x != nil {
		return x.CaseVersion
	}
	return 0
}

func (x *Problem) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Problem) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

type Submission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code       string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Status     int32                  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Point      int32                  `protobuf:"varint,4,opt,name=point,proto3" json:"point,omitempty"`
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *Submission) Reset() {
	*x = Submission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Submission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Submission) ProtoMessage() {}

func (x *Submission) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Submission.ProtoReflect.Descriptor instead.
func (*Submission) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{30}
}

func (x *Submission) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Submission) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Submission) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Submission) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *Submission) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

type SubmitJudgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubmissionId int64 `protobuf:"varint,1,opt,name=submission_id,json=submissionId,proto3" json:"submission_id,omitempty"`
	Point        int32 `protobuf:"varint,2,opt,name=point,proto3" json:"point,omitempty"`
}

func (x *SubmitJudgeRequest) Reset() {
	*x = SubmitJudgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitJudgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitJudgeRequest) ProtoMessage() {}

func (x *SubmitJudgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitJudgeRequest.ProtoReflect.Descriptor instead.
func (*SubmitJudgeRequest) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{31}
}

func (x *SubmitJudgeRequest) GetSubmissionId() int64 {
	if x != nil {
		return x.SubmissionId
	}
	return 0
}

func (x *SubmitJudgeRequest) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

type SubmitJudgeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubmitJudgeReply) Reset() {
	*x = SubmitJudgeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitJudgeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitJudgeReply) ProtoMessage() {}

func (x *SubmitJudgeReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitJudgeReply.ProtoReflect.Descriptor instead.
func (*SubmitJudgeReply) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{32}
}

type GetJudgableProblemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetJudgableProblemsRequest) Reset() {
	*x = GetJudgableProblemsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJudgableProblemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJudgableProblemsRequest) ProtoMessage() {}

func (x *GetJudgableProblemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJudgableProblemsRequest.ProtoReflect.Descriptor instead.
func (*GetJudgableProblemsRequest) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{33}
}

type GetJudgableProblemsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*Problem `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *GetJudgableProblemsReply) Reset() {
	*x = GetJudgableProblemsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJudgableProblemsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJudgableProblemsReply) ProtoMessage() {}

func (x *GetJudgableProblemsReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJudgableProblemsReply.ProtoReflect.Descriptor instead.
func (*GetJudgableProblemsReply) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{34}
}

func (x *GetJudgableProblemsReply) GetResults() []*Problem {
	if x != nil {
		return x.Results
	}
	return nil
}

type GetSubmissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId int64 `protobuf:"varint,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Status    int32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GetSubmissionsRequest) Reset() {
	*x = GetSubmissionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubmissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubmissionsRequest) ProtoMessage() {}

func (x *GetSubmissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubmissionsRequest.ProtoReflect.Descriptor instead.
func (*GetSubmissionsRequest) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{35}
}

func (x *GetSubmissionsRequest) GetProblemId() int64 {
	if x != nil {
		return x.ProblemId
	}
	return 0
}

func (x *GetSubmissionsRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type GetSubmissionsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Submissions []*Submission `protobuf:"bytes,1,rep,name=submissions,proto3" json:"submissions,omitempty"`
}

func (x *GetSubmissionsReply) Reset() {
	*x = GetSubmissionsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubmissionsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubmissionsReply) ProtoMessage() {}

func (x *GetSubmissionsReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubmissionsReply.ProtoReflect.Descriptor instead.
func (*GetSubmissionsReply) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{36}
}

func (x *GetSubmissionsReply) GetSubmissions() []*Submission {
	if x != nil {
		return x.Submissions
	}
	return nil
}

type CreateProblemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeId     int64      `protobuf:"varint,1,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
	Title      string     `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content    string     `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Point      int32      `protobuf:"varint,4,opt,name=point,proto3" json:"point,omitempty"`
	ContestId  int64      `protobuf:"varint,5,opt,name=contestId,proto3" json:"contestId,omitempty"`
	Index      int32      `protobuf:"varint,6,opt,name=index,proto3" json:"index,omitempty"`
	Config     string     `protobuf:"bytes,7,opt,name=config,proto3" json:"config,omitempty"`
	OwnerId    int64      `protobuf:"varint,8,opt,name=ownerId,proto3" json:"ownerId,omitempty"`
	Visibility Visibility `protobuf:"varint,9,opt,name=visibility,proto3,enum=api.sastoj.admin.admin.service.v1.Visibility" json:"visibility,omitempty"`
}

func (x *CreateProblemRequest) Reset() {
	*x = CreateProblemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProblemRequest) ProtoMessage() {}

func (x *CreateProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProblemRequest.ProtoReflect.Descriptor instead.
func (*CreateProblemRequest) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{37}
}

func (x *CreateProblemRequest) GetTypeId() int64 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

func (x *CreateProblemRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateProblemRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CreateProblemRequest) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *CreateProblemRequest) GetContestId() int64 {
	if x != nil {
		return x.ContestId
	}
	return 0
}

func (x *CreateProblemRequest) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CreateProblemRequest) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *CreateProblemRequest) GetOwnerId() int64 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *CreateProblemRequest) GetVisibility() Visibility {
	if x != nil {
		return x.Visibility
	}
	return Visibility_Private
}

type CreateProblemReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateProblemReply) Reset() {
	*x = CreateProblemReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProblemReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProblemReply) ProtoMessage() {}

func (x *CreateProblemReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProblemReply.ProtoReflect.Descriptor instead.
func (*CreateProblemReply) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{38}
}

func (x *CreateProblemReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateProblemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TypeId      int64      `protobuf:"varint,2,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
	Title       string     `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Content     string     `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Point       int32      `protobuf:"varint,5,opt,name=point,proto3" json:"point,omitempty"`
	ContestId   int64      `protobuf:"varint,6,opt,name=contestId,proto3" json:"contestId,omitempty"`
	CaseVersion int32      `protobuf:"varint,7,opt,name=caseVersion,proto3" json:"caseVersion,omitempty"`
	Index       int32      `protobuf:"varint,8,opt,name=index,proto3" json:"index,omitempty"`
	Config      string     `protobuf:"bytes,9,opt,name=config,proto3" json:"config,omitempty"`
	OwnerId     int64      `protobuf:"varint,10,opt,name=ownerId,proto3" json:"ownerId,omitempty"`
	Visibility  Visibility `protobuf:"varint,11,opt,name=visibility,proto3,enum=api.sastoj.admin.admin.service.v1.Visibility" json:"visibility,omitempty"`
}

func (x *UpdateProblemRequest) Reset() {
	*x = UpdateProblemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProblemRequest) ProtoMessage() {}

func (x *UpdateProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProblemRequest.ProtoReflect.Descriptor instead.
func (*UpdateProblemRequest) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{39}
}

func (x *UpdateProblemRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateProblemRequest) GetTypeId() int64 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

func (x *UpdateProblemRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateProblemRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UpdateProblemRequest) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *UpdateProblemRequest) GetContestId() int64 {
	if x != nil {
		return x.ContestId
	}
	return 0
}

func (x *UpdateProblemRequest) GetCaseVersion() int32 {
	if x != nil {
		return x.CaseVersion
	}
	return 0
}

func (x *UpdateProblemRequest) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *UpdateProblemRequest) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *UpdateProblemRequest) GetOwnerId() int64 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *UpdateProblemRequest) GetVisibility() Visibility {
	if x != nil {
		return x.Visibility
	}
	return Visibility_Private
}

type UpdateProblemReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *UpdateProblemReply) Reset() {
	*x = UpdateProblemReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProblemReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProblemReply) ProtoMessage() {}

func (x *UpdateProblemReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProblemReply.ProtoReflect.Descriptor instead.
func (*UpdateProblemReply) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{40}
}

func (x *UpdateProblemReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type DeleteProblemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteProblemRequest) Reset() {
	*x = DeleteProblemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProblemRequest) ProtoMessage() {}

func (x *DeleteProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProblemRequest.ProtoReflect.Descriptor instead.
func (*DeleteProblemRequest) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{41}
}

func (x *DeleteProblemRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteProblemReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteProblemReply) Reset() {
	*x = DeleteProblemReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProblemReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProblemReply) ProtoMessage() {}

func (x *DeleteProblemReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProblemReply.ProtoReflect.Descriptor instead.
func (*DeleteProblemReply) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{42}
}

func (x *DeleteProblemReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetProblemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetProblemRequest) Reset() {
	*x = GetProblemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemRequest) ProtoMessage() {}

func (x *GetProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemRequest.ProtoReflect.Descriptor instead.
func (*GetProblemRequest) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{43}
}

func (x *GetProblemRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetProblemReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TypeId      int64      `protobuf:"varint,2,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
	Title       string     `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Content     string     `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Point       int32      `protobuf:"varint,5,opt,name=point,proto3" json:"point,omitempty"`
	ContestId   int64      `protobuf:"varint,6,opt,name=contestId,proto3" json:"contestId,omitempty"`
	CaseVersion int32      `protobuf:"varint,7,opt,name=caseVersion,proto3" json:"caseVersion,omitempty"`
	Index       int32      `protobuf:"varint,8,opt,name=index,proto3" json:"index,omitempty"`
	Config      string     `protobuf:"bytes,9,opt,name=config,proto3" json:"config,omitempty"`
	OwnerId     int64      `protobuf:"varint,10,opt,name=ownerId,proto3" json:"ownerId,omitempty"`
	Visibility  Visibility `protobuf:"varint,11,opt,name=visibility,proto3,enum=api.sastoj.admin.admin.service.v1.Visibility" json:"visibility,omitempty"`
}

func (x *GetProblemReply) Reset() {
	*x = GetProblemReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProblemReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemReply) ProtoMessage() {}

func (x *GetProblemReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemReply.ProtoReflect.Descriptor instead.
func (*GetProblemReply) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{44}
}

func (x *GetProblemReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetProblemReply) GetTypeId() int64 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

func (x *GetProblemReply) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetProblemReply) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *GetProblemReply) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *GetProblemReply) GetContestId() int64 {
	if x != nil {
		return x.ContestId
	}
	return 0
}

func (x *GetProblemReply) GetCaseVersion() int32 {
	if x != nil {
		return x.CaseVersion
	}
	return 0
}

func (x *GetProblemReply) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *GetProblemReply) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *GetProblemReply) GetOwnerId() int64 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *GetProblemReply) GetVisibility() Visibility {
	if x != nil {
		return x.Visibility
	}
	return Visibility_Private
}

type ListProblemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size     int32 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	Currency int32 `protobuf:"varint,2,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *ListProblemRequest) Reset() {
	*x = ListProblemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProblemRequest) ProtoMessage() {}

func (x *ListProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProblemRequest.ProtoReflect.Descriptor instead.
func (*ListProblemRequest) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{45}
}

func (x *ListProblemRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListProblemRequest) GetCurrency() int32 {
	if x != nil {
		return x.Currency
	}
	return 0
}

type ListProblemReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency int32                       `protobuf:"varint,2,opt,name=currency,proto3" json:"currency,omitempty"`
	Total    int32                       `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Problems []*ListProblemReply_Problem `protobuf:"bytes,3,rep,name=problems,proto3" json:"problems,omitempty"`
}

func (x *ListProblemReply) Reset() {
	*x = ListProblemReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProblemReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProblemReply) ProtoMessage() {}

func (x *ListProblemReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProblemReply.ProtoReflect.Descriptor instead.
func (*ListProblemReply) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{46}
}

func (x *ListProblemReply) GetCurrency() int32 {
	if x != nil {
		return x.Currency
	}
	return 0
}

func (x *ListProblemReply) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListProblemReply) GetProblems() []*ListProblemReply_Problem {
	if x != nil {
		return x.Problems
	}
	return nil
}

type GetProblemTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetProblemTypesRequest) Reset() {
	*x = GetProblemTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProblemTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemTypesRequest) ProtoMessage() {}

func (x *GetProblemTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemTypesRequest.ProtoReflect.Descriptor instead.
func (*GetProblemTypesRequest) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{47}
}

type GetProblemTypesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Types []*GetProblemTypesReply_ProblemType `protobuf:"bytes,1,rep,name=types,proto3" json:"types,omitempty"`
}

func (x *GetProblemTypesReply) Reset() {
	*x = GetProblemTypesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProblemTypesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemTypesReply) ProtoMessage() {}

func (x *GetProblemTypesReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemTypesReply.ProtoReflect.Descriptor instead.
func (*GetProblemTypesReply) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{48}
}

func (x *GetProblemTypesReply) GetTypes() []*GetProblemTypesReply_ProblemType {
	if x != nil {
		return x.Types
	}
	return nil
}

type UpdateJudgerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId      int64   `protobuf:"varint,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	JudgerGroupIds []int64 `protobuf:"varint,2,rep,packed,name=judger_group_ids,json=judgerGroupIds,proto3" json:"judger_group_ids,omitempty"`
}

func (x *UpdateJudgerRequest) Reset() {
	*x = UpdateJudgerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateJudgerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateJudgerRequest) ProtoMessage() {}

func (x *UpdateJudgerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateJudgerRequest.ProtoReflect.Descriptor instead.
func (*UpdateJudgerRequest) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{49}
}

func (x *UpdateJudgerRequest) GetProblemId() int64 {
	if x != nil {
		return x.ProblemId
	}
	return 0
}

func (x *UpdateJudgerRequest) GetJudgerGroupIds() []int64 {
	if x != nil {
		return x.JudgerGroupIds
	}
	return nil
}

type UpdateJudgerReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *UpdateJudgerReply) Reset() {
	*x = UpdateJudgerReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateJudgerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateJudgerReply) ProtoMessage() {}

func (x *UpdateJudgerReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateJudgerReply.ProtoReflect.Descriptor instead.
func (*UpdateJudgerReply) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{50}
}

func (x *UpdateJudgerReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetJudgerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId int64 `protobuf:"varint,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
}

func (x *GetJudgerRequest) Reset() {
	*x = GetJudgerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJudgerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJudgerRequest) ProtoMessage() {}

func (x *GetJudgerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJudgerRequest.ProtoReflect.Descriptor instead.
func (*GetJudgerRequest) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{51}
}

func (x *GetJudgerRequest) GetProblemId() int64 {
	if x != nil {
		return x.ProblemId
	}
	return 0
}

type GetJudgerReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups []*GetJudgerReply_Group `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *GetJudgerReply) Reset() {
	*x = GetJudgerReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJudgerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJudgerReply) ProtoMessage() {}

func (x *GetJudgerReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJudgerReply.ProtoReflect.Descriptor instead.
func (*GetJudgerReply) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{52}
}

func (x *GetJudgerReply) GetGroups() []*GetJudgerReply_Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

type CreateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string  `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string  `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	GroupIds []int64 `protobuf:"varint,3,rep,packed,name=group_ids,json=groupIds,proto3" json:"group_ids,omitempty"`
}

func (x *CreateUserRequest) Reset() {
	*x = CreateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserRequest) ProtoMessage() {}

func (x *CreateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserRequest.ProtoReflect.Descriptor instead.
func (*CreateUserRequest) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{53}
}

func (x *CreateUserRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CreateUserRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CreateUserRequest) GetGroupIds() []int64 {
	if x != nil {
		return x.GroupIds
	}
	return nil
}

type CreateUserReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateUserReply) Reset() {
	*x = CreateUserReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserReply) ProtoMessage() {}

func (x *CreateUserReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserReply.ProtoReflect.Descriptor instead.
func (*CreateUserReply) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{54}
}

func (x *CreateUserReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type BatchCreateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupIds []int64 `protobuf:"varint,1,rep,packed,name=group_ids,json=groupIds,proto3" json:"group_ids,omitempty"`
	Number   int64   `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *BatchCreateUserRequest) Reset() {
	*x = BatchCreateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCreateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCreateUserRequest) ProtoMessage() {}

func (x *BatchCreateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCreateUserRequest.ProtoReflect.Descriptor instead.
func (*BatchCreateUserRequest) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{55}
}

func (x *BatchCreateUserRequest) GetGroupIds() []int64 {
	if x != nil {
		return x.GroupIds
	}
	return nil
}

func (x *BatchCreateUserRequest) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

type BatchCreateUserReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*BatchCreateUserReply_User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *BatchCreateUserReply) Reset() {
	*x = BatchCreateUserReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCreateUserReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCreateUserReply) ProtoMessage() {}

func (x *BatchCreateUserReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCreateUserReply.ProtoReflect.Descriptor instead.
func (*BatchCreateUserReply) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{56}
}

func (x *BatchCreateUserReply) GetUsers() []*BatchCreateUserReply_User {
	if x != nil {
		return x.Users
	}
	return nil
}

type UpdateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username string  `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password string  `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	GroupIds []int64 `protobuf:"varint,4,rep,packed,name=group_ids,json=groupIds,proto3" json:"group_ids,omitempty"`
	State    int32   `protobuf:"varint,5,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *UpdateUserRequest) Reset() {
	*x = UpdateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserRequest) ProtoMessage() {}

func (x *UpdateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserRequest) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{57}
}

func (x *UpdateUserRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateUserRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UpdateUserRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UpdateUserRequest) GetGroupIds() []int64 {
	if x != nil {
		return x.GroupIds
	}
	return nil
}

func (x *UpdateUserRequest) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

type UpdateUserReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *UpdateUserReply) Reset() {
	*x = UpdateUserReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserReply) ProtoMessage() {}

func (x *UpdateUserReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserReply.ProtoReflect.Descriptor instead.
func (*UpdateUserReply) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{58}
}

func (x *UpdateUserReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type DeleteUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteUserRequest) Reset() {
	*x = DeleteUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserRequest) ProtoMessage() {}

func (x *DeleteUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserRequest) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{59}
}

func (x *DeleteUserRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteUserReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteUserReply) Reset() {
	*x = DeleteUserReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserReply) ProtoMessage() {}

func (x *DeleteUserReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserReply.ProtoReflect.Descriptor instead.
func (*DeleteUserReply) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{60}
}

func (x *DeleteUserReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetUserRequest) Reset() {
	*x = GetUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRequest) ProtoMessage() {}

func (x *GetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRequest.ProtoReflect.Descriptor instead.
func (*GetUserRequest) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{61}
}

func (x *GetUserRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetUserReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username string  `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	GroupIds []int64 `protobuf:"varint,3,rep,packed,name=group_ids,json=groupIds,proto3" json:"group_ids,omitempty"`
	State    int32   `protobuf:"varint,4,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *GetUserReply) Reset() {
	*x = GetUserReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserReply) ProtoMessage() {}

func (x *GetUserReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserReply.ProtoReflect.Descriptor instead.
func (*GetUserReply) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{62}
}

func (x *GetUserReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetUserReply) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GetUserReply) GetGroupIds() []int64 {
	if x != nil {
		return x.GroupIds
	}
	return nil
}

func (x *GetUserReply) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

type ListUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size    int64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	Current int64 `protobuf:"varint,2,opt,name=current,proto3" json:"current,omitempty"`
}

func (x *ListUserRequest) Reset() {
	*x = ListUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserRequest) ProtoMessage() {}

func (x *ListUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserRequest.ProtoReflect.Descriptor instead.
func (*ListUserRequest) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{63}
}

func (x *ListUserRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListUserRequest) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

type ListUserReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*ListUserReply_User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *ListUserReply) Reset() {
	*x = ListUserReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserReply) ProtoMessage() {}

func (x *ListUserReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserReply.ProtoReflect.Descriptor instead.
func (*ListUserReply) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{64}
}

func (x *ListUserReply) GetUsers() []*ListUserReply_User {
	if x != nil {
		return x.Users
	}
	return nil
}

type ListContestReply_Contest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Status      int32                  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	Type        int32                  `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
	StartTime   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Language    string                 `protobuf:"bytes,8,opt,name=language,proto3" json:"language,omitempty"`
	ExtraTime   int32                  `protobuf:"varint,9,opt,name=extra_time,json=extraTime,proto3" json:"extra_time,omitempty"`
	CreateTime  *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *ListContestReply_Contest) Reset() {
	*x = ListContestReply_Contest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContestReply_Contest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContestReply_Contest) ProtoMessage() {}

func (x *ListContestReply_Contest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContestReply_Contest.ProtoReflect.Descriptor instead.
func (*ListContestReply_Contest) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{12, 0}
}

func (x *ListContestReply_Contest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListContestReply_Contest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ListContestReply_Contest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ListContestReply_Contest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ListContestReply_Contest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ListContestReply_Contest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ListContestReply_Contest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ListContestReply_Contest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *ListContestReply_Contest) GetExtraTime() int32 {
	if x != nil {
		return x.ExtraTime
	}
	return 0
}

func (x *ListContestReply_Contest) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

type GetRankingReply_UserResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Problems   []*GetRankingReply_UserResult_ProblemResult `protobuf:"bytes,1,rep,name=problems,proto3" json:"problems,omitempty"`
	Username   string                                      `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	TotalScore int32                                       `protobuf:"varint,3,opt,name=total_score,json=totalScore,proto3" json:"total_score,omitempty"`
	Rank       int32                                       `protobuf:"varint,4,opt,name=rank,proto3" json:"rank,omitempty"`
	Penalty    int32                                       `protobuf:"varint,5,opt,name=penalty,proto3" json:"penalty,omitempty"`
}

func (x *GetRankingReply_UserResult) Reset() {
	*x = GetRankingReply_UserResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRankingReply_UserResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRankingReply_UserResult) ProtoMessage() {}

func (x *GetRankingReply_UserResult) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRankingReply_UserResult.ProtoReflect.Descriptor instead.
func (*GetRankingReply_UserResult) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{18, 0}
}

func (x *GetRankingReply_UserResult) GetProblems() []*GetRankingReply_UserResult_ProblemResult {
	if x != nil {
		return x.Problems
	}
	return nil
}

func (x *GetRankingReply_UserResult) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GetRankingReply_UserResult) GetTotalScore() int32 {
	if x != nil {
		return x.TotalScore
	}
	return 0
}

func (x *GetRankingReply_UserResult) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *GetRankingReply_UserResult) GetPenalty() int32 {
	if x != nil {
		return x.Penalty
	}
	return 0
}

type GetRankingReply_UserResult_ProblemResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId         int64                  `protobuf:"varint,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	State             int32                  `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	Point             int32                  `protobuf:"varint,3,opt,name=point,proto3" json:"point,omitempty"`
	TriedTimes        int32                  `protobuf:"varint,4,opt,name=tried_times,json=triedTimes,proto3" json:"tried_times,omitempty"`
	ScoreAchievedTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=score_achieved_time,json=scoreAchievedTime,proto3" json:"score_achieved_time,omitempty"`
}

func (x *GetRankingReply_UserResult_ProblemResult) Reset() {
	*x = GetRankingReply_UserResult_ProblemResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRankingReply_UserResult_ProblemResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRankingReply_UserResult_ProblemResult) ProtoMessage() {}

func (x *GetRankingReply_UserResult_ProblemResult) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRankingReply_UserResult_ProblemResult.ProtoReflect.Descriptor instead.
func (*GetRankingReply_UserResult_ProblemResult) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{18, 0, 0}
}

func (x *GetRankingReply_UserResult_ProblemResult) GetProblemId() int64 {
	if x != nil {
		return x.ProblemId
	}
	return 0
}

func (x *GetRankingReply_UserResult_ProblemResult) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *GetRankingReply_UserResult_ProblemResult) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *GetRankingReply_UserResult_ProblemResult) GetTriedTimes() int32 {
	if x != nil {
		return x.TriedTimes
	}
	return 0
}

func (x *GetRankingReply_UserResult_ProblemResult) GetScoreAchievedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScoreAchievedTime
	}
	return nil
}

type ListGroupReply_Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IsRoot   bool    `protobuf:"varint,3,opt,name=is_root,json=isRoot,proto3" json:"is_root,omitempty"`
	Manage   []int64 `protobuf:"varint,4,rep,packed,name=manage,proto3" json:"manage,omitempty"`
	Contests []int64 `protobuf:"varint,5,rep,packed,name=contests,proto3" json:"contests,omitempty"`
	Problems []int64 `protobuf:"varint,6,rep,packed,name=problems,proto3" json:"problems,omitempty"`
}

func (x *ListGroupReply_Group) Reset() {
	*x = ListGroupReply_Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGroupReply_Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupReply_Group) ProtoMessage() {}

func (x *ListGroupReply_Group) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupReply_Group.ProtoReflect.Descriptor instead.
func (*ListGroupReply_Group) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{28, 0}
}

func (x *ListGroupReply_Group) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListGroupReply_Group) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListGroupReply_Group) GetIsRoot() bool {
	if x != nil {
		return x.IsRoot
	}
	return false
}

func (x *ListGroupReply_Group) GetManage() []int64 {
	if x != nil {
		return x.Manage
	}
	return nil
}

func (x *ListGroupReply_Group) GetContests() []int64 {
	if x != nil {
		return x.Contests
	}
	return nil
}

func (x *ListGroupReply_Group) GetProblems() []int64 {
	if x != nil {
		return x.Problems
	}
	return nil
}

type ListProblemReply_Problem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TypeId      int64      `protobuf:"varint,2,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
	Title       string     `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Content     string     `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Point       int32      `protobuf:"varint,5,opt,name=point,proto3" json:"point,omitempty"`
	ContestId   int64      `protobuf:"varint,6,opt,name=contestId,proto3" json:"contestId,omitempty"`
	CaseVersion int32      `protobuf:"varint,7,opt,name=caseVersion,proto3" json:"caseVersion,omitempty"`
	Index       int32      `protobuf:"varint,8,opt,name=index,proto3" json:"index,omitempty"`
	Config      string     `protobuf:"bytes,9,opt,name=config,proto3" json:"config,omitempty"`
	OwnerId     int64      `protobuf:"varint,10,opt,name=ownerId,proto3" json:"ownerId,omitempty"`
	Visibility  Visibility `protobuf:"varint,11,opt,name=visibility,proto3,enum=api.sastoj.admin.admin.service.v1.Visibility" json:"visibility,omitempty"`
}

func (x *ListProblemReply_Problem) Reset() {
	*x = ListProblemReply_Problem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProblemReply_Problem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProblemReply_Problem) ProtoMessage() {}

func (x *ListProblemReply_Problem) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProblemReply_Problem.ProtoReflect.Descriptor instead.
func (*ListProblemReply_Problem) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{46, 0}
}

func (x *ListProblemReply_Problem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListProblemReply_Problem) GetTypeId() int64 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

func (x *ListProblemReply_Problem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ListProblemReply_Problem) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ListProblemReply_Problem) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *ListProblemReply_Problem) GetContestId() int64 {
	if x != nil {
		return x.ContestId
	}
	return 0
}

func (x *ListProblemReply_Problem) GetCaseVersion() int32 {
	if x != nil {
		return x.CaseVersion
	}
	return 0
}

func (x *ListProblemReply_Problem) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ListProblemReply_Problem) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *ListProblemReply_Problem) GetOwnerId() int64 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *ListProblemReply_Problem) GetVisibility() Visibility {
	if x != nil {
		return x.Visibility
	}
	return Visibility_Private
}

type GetProblemTypesReply_ProblemType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Slug        string `protobuf:"bytes,3,opt,name=slug,proto3" json:"slug,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Judge       string `protobuf:"bytes,5,opt,name=judge,proto3" json:"judge,omitempty"`
}

func (x *GetProblemTypesReply_ProblemType) Reset() {
	*x = GetProblemTypesReply_ProblemType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProblemTypesReply_ProblemType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemTypesReply_ProblemType) ProtoMessage() {}

func (x *GetProblemTypesReply_ProblemType) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemTypesReply_ProblemType.ProtoReflect.Descriptor instead.
func (*GetProblemTypesReply_ProblemType) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{48, 0}
}

func (x *GetProblemTypesReply_ProblemType) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetProblemTypesReply_ProblemType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetProblemTypesReply_ProblemType) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *GetProblemTypesReply_ProblemType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetProblemTypesReply_ProblemType) GetJudge() string {
	if x != nil {
		return x.Judge
	}
	return ""
}

type GetJudgerReply_Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetJudgerReply_Group) Reset() {
	*x = GetJudgerReply_Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJudgerReply_Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJudgerReply_Group) ProtoMessage() {}

func (x *GetJudgerReply_Group) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJudgerReply_Group.ProtoReflect.Descriptor instead.
func (*GetJudgerReply_Group) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{52, 0}
}

func (x *GetJudgerReply_Group) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetJudgerReply_Group) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type BatchCreateUserReply_User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *BatchCreateUserReply_User) Reset() {
	*x = BatchCreateUserReply_User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCreateUserReply_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCreateUserReply_User) ProtoMessage() {}

func (x *BatchCreateUserReply_User) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCreateUserReply_User.ProtoReflect.Descriptor instead.
func (*BatchCreateUserReply_User) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{56, 0}
}

func (x *BatchCreateUserReply_User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *BatchCreateUserReply_User) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type ListUserReply_User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username string  `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	GroupIds []int64 `protobuf:"varint,3,rep,packed,name=group_ids,json=groupIds,proto3" json:"group_ids,omitempty"`
	State    int32   `protobuf:"varint,4,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *ListUserReply_User) Reset() {
	*x = ListUserReply_User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_service_v1_admin_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserReply_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserReply_User) ProtoMessage() {}

func (x *ListUserReply_User) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_service_v1_admin_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserReply_User.ProtoReflect.Descriptor instead.
func (*ListUserReply_User) Descriptor() ([]byte, []int) {
	return file_admin_admin_service_v1_admin_proto_rawDescGZIP(), []int{64, 0}
}

func (x *ListUserReply_User) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListUserReply_User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ListUserReply_User) GetGroupIds() []int64 {
	if x != nil {
		return x.GroupIds
	}
	return nil
}

func (x *ListUserReply_User) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

var File_admin_admin_service_v1_admin_proto protoreflect.FileDescriptor

var file_admin_admin_service_v1_admin_proto_rawDesc = []byte{
	0x0a, 0x22, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5b, 0x0a, 0x04, 0x43, 0x61, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x41, 0x75, 0x74,
	0x6f, 0x22, 0x3e, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x73,
	0x42, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49,
	0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x73,
	0x42, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0xe4, 0x02, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x24, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xf4, 0x02,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x2e, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x26, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x12,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x23, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xef, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x66, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x10, 0xfa, 0x42, 0x0d, 0x22, 0x0b, 0x20, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x2a, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x10, 0xfa, 0x42, 0x0d, 0x22, 0x0b, 0x20, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xd5, 0x03, 0x0a, 0x10,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x57, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x1a, 0xe7, 0x02, 0x0a, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x70, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x30, 0x00, 0x30, 0x01, 0x52,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x2f, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x35, 0x0a, 0x14, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x2e, 0x0a,
	0x12, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x32, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x22, 0x93, 0x04, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x53, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f,
	0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x1a, 0xaa, 0x03, 0x0a, 0x0a, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x67, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x1a, 0xc7, 0x01,
	0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72,
	0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x74, 0x72, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x13, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x63, 0x68, 0x69, 0x65,
	0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x22, 0x22, 0x0a, 0x10, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xa1, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x52,
	0x6f, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x73, 0x22, 0x2c, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0x24, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x21, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x69, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x22, 0x64, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x10, 0xfa, 0x42, 0x0d, 0x22, 0x0b,
	0x20, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x10, 0xfa, 0x42, 0x0d, 0x22, 0x0b, 0x20, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xf8, 0x01,
	0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x4f, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x1a, 0x94, 0x01, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x22, 0xcf, 0x01, 0x0a, 0x07, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x73,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x63, 0x61, 0x73, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x9b, 0x01, 0x0a, 0x0a, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1c, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x60, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x44, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x4e, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x66, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x4f, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xaa, 0x02, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61,
	0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x22, 0x24, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xdc, 0x02, 0x0a, 0x14, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x61, 0x73, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61, 0x73, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x2e, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x26, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x2e, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x23, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xd7, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61, 0x73, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61, 0x73, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x4d, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x44,
	0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x22, 0xef, 0x03, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x57, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x73, 0x1a, 0xcf, 0x02, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x61, 0x73, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x63, 0x61, 0x73, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xf0, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x59, 0x0a, 0x05, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x1a, 0x7d, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x75,
	0x64, 0x67, 0x65, 0x22, 0x5e, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x75, 0x64,
	0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6a, 0x75, 0x64,
	0x67, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x73, 0x22, 0x2d, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x75, 0x64,
	0x67, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x22, 0x31, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4a, 0x75, 0x64,
	0x67, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4f, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4a, 0x75, 0x64, 0x67, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x1a, 0x2b, 0x0a, 0x05, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x68, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73,
	0x22, 0x21, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x56, 0x0a, 0x16, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22,
	0x02, 0x20, 0x00, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xaa, 0x01, 0x0a, 0x14,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x52, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x1a, 0x3e, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x2b, 0x0a, 0x0f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x23, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2b, 0x0a, 0x0f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x20, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6d, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x3f, 0x0a, 0x0f, 0x4c, 0x69, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xc3, 0x01, 0x0a, 0x0d, 0x4c,
	0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4b, 0x0a, 0x05,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x1a, 0x65, 0x0a, 0x04, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2a, 0xcc, 0x02, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x00, 0x1a, 0x04, 0xa8, 0x45, 0xf4, 0x03, 0x12, 0x1a, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x04,
	0xa8, 0x45, 0x90, 0x03, 0x12, 0x19, 0x0a, 0x0f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12,
	0x1b, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x1a, 0x04, 0xa8, 0x45, 0x94, 0x03, 0x12, 0x19, 0x0a, 0x0f,
	0x43, 0x4f, 0x4e, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x04, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x19, 0x0a, 0x0f, 0x43, 0x4f, 0x4e, 0x54, 0x45,
	0x53, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x45, 0x44, 0x10, 0x05, 0x1a, 0x04, 0xa8, 0x45,
	0x90, 0x03, 0x12, 0x19, 0x0a, 0x0f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x06, 0x1a, 0x04, 0xa8, 0x45, 0x94, 0x03, 0x12, 0x17, 0x0a,
	0x0d, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x07,
	0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x17, 0x0a, 0x0d, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x45, 0x58, 0x49, 0x53, 0x54, 0x45, 0x44, 0x10, 0x08, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12,
	0x18, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x09, 0x1a, 0x04, 0xa8, 0x45, 0x94, 0x03, 0x12, 0x16, 0x0a, 0x0c, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x1a, 0x04, 0xa8, 0x45, 0x90,
	0x03, 0x12, 0x16, 0x0a, 0x0c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x0b, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x1a, 0x04, 0xa0, 0x45, 0xf4, 0x03, 0x2a,
	0x32, 0x0a, 0x0a, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x10, 0x02, 0x32, 0xb3, 0x24, 0x0a, 0x05, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0xb6, 0x01,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x73, 0x42, 0x79, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x40, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x73, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x73, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x49, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x14, 0x2a, 0x12, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x94, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d,
	0x3a, 0x01, 0x2a, 0x22, 0x08, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x94, 0x01,
	0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12,
	0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x3a, 0x01, 0x2a, 0x1a, 0x08, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x12, 0x96, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73,
	0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x2a, 0x0d,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x8d, 0x01,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x34, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x8b, 0x01,
	0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x35, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f,
	0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x10, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0a, 0x12, 0x08, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0xa3, 0x01, 0x0a, 0x0e,
	0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x38,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x73, 0x12, 0x99, 0x01, 0x0a, 0x0d, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x12, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x3a, 0x01, 0x2a, 0x22, 0x0d,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x9a, 0x01,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x72, 0x61, 0x6e, 0x6b, 0x2f, 0x7b, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x8c, 0x01, 0x0a, 0x0b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x35, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x3a, 0x01,
	0x2a, 0x22, 0x06, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x8c, 0x01, 0x0a, 0x0b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x3a, 0x01, 0x2a,
	0x1a, 0x06, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x8e, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x2a, 0x0b, 0x2f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x85, 0x01, 0x0a, 0x08, 0x47, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73,
	0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x13, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0x83, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f,
	0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x0e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x08, 0x12,
	0x06, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x9c, 0x01, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x12, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61,
	0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16,
	0x2f, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2f, 0x7b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xa1, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4a, 0x75,
	0x64, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x12, 0x3d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x0e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x08, 0x12, 0x06, 0x2f, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x12, 0x9f, 0x01, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61,
	0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x9d, 0x01, 0x0a,
	0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x72, 0x12, 0x36, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74,
	0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4a, 0x75, 0x64, 0x67, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x72, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x91, 0x01, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x72, 0x12, 0x33, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x6a, 0x75, 0x64,
	0x67, 0x65, 0x72, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d,
	0x12, 0x94, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x12, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x3a, 0x01, 0x2a, 0x22, 0x08, 0x2f,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x94, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0d, 0x3a, 0x01, 0x2a, 0x1a, 0x08, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x96,
	0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x12, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x2a, 0x0d, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x90, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61,
	0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x8d, 0x01, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x9d, 0x01, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x39,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x0a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x3a, 0x01, 0x2a, 0x22, 0x06,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x39, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74,
	0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x17,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x3a, 0x01, 0x2a, 0x22, 0x0c, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x89, 0x01, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73,
	0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x3a, 0x01, 0x2a, 0x1a, 0x06, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x13, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0d, 0x2a, 0x0b, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0x82, 0x01, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x31, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x80, 0x01, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61,
	0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x0e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x08, 0x12, 0x06, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x42, 0x8b, 0x02, 0x0a, 0x25, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x42, 0x0a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x2b, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x61,
	0x73, 0x74, 0x6f, 0x6a, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0xa2, 0x02,
	0x05, 0x41, 0x53, 0x41, 0x41, 0x53, 0xaa, 0x02, 0x21, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x61, 0x73,
	0x74, 0x6f, 0x6a, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x21, 0x41, 0x70, 0x69,
	0x5c, 0x53, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x5c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x5c, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02,
	0x2d, 0x41, 0x70, 0x69, 0x5c, 0x53, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x5c, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x5c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c,
	0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x26, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x53, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x3a, 0x3a, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x3a, 0x3a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x3a, 0x3a, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_admin_admin_service_v1_admin_proto_rawDescOnce sync.Once
	file_admin_admin_service_v1_admin_proto_rawDescData = file_admin_admin_service_v1_admin_proto_rawDesc
)

func file_admin_admin_service_v1_admin_proto_rawDescGZIP() []byte {
	file_admin_admin_service_v1_admin_proto_rawDescOnce.Do(func() {
		file_admin_admin_service_v1_admin_proto_rawDescData = protoimpl.X.CompressGZIP(file_admin_admin_service_v1_admin_proto_rawDescData)
	})
	return file_admin_admin_service_v1_admin_proto_rawDescData
}

var file_admin_admin_service_v1_admin_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_admin_admin_service_v1_admin_proto_msgTypes = make([]protoimpl.MessageInfo, 74)
var file_admin_admin_service_v1_admin_proto_goTypes = []any{
	(ErrorReason)(0),                                 // 0: api.sastoj.admin.admin.service.v1.ErrorReason
	(Visibility)(0),                                  // 1: api.sastoj.admin.admin.service.v1.Visibility
	(*Case)(nil),                                     // 2: api.sastoj.admin.admin.service.v1.Case
	(*DeleteCasesByProblemIdRequest)(nil),            // 3: api.sastoj.admin.admin.service.v1.DeleteCasesByProblemIdRequest
	(*DeleteCasesByProblemIdReply)(nil),              // 4: api.sastoj.admin.admin.service.v1.DeleteCasesByProblemIdReply
	(*CreateContestRequest)(nil),                     // 5: api.sastoj.admin.admin.service.v1.CreateContestRequest
	(*CreateContestReply)(nil),                       // 6: api.sastoj.admin.admin.service.v1.CreateContestReply
	(*UpdateContestRequest)(nil),                     // 7: api.sastoj.admin.admin.service.v1.UpdateContestRequest
	(*UpdateContestReply)(nil),                       // 8: api.sastoj.admin.admin.service.v1.UpdateContestReply
	(*DeleteContestRequest)(nil),                     // 9: api.sastoj.admin.admin.service.v1.DeleteContestRequest
	(*DeleteContestReply)(nil),                       // 10: api.sastoj.admin.admin.service.v1.DeleteContestReply
	(*GetContestRequest)(nil),                        // 11: api.sastoj.admin.admin.service.v1.GetContestRequest
	(*GetContestReply)(nil),                          // 12: api.sastoj.admin.admin.service.v1.GetContestReply
	(*ListContestRequest)(nil),                       // 13: api.sastoj.admin.admin.service.v1.ListContestRequest
	(*ListContestReply)(nil),                         // 14: api.sastoj.admin.admin.service.v1.ListContestReply
	(*AddContestantsRequest)(nil),                    // 15: api.sastoj.admin.admin.service.v1.AddContestantsRequest
	(*AddContestantsReply)(nil),                      // 16: api.sastoj.admin.admin.service.v1.AddContestantsReply
	(*ManualRankingRequest)(nil),                     // 17: api.sastoj.admin.admin.service.v1.ManualRankingRequest
	(*ManualRankingReply)(nil),                       // 18: api.sastoj.admin.admin.service.v1.ManualRankingReply
	(*GetRankingRequest)(nil),                        // 19: api.sastoj.admin.admin.service.v1.GetRankingRequest
	(*GetRankingReply)(nil),                          // 20: api.sastoj.admin.admin.service.v1.GetRankingReply
	(*CreateGroupRequest)(nil),                       // 21: api.sastoj.admin.admin.service.v1.CreateGroupRequest
	(*CreateGroupReply)(nil),                         // 22: api.sastoj.admin.admin.service.v1.CreateGroupReply
	(*UpdateGroupRequest)(nil),                       // 23: api.sastoj.admin.admin.service.v1.UpdateGroupRequest
	(*UpdateGroupReply)(nil),                         // 24: api.sastoj.admin.admin.service.v1.UpdateGroupReply
	(*DeleteGroupRequest)(nil),                       // 25: api.sastoj.admin.admin.service.v1.DeleteGroupRequest
	(*DeleteGroupReply)(nil),                         // 26: api.sastoj.admin.admin.service.v1.DeleteGroupReply
	(*GetGroupRequest)(nil),                          // 27: api.sastoj.admin.admin.service.v1.GetGroupRequest
	(*GetGroupReply)(nil),                            // 28: api.sastoj.admin.admin.service.v1.GetGroupReply
	(*ListGroupRequest)(nil),                         // 29: api.sastoj.admin.admin.service.v1.ListGroupRequest
	(*ListGroupReply)(nil),                           // 30: api.sastoj.admin.admin.service.v1.ListGroupReply
	(*Problem)(nil),                                  // 31: api.sastoj.admin.admin.service.v1.Problem
	(*Submission)(nil),                               // 32: api.sastoj.admin.admin.service.v1.Submission
	(*SubmitJudgeRequest)(nil),                       // 33: api.sastoj.admin.admin.service.v1.SubmitJudgeRequest
	(*SubmitJudgeReply)(nil),                         // 34: api.sastoj.admin.admin.service.v1.SubmitJudgeReply
	(*GetJudgableProblemsRequest)(nil),               // 35: api.sastoj.admin.admin.service.v1.GetJudgableProblemsRequest
	(*GetJudgableProblemsReply)(nil),                 // 36: api.sastoj.admin.admin.service.v1.GetJudgableProblemsReply
	(*GetSubmissionsRequest)(nil),                    // 37: api.sastoj.admin.admin.service.v1.GetSubmissionsRequest
	(*GetSubmissionsReply)(nil),                      // 38: api.sastoj.admin.admin.service.v1.GetSubmissionsReply
	(*CreateProblemRequest)(nil),                     // 39: api.sastoj.admin.admin.service.v1.CreateProblemRequest
	(*CreateProblemReply)(nil),                       // 40: api.sastoj.admin.admin.service.v1.CreateProblemReply
	(*UpdateProblemRequest)(nil),                     // 41: api.sastoj.admin.admin.service.v1.UpdateProblemRequest
	(*UpdateProblemReply)(nil),                       // 42: api.sastoj.admin.admin.service.v1.UpdateProblemReply
	(*DeleteProblemRequest)(nil),                     // 43: api.sastoj.admin.admin.service.v1.DeleteProblemRequest
	(*DeleteProblemReply)(nil),                       // 44: api.sastoj.admin.admin.service.v1.DeleteProblemReply
	(*GetProblemRequest)(nil),                        // 45: api.sastoj.admin.admin.service.v1.GetProblemRequest
	(*GetProblemReply)(nil),                          // 46: api.sastoj.admin.admin.service.v1.GetProblemReply
	(*ListProblemRequest)(nil),                       // 47: api.sastoj.admin.admin.service.v1.ListProblemRequest
	(*ListProblemReply)(nil),                         // 48: api.sastoj.admin.admin.service.v1.ListProblemReply
	(*GetProblemTypesRequest)(nil),                   // 49: api.sastoj.admin.admin.service.v1.GetProblemTypesRequest
	(*GetProblemTypesReply)(nil),                     // 50: api.sastoj.admin.admin.service.v1.GetProblemTypesReply
	(*UpdateJudgerRequest)(nil),                      // 51: api.sastoj.admin.admin.service.v1.UpdateJudgerRequest
	(*UpdateJudgerReply)(nil),                        // 52: api.sastoj.admin.admin.service.v1.UpdateJudgerReply
	(*GetJudgerRequest)(nil),                         // 53: api.sastoj.admin.admin.service.v1.GetJudgerRequest
	(*GetJudgerReply)(nil),                           // 54: api.sastoj.admin.admin.service.v1.GetJudgerReply
	(*CreateUserRequest)(nil),                        // 55: api.sastoj.admin.admin.service.v1.CreateUserRequest
	(*CreateUserReply)(nil),                          // 56: api.sastoj.admin.admin.service.v1.CreateUserReply
	(*BatchCreateUserRequest)(nil),                   // 57: api.sastoj.admin.admin.service.v1.BatchCreateUserRequest
	(*BatchCreateUserReply)(nil),                     // 58: api.sastoj.admin.admin.service.v1.BatchCreateUserReply
	(*UpdateUserRequest)(nil),                        // 59: api.sastoj.admin.admin.service.v1.UpdateUserRequest
	(*UpdateUserReply)(nil),                          // 60: api.sastoj.admin.admin.service.v1.UpdateUserReply
	(*DeleteUserRequest)(nil),                        // 61: api.sastoj.admin.admin.service.v1.DeleteUserRequest
	(*DeleteUserReply)(nil),                          // 62: api.sastoj.admin.admin.service.v1.DeleteUserReply
	(*GetUserRequest)(nil),                           // 63: api.sastoj.admin.admin.service.v1.GetUserRequest
	(*GetUserReply)(nil),                             // 64: api.sastoj.admin.admin.service.v1.GetUserReply
	(*ListUserRequest)(nil),                          // 65: api.sastoj.admin.admin.service.v1.ListUserRequest
	(*ListUserReply)(nil),                            // 66: api.sastoj.admin.admin.service.v1.ListUserReply
	(*ListContestReply_Contest)(nil),                 // 67: api.sastoj.admin.admin.service.v1.ListContestReply.Contest
	(*GetRankingReply_UserResult)(nil),               // 68: api.sastoj.admin.admin.service.v1.GetRankingReply.UserResult
	(*GetRankingReply_UserResult_ProblemResult)(nil), // 69: api.sastoj.admin.admin.service.v1.GetRankingReply.UserResult.ProblemResult
	(*ListGroupReply_Group)(nil),                     // 70: api.sastoj.admin.admin.service.v1.ListGroupReply.Group
	(*ListProblemReply_Problem)(nil),                 // 71: api.sastoj.admin.admin.service.v1.ListProblemReply.Problem
	(*GetProblemTypesReply_ProblemType)(nil),         // 72: api.sastoj.admin.admin.service.v1.GetProblemTypesReply.ProblemType
	(*GetJudgerReply_Group)(nil),                     // 73: api.sastoj.admin.admin.service.v1.GetJudgerReply.Group
	(*BatchCreateUserReply_User)(nil),                // 74: api.sastoj.admin.admin.service.v1.BatchCreateUserReply.User
	(*ListUserReply_User)(nil),                       // 75: api.sastoj.admin.admin.service.v1.ListUserReply.User
	(*timestamppb.Timestamp)(nil),                    // 76: google.protobuf.Timestamp
}
var file_admin_admin_service_v1_admin_proto_depIdxs = []int32{
	76, // 0: api.sastoj.admin.admin.service.v1.CreateContestRequest.start_time:type_name -> google.protobuf.Timestamp
	76, // 1: api.sastoj.admin.admin.service.v1.CreateContestRequest.end_time:type_name -> google.protobuf.Timestamp
	76, // 2: api.sastoj.admin.admin.service.v1.CreateContestRequest.create_time:type_name -> google.protobuf.Timestamp
	76, // 3: api.sastoj.admin.admin.service.v1.UpdateContestRequest.start_time:type_name -> google.protobuf.Timestamp
	76, // 4: api.sastoj.admin.admin.service.v1.UpdateContestRequest.end_time:type_name -> google.protobuf.Timestamp
	76, // 5: api.sastoj.admin.admin.service.v1.UpdateContestRequest.create_time:type_name -> google.protobuf.Timestamp
	76, // 6: api.sastoj.admin.admin.service.v1.GetContestReply.start_time:type_name -> google.protobuf.Timestamp
	76, // 7: api.sastoj.admin.admin.service.v1.GetContestReply.end_time:type_name -> google.protobuf.Timestamp
	76, // 8: api.sastoj.admin.admin.service.v1.GetContestReply.create_time:type_name -> google.protobuf.Timestamp
	67, // 9: api.sastoj.admin.admin.service.v1.ListContestReply.contests:type_name -> api.sastoj.admin.admin.service.v1.ListContestReply.Contest
	68, // 10: api.sastoj.admin.admin.service.v1.GetRankingReply.users:type_name -> api.sastoj.admin.admin.service.v1.GetRankingReply.UserResult
	70, // 11: api.sastoj.admin.admin.service.v1.ListGroupReply.groups:type_name -> api.sastoj.admin.admin.service.v1.ListGroupReply.Group
	76, // 12: api.sastoj.admin.admin.service.v1.Submission.create_time:type_name -> google.protobuf.Timestamp
	31, // 13: api.sastoj.admin.admin.service.v1.GetJudgableProblemsReply.results:type_name -> api.sastoj.admin.admin.service.v1.Problem
	32, // 14: api.sastoj.admin.admin.service.v1.GetSubmissionsReply.submissions:type_name -> api.sastoj.admin.admin.service.v1.Submission
	1,  // 15: api.sastoj.admin.admin.service.v1.CreateProblemRequest.visibility:type_name -> api.sastoj.admin.admin.service.v1.Visibility
	1,  // 16: api.sastoj.admin.admin.service.v1.UpdateProblemRequest.visibility:type_name -> api.sastoj.admin.admin.service.v1.Visibility
	1,  // 17: api.sastoj.admin.admin.service.v1.GetProblemReply.visibility:type_name -> api.sastoj.admin.admin.service.v1.Visibility
	71, // 18: api.sastoj.admin.admin.service.v1.ListProblemReply.problems:type_name -> api.sastoj.admin.admin.service.v1.ListProblemReply.Problem
	72, // 19: api.sastoj.admin.admin.service.v1.GetProblemTypesReply.types:type_name -> api.sastoj.admin.admin.service.v1.GetProblemTypesReply.ProblemType
	73, // 20: api.sastoj.admin.admin.service.v1.GetJudgerReply.groups:type_name -> api.sastoj.admin.admin.service.v1.GetJudgerReply.Group
	74, // 21: api.sastoj.admin.admin.service.v1.BatchCreateUserReply.users:type_name -> api.sastoj.admin.admin.service.v1.BatchCreateUserReply.User
	75, // 22: api.sastoj.admin.admin.service.v1.ListUserReply.users:type_name -> api.sastoj.admin.admin.service.v1.ListUserReply.User
	76, // 23: api.sastoj.admin.admin.service.v1.ListContestReply.Contest.start_time:type_name -> google.protobuf.Timestamp
	76, // 24: api.sastoj.admin.admin.service.v1.ListContestReply.Contest.end_time:type_name -> google.protobuf.Timestamp
	76, // 25: api.sastoj.admin.admin.service.v1.ListContestReply.Contest.create_time:type_name -> google.protobuf.Timestamp
	69, // 26: api.sastoj.admin.admin.service.v1.GetRankingReply.UserResult.problems:type_name -> api.sastoj.admin.admin.service.v1.GetRankingReply.UserResult.ProblemResult
	76, // 27: api.sastoj.admin.admin.service.v1.GetRankingReply.UserResult.ProblemResult.score_achieved_time:type_name -> google.protobuf.Timestamp
	1,  // 28: api.sastoj.admin.admin.service.v1.ListProblemReply.Problem.visibility:type_name -> api.sastoj.admin.admin.service.v1.Visibility
	3,  // 29: api.sastoj.admin.admin.service.v1.Admin.DeleteCasesByProblemId:input_type -> api.sastoj.admin.admin.service.v1.DeleteCasesByProblemIdRequest
	5,  // 30: api.sastoj.admin.admin.service.v1.Admin.CreateContest:input_type -> api.sastoj.admin.admin.service.v1.CreateContestRequest
	7,  // 31: api.sastoj.admin.admin.service.v1.Admin.UpdateContest:input_type -> api.sastoj.admin.admin.service.v1.UpdateContestRequest
	9,  // 32: api.sastoj.admin.admin.service.v1.Admin.DeleteContest:input_type -> api.sastoj.admin.admin.service.v1.DeleteContestRequest
	11, // 33: api.sastoj.admin.admin.service.v1.Admin.GetContest:input_type -> api.sastoj.admin.admin.service.v1.GetContestRequest
	13, // 34: api.sastoj.admin.admin.service.v1.Admin.ListContest:input_type -> api.sastoj.admin.admin.service.v1.ListContestRequest
	15, // 35: api.sastoj.admin.admin.service.v1.Admin.AddContestants:input_type -> api.sastoj.admin.admin.service.v1.AddContestantsRequest
	17, // 36: api.sastoj.admin.admin.service.v1.Admin.ManualRanking:input_type -> api.sastoj.admin.admin.service.v1.ManualRankingRequest
	19, // 37: api.sastoj.admin.admin.service.v1.Admin.GetRanking:input_type -> api.sastoj.admin.admin.service.v1.GetRankingRequest
	21, // 38: api.sastoj.admin.admin.service.v1.Admin.CreateGroup:input_type -> api.sastoj.admin.admin.service.v1.CreateGroupRequest
	23, // 39: api.sastoj.admin.admin.service.v1.Admin.UpdateGroup:input_type -> api.sastoj.admin.admin.service.v1.UpdateGroupRequest
	25, // 40: api.sastoj.admin.admin.service.v1.Admin.DeleteGroup:input_type -> api.sastoj.admin.admin.service.v1.DeleteGroupRequest
	27, // 41: api.sastoj.admin.admin.service.v1.Admin.GetGroup:input_type -> api.sastoj.admin.admin.service.v1.GetGroupRequest
	29, // 42: api.sastoj.admin.admin.service.v1.Admin.ListGroup:input_type -> api.sastoj.admin.admin.service.v1.ListGroupRequest
	33, // 43: api.sastoj.admin.admin.service.v1.Admin.SubmitJudge:input_type -> api.sastoj.admin.admin.service.v1.SubmitJudgeRequest
	35, // 44: api.sastoj.admin.admin.service.v1.Admin.GetJudgableProblems:input_type -> api.sastoj.admin.admin.service.v1.GetJudgableProblemsRequest
	37, // 45: api.sastoj.admin.admin.service.v1.Admin.GetSubmissions:input_type -> api.sastoj.admin.admin.service.v1.GetSubmissionsRequest
	51, // 46: api.sastoj.admin.admin.service.v1.Admin.UpdateJudger:input_type -> api.sastoj.admin.admin.service.v1.UpdateJudgerRequest
	53, // 47: api.sastoj.admin.admin.service.v1.Admin.GetJudger:input_type -> api.sastoj.admin.admin.service.v1.GetJudgerRequest
	39, // 48: api.sastoj.admin.admin.service.v1.Admin.CreateProblem:input_type -> api.sastoj.admin.admin.service.v1.CreateProblemRequest
	41, // 49: api.sastoj.admin.admin.service.v1.Admin.UpdateProblem:input_type -> api.sastoj.admin.admin.service.v1.UpdateProblemRequest
	43, // 50: api.sastoj.admin.admin.service.v1.Admin.DeleteProblem:input_type -> api.sastoj.admin.admin.service.v1.DeleteProblemRequest
	47, // 51: api.sastoj.admin.admin.service.v1.Admin.ListProblem:input_type -> api.sastoj.admin.admin.service.v1.ListProblemRequest
	45, // 52: api.sastoj.admin.admin.service.v1.Admin.GetProblem:input_type -> api.sastoj.admin.admin.service.v1.GetProblemRequest
	49, // 53: api.sastoj.admin.admin.service.v1.Admin.GetProblemTypes:input_type -> api.sastoj.admin.admin.service.v1.GetProblemTypesRequest
	55, // 54: api.sastoj.admin.admin.service.v1.Admin.CreateUser:input_type -> api.sastoj.admin.admin.service.v1.CreateUserRequest
	57, // 55: api.sastoj.admin.admin.service.v1.Admin.BatchCreateUser:input_type -> api.sastoj.admin.admin.service.v1.BatchCreateUserRequest
	59, // 56: api.sastoj.admin.admin.service.v1.Admin.UpdateUser:input_type -> api.sastoj.admin.admin.service.v1.UpdateUserRequest
	61, // 57: api.sastoj.admin.admin.service.v1.Admin.DeleteUser:input_type -> api.sastoj.admin.admin.service.v1.DeleteUserRequest
	63, // 58: api.sastoj.admin.admin.service.v1.Admin.GetUser:input_type -> api.sastoj.admin.admin.service.v1.GetUserRequest
	65, // 59: api.sastoj.admin.admin.service.v1.Admin.ListUser:input_type -> api.sastoj.admin.admin.service.v1.ListUserRequest
	4,  // 60: api.sastoj.admin.admin.service.v1.Admin.DeleteCasesByProblemId:output_type -> api.sastoj.admin.admin.service.v1.DeleteCasesByProblemIdReply
	6,  // 61: api.sastoj.admin.admin.service.v1.Admin.CreateContest:output_type -> api.sastoj.admin.admin.service.v1.CreateContestReply
	8,  // 62: api.sastoj.admin.admin.service.v1.Admin.UpdateContest:output_type -> api.sastoj.admin.admin.service.v1.UpdateContestReply
	10, // 63: api.sastoj.admin.admin.service.v1.Admin.DeleteContest:output_type -> api.sastoj.admin.admin.service.v1.DeleteContestReply
	12, // 64: api.sastoj.admin.admin.service.v1.Admin.GetContest:output_type -> api.sastoj.admin.admin.service.v1.GetContestReply
	14, // 65: api.sastoj.admin.admin.service.v1.Admin.ListContest:output_type -> api.sastoj.admin.admin.service.v1.ListContestReply
	16, // 66: api.sastoj.admin.admin.service.v1.Admin.AddContestants:output_type -> api.sastoj.admin.admin.service.v1.AddContestantsReply
	18, // 67: api.sastoj.admin.admin.service.v1.Admin.ManualRanking:output_type -> api.sastoj.admin.admin.service.v1.ManualRankingReply
	20, // 68: api.sastoj.admin.admin.service.v1.Admin.GetRanking:output_type -> api.sastoj.admin.admin.service.v1.GetRankingReply
	22, // 69: api.sastoj.admin.admin.service.v1.Admin.CreateGroup:output_type -> api.sastoj.admin.admin.service.v1.CreateGroupReply
	24, // 70: api.sastoj.admin.admin.service.v1.Admin.UpdateGroup:output_type -> api.sastoj.admin.admin.service.v1.UpdateGroupReply
	26, // 71: api.sastoj.admin.admin.service.v1.Admin.DeleteGroup:output_type -> api.sastoj.admin.admin.service.v1.DeleteGroupReply
	28, // 72: api.sastoj.admin.admin.service.v1.Admin.GetGroup:output_type -> api.sastoj.admin.admin.service.v1.GetGroupReply
	30, // 73: api.sastoj.admin.admin.service.v1.Admin.ListGroup:output_type -> api.sastoj.admin.admin.service.v1.ListGroupReply
	34, // 74: api.sastoj.admin.admin.service.v1.Admin.SubmitJudge:output_type -> api.sastoj.admin.admin.service.v1.SubmitJudgeReply
	36, // 75: api.sastoj.admin.admin.service.v1.Admin.GetJudgableProblems:output_type -> api.sastoj.admin.admin.service.v1.GetJudgableProblemsReply
	38, // 76: api.sastoj.admin.admin.service.v1.Admin.GetSubmissions:output_type -> api.sastoj.admin.admin.service.v1.GetSubmissionsReply
	52, // 77: api.sastoj.admin.admin.service.v1.Admin.UpdateJudger:output_type -> api.sastoj.admin.admin.service.v1.UpdateJudgerReply
	54, // 78: api.sastoj.admin.admin.service.v1.Admin.GetJudger:output_type -> api.sastoj.admin.admin.service.v1.GetJudgerReply
	40, // 79: api.sastoj.admin.admin.service.v1.Admin.CreateProblem:output_type -> api.sastoj.admin.admin.service.v1.CreateProblemReply
	42, // 80: api.sastoj.admin.admin.service.v1.Admin.UpdateProblem:output_type -> api.sastoj.admin.admin.service.v1.UpdateProblemReply
	44, // 81: api.sastoj.admin.admin.service.v1.Admin.DeleteProblem:output_type -> api.sastoj.admin.admin.service.v1.DeleteProblemReply
	48, // 82: api.sastoj.admin.admin.service.v1.Admin.ListProblem:output_type -> api.sastoj.admin.admin.service.v1.ListProblemReply
	46, // 83: api.sastoj.admin.admin.service.v1.Admin.GetProblem:output_type -> api.sastoj.admin.admin.service.v1.GetProblemReply
	50, // 84: api.sastoj.admin.admin.service.v1.Admin.GetProblemTypes:output_type -> api.sastoj.admin.admin.service.v1.GetProblemTypesReply
	56, // 85: api.sastoj.admin.admin.service.v1.Admin.CreateUser:output_type -> api.sastoj.admin.admin.service.v1.CreateUserReply
	58, // 86: api.sastoj.admin.admin.service.v1.Admin.BatchCreateUser:output_type -> api.sastoj.admin.admin.service.v1.BatchCreateUserReply
	60, // 87: api.sastoj.admin.admin.service.v1.Admin.UpdateUser:output_type -> api.sastoj.admin.admin.service.v1.UpdateUserReply
	62, // 88: api.sastoj.admin.admin.service.v1.Admin.DeleteUser:output_type -> api.sastoj.admin.admin.service.v1.DeleteUserReply
	64, // 89: api.sastoj.admin.admin.service.v1.Admin.GetUser:output_type -> api.sastoj.admin.admin.service.v1.GetUserReply
	66, // 90: api.sastoj.admin.admin.service.v1.Admin.ListUser:output_type -> api.sastoj.admin.admin.service.v1.ListUserReply
	60, // [60:91] is the sub-list for method output_type
	29, // [29:60] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_admin_admin_service_v1_admin_proto_init() }
func file_admin_admin_service_v1_admin_proto_init() {
	if File_admin_admin_service_v1_admin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_admin_admin_service_v1_admin_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Case); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteCasesByProblemIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteCasesByProblemIdReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CreateContestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CreateContestReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateContestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateContestReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteContestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteContestReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GetContestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*GetContestReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*ListContestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ListContestReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*AddContestantsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*AddContestantsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*ManualRankingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*ManualRankingReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*GetRankingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*GetRankingReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*CreateGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*CreateGroupReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateGroupReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteGroupReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*GetGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*GetGroupReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*ListGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*ListGroupReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*Problem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*Submission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*SubmitJudgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*SubmitJudgeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*GetJudgableProblemsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*GetJudgableProblemsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*GetSubmissionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*GetSubmissionsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*CreateProblemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*CreateProblemReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateProblemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateProblemReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteProblemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteProblemReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*GetProblemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*GetProblemReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*ListProblemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*ListProblemReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*GetProblemTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*GetProblemTypesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateJudgerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateJudgerReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*GetJudgerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*GetJudgerReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*CreateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*CreateUserReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*BatchCreateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*BatchCreateUserReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUserReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteUserReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*GetUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*GetUserReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*ListUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*ListUserReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*ListContestReply_Contest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*GetRankingReply_UserResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*GetRankingReply_UserResult_ProblemResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*ListGroupReply_Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[69].Exporter = func(v any, i int) any {
			switch v := v.(*ListProblemReply_Problem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[70].Exporter = func(v any, i int) any {
			switch v := v.(*GetProblemTypesReply_ProblemType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*GetJudgerReply_Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*BatchCreateUserReply_User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_service_v1_admin_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*ListUserReply_User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_admin_admin_service_v1_admin_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   74,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_admin_admin_service_v1_admin_proto_goTypes,
		DependencyIndexes: file_admin_admin_service_v1_admin_proto_depIdxs,
		EnumInfos:         file_admin_admin_service_v1_admin_proto_enumTypes,
		MessageInfos:      file_admin_admin_service_v1_admin_proto_msgTypes,
	}.Build()
	File_admin_admin_service_v1_admin_proto = out.File
	file_admin_admin_service_v1_admin_proto_rawDesc = nil
	file_admin_admin_service_v1_admin_proto_goTypes = nil
	file_admin_admin_service_v1_admin_proto_depIdxs = nil
}
