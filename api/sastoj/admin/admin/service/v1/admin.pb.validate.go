// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: admin/admin/service/v1/admin.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Case with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Case) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Case with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CaseMultiError, or nil if none found.
func (m *Case) ValidateAll() error {
	return m.validate(true)
}

func (m *Case) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Point

	// no validation rules for Index

	// no validation rules for IsAuto

	if len(errors) > 0 {
		return CaseMultiError(errors)
	}

	return nil
}

// CaseMultiError is an error wrapping multiple validation errors returned by
// Case.ValidateAll() if the designated constraints aren't met.
type CaseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CaseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CaseMultiError) AllErrors() []error { return m }

// CaseValidationError is the validation error returned by Case.Validate if the
// designated constraints aren't met.
type CaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CaseValidationError) ErrorName() string { return "CaseValidationError" }

// Error satisfies the builtin error interface
func (e CaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCase.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CaseValidationError{}

// Validate checks the field values on DeleteCasesByProblemIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCasesByProblemIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCasesByProblemIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteCasesByProblemIdRequestMultiError, or nil if none found.
func (m *DeleteCasesByProblemIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCasesByProblemIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProblemId

	if len(errors) > 0 {
		return DeleteCasesByProblemIdRequestMultiError(errors)
	}

	return nil
}

// DeleteCasesByProblemIdRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteCasesByProblemIdRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteCasesByProblemIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCasesByProblemIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCasesByProblemIdRequestMultiError) AllErrors() []error { return m }

// DeleteCasesByProblemIdRequestValidationError is the validation error
// returned by DeleteCasesByProblemIdRequest.Validate if the designated
// constraints aren't met.
type DeleteCasesByProblemIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCasesByProblemIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCasesByProblemIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCasesByProblemIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCasesByProblemIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCasesByProblemIdRequestValidationError) ErrorName() string {
	return "DeleteCasesByProblemIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCasesByProblemIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCasesByProblemIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCasesByProblemIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCasesByProblemIdRequestValidationError{}

// Validate checks the field values on DeleteCasesByProblemIdReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCasesByProblemIdReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCasesByProblemIdReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCasesByProblemIdReplyMultiError, or nil if none found.
func (m *DeleteCasesByProblemIdReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCasesByProblemIdReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCasesByProblemIdReplyMultiError(errors)
	}

	return nil
}

// DeleteCasesByProblemIdReplyMultiError is an error wrapping multiple
// validation errors returned by DeleteCasesByProblemIdReply.ValidateAll() if
// the designated constraints aren't met.
type DeleteCasesByProblemIdReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCasesByProblemIdReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCasesByProblemIdReplyMultiError) AllErrors() []error { return m }

// DeleteCasesByProblemIdReplyValidationError is the validation error returned
// by DeleteCasesByProblemIdReply.Validate if the designated constraints
// aren't met.
type DeleteCasesByProblemIdReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCasesByProblemIdReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCasesByProblemIdReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCasesByProblemIdReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCasesByProblemIdReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCasesByProblemIdReplyValidationError) ErrorName() string {
	return "DeleteCasesByProblemIdReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCasesByProblemIdReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCasesByProblemIdReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCasesByProblemIdReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCasesByProblemIdReplyValidationError{}

// Validate checks the field values on CreateContestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateContestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateContestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateContestRequestMultiError, or nil if none found.
func (m *CreateContestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateContestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Status

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateContestRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateContestRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateContestRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateContestRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateContestRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateContestRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Language

	// no validation rules for ExtraTime

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateContestRequestValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateContestRequestValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateContestRequestValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateContestRequestMultiError(errors)
	}

	return nil
}

// CreateContestRequestMultiError is an error wrapping multiple validation
// errors returned by CreateContestRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateContestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateContestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateContestRequestMultiError) AllErrors() []error { return m }

// CreateContestRequestValidationError is the validation error returned by
// CreateContestRequest.Validate if the designated constraints aren't met.
type CreateContestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateContestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateContestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateContestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateContestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateContestRequestValidationError) ErrorName() string {
	return "CreateContestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateContestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateContestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateContestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateContestRequestValidationError{}

// Validate checks the field values on CreateContestReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateContestReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateContestReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateContestReplyMultiError, or nil if none found.
func (m *CreateContestReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateContestReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateContestReplyMultiError(errors)
	}

	return nil
}

// CreateContestReplyMultiError is an error wrapping multiple validation errors
// returned by CreateContestReply.ValidateAll() if the designated constraints
// aren't met.
type CreateContestReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateContestReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateContestReplyMultiError) AllErrors() []error { return m }

// CreateContestReplyValidationError is the validation error returned by
// CreateContestReply.Validate if the designated constraints aren't met.
type CreateContestReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateContestReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateContestReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateContestReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateContestReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateContestReplyValidationError) ErrorName() string {
	return "CreateContestReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateContestReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateContestReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateContestReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateContestReplyValidationError{}

// Validate checks the field values on UpdateContestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateContestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateContestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateContestRequestMultiError, or nil if none found.
func (m *UpdateContestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateContestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Status

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateContestRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateContestRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateContestRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateContestRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateContestRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateContestRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Language

	// no validation rules for ExtraTime

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateContestRequestValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateContestRequestValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateContestRequestValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateContestRequestMultiError(errors)
	}

	return nil
}

// UpdateContestRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateContestRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateContestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateContestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateContestRequestMultiError) AllErrors() []error { return m }

// UpdateContestRequestValidationError is the validation error returned by
// UpdateContestRequest.Validate if the designated constraints aren't met.
type UpdateContestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateContestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateContestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateContestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateContestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateContestRequestValidationError) ErrorName() string {
	return "UpdateContestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateContestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateContestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateContestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateContestRequestValidationError{}

// Validate checks the field values on UpdateContestReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateContestReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateContestReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateContestReplyMultiError, or nil if none found.
func (m *UpdateContestReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateContestReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdateContestReplyMultiError(errors)
	}

	return nil
}

// UpdateContestReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateContestReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateContestReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateContestReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateContestReplyMultiError) AllErrors() []error { return m }

// UpdateContestReplyValidationError is the validation error returned by
// UpdateContestReply.Validate if the designated constraints aren't met.
type UpdateContestReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateContestReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateContestReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateContestReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateContestReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateContestReplyValidationError) ErrorName() string {
	return "UpdateContestReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateContestReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateContestReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateContestReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateContestReplyValidationError{}

// Validate checks the field values on DeleteContestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteContestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteContestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteContestRequestMultiError, or nil if none found.
func (m *DeleteContestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteContestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteContestRequestMultiError(errors)
	}

	return nil
}

// DeleteContestRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteContestRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteContestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteContestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteContestRequestMultiError) AllErrors() []error { return m }

// DeleteContestRequestValidationError is the validation error returned by
// DeleteContestRequest.Validate if the designated constraints aren't met.
type DeleteContestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteContestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteContestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteContestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteContestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteContestRequestValidationError) ErrorName() string {
	return "DeleteContestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteContestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteContestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteContestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteContestRequestValidationError{}

// Validate checks the field values on DeleteContestReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteContestReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteContestReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteContestReplyMultiError, or nil if none found.
func (m *DeleteContestReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteContestReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteContestReplyMultiError(errors)
	}

	return nil
}

// DeleteContestReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteContestReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteContestReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteContestReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteContestReplyMultiError) AllErrors() []error { return m }

// DeleteContestReplyValidationError is the validation error returned by
// DeleteContestReply.Validate if the designated constraints aren't met.
type DeleteContestReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteContestReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteContestReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteContestReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteContestReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteContestReplyValidationError) ErrorName() string {
	return "DeleteContestReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteContestReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteContestReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteContestReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteContestReplyValidationError{}

// Validate checks the field values on GetContestRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetContestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetContestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetContestRequestMultiError, or nil if none found.
func (m *GetContestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetContestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetContestRequestMultiError(errors)
	}

	return nil
}

// GetContestRequestMultiError is an error wrapping multiple validation errors
// returned by GetContestRequest.ValidateAll() if the designated constraints
// aren't met.
type GetContestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetContestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetContestRequestMultiError) AllErrors() []error { return m }

// GetContestRequestValidationError is the validation error returned by
// GetContestRequest.Validate if the designated constraints aren't met.
type GetContestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetContestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetContestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetContestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetContestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetContestRequestValidationError) ErrorName() string {
	return "GetContestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetContestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetContestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetContestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetContestRequestValidationError{}

// Validate checks the field values on GetContestReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetContestReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetContestReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetContestReplyMultiError, or nil if none found.
func (m *GetContestReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetContestReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Status

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetContestReplyValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetContestReplyValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetContestReplyValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetContestReplyValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetContestReplyValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetContestReplyValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Language

	// no validation rules for ExtraTime

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetContestReplyValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetContestReplyValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetContestReplyValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetContestReplyMultiError(errors)
	}

	return nil
}

// GetContestReplyMultiError is an error wrapping multiple validation errors
// returned by GetContestReply.ValidateAll() if the designated constraints
// aren't met.
type GetContestReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetContestReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetContestReplyMultiError) AllErrors() []error { return m }

// GetContestReplyValidationError is the validation error returned by
// GetContestReply.Validate if the designated constraints aren't met.
type GetContestReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetContestReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetContestReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetContestReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetContestReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetContestReplyValidationError) ErrorName() string { return "GetContestReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetContestReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetContestReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetContestReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetContestReplyValidationError{}

// Validate checks the field values on ListContestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListContestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListContestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListContestRequestMultiError, or nil if none found.
func (m *ListContestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSize() <= -1 {
		err := ListContestRequestValidationError{
			field:  "Size",
			reason: "value must be greater than -1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCurrent() <= -1 {
		err := ListContestRequestValidationError{
			field:  "Current",
			reason: "value must be greater than -1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListContestRequestMultiError(errors)
	}

	return nil
}

// ListContestRequestMultiError is an error wrapping multiple validation errors
// returned by ListContestRequest.ValidateAll() if the designated constraints
// aren't met.
type ListContestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContestRequestMultiError) AllErrors() []error { return m }

// ListContestRequestValidationError is the validation error returned by
// ListContestRequest.Validate if the designated constraints aren't met.
type ListContestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContestRequestValidationError) ErrorName() string {
	return "ListContestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListContestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContestRequestValidationError{}

// Validate checks the field values on ListContestReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListContestReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListContestReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListContestReplyMultiError, or nil if none found.
func (m *ListContestReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContestReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetContests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListContestReplyValidationError{
						field:  fmt.Sprintf("Contests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListContestReplyValidationError{
						field:  fmt.Sprintf("Contests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListContestReplyValidationError{
					field:  fmt.Sprintf("Contests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListContestReplyMultiError(errors)
	}

	return nil
}

// ListContestReplyMultiError is an error wrapping multiple validation errors
// returned by ListContestReply.ValidateAll() if the designated constraints
// aren't met.
type ListContestReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContestReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContestReplyMultiError) AllErrors() []error { return m }

// ListContestReplyValidationError is the validation error returned by
// ListContestReply.Validate if the designated constraints aren't met.
type ListContestReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContestReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContestReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContestReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContestReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContestReplyValidationError) ErrorName() string { return "ListContestReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListContestReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContestReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContestReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContestReplyValidationError{}

// Validate checks the field values on AddContestantsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddContestantsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddContestantsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddContestantsRequestMultiError, or nil if none found.
func (m *AddContestantsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddContestantsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for ContestId

	if _, ok := _AddContestantsRequest_Role_InLookup[m.GetRole()]; !ok {
		err := AddContestantsRequestValidationError{
			field:  "Role",
			reason: "value must be in list [0 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddContestantsRequestMultiError(errors)
	}

	return nil
}

// AddContestantsRequestMultiError is an error wrapping multiple validation
// errors returned by AddContestantsRequest.ValidateAll() if the designated
// constraints aren't met.
type AddContestantsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddContestantsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddContestantsRequestMultiError) AllErrors() []error { return m }

// AddContestantsRequestValidationError is the validation error returned by
// AddContestantsRequest.Validate if the designated constraints aren't met.
type AddContestantsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddContestantsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddContestantsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddContestantsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddContestantsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddContestantsRequestValidationError) ErrorName() string {
	return "AddContestantsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddContestantsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddContestantsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddContestantsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddContestantsRequestValidationError{}

var _AddContestantsRequest_Role_InLookup = map[int32]struct{}{
	0: {},
	1: {},
}

// Validate checks the field values on AddContestantsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddContestantsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddContestantsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddContestantsReplyMultiError, or nil if none found.
func (m *AddContestantsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddContestantsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return AddContestantsReplyMultiError(errors)
	}

	return nil
}

// AddContestantsReplyMultiError is an error wrapping multiple validation
// errors returned by AddContestantsReply.ValidateAll() if the designated
// constraints aren't met.
type AddContestantsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddContestantsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddContestantsReplyMultiError) AllErrors() []error { return m }

// AddContestantsReplyValidationError is the validation error returned by
// AddContestantsReply.Validate if the designated constraints aren't met.
type AddContestantsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddContestantsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddContestantsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddContestantsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddContestantsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddContestantsReplyValidationError) ErrorName() string {
	return "AddContestantsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AddContestantsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddContestantsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddContestantsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddContestantsReplyValidationError{}

// Validate checks the field values on ManualRankingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ManualRankingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ManualRankingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ManualRankingRequestMultiError, or nil if none found.
func (m *ManualRankingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ManualRankingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContestId

	if len(errors) > 0 {
		return ManualRankingRequestMultiError(errors)
	}

	return nil
}

// ManualRankingRequestMultiError is an error wrapping multiple validation
// errors returned by ManualRankingRequest.ValidateAll() if the designated
// constraints aren't met.
type ManualRankingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ManualRankingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ManualRankingRequestMultiError) AllErrors() []error { return m }

// ManualRankingRequestValidationError is the validation error returned by
// ManualRankingRequest.Validate if the designated constraints aren't met.
type ManualRankingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ManualRankingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ManualRankingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ManualRankingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ManualRankingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ManualRankingRequestValidationError) ErrorName() string {
	return "ManualRankingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ManualRankingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sManualRankingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ManualRankingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ManualRankingRequestValidationError{}

// Validate checks the field values on ManualRankingReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ManualRankingReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ManualRankingReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ManualRankingReplyMultiError, or nil if none found.
func (m *ManualRankingReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ManualRankingReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return ManualRankingReplyMultiError(errors)
	}

	return nil
}

// ManualRankingReplyMultiError is an error wrapping multiple validation errors
// returned by ManualRankingReply.ValidateAll() if the designated constraints
// aren't met.
type ManualRankingReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ManualRankingReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ManualRankingReplyMultiError) AllErrors() []error { return m }

// ManualRankingReplyValidationError is the validation error returned by
// ManualRankingReply.Validate if the designated constraints aren't met.
type ManualRankingReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ManualRankingReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ManualRankingReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ManualRankingReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ManualRankingReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ManualRankingReplyValidationError) ErrorName() string {
	return "ManualRankingReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ManualRankingReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sManualRankingReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ManualRankingReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ManualRankingReplyValidationError{}

// Validate checks the field values on GetRankingRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRankingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRankingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRankingRequestMultiError, or nil if none found.
func (m *GetRankingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRankingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContestId

	if len(errors) > 0 {
		return GetRankingRequestMultiError(errors)
	}

	return nil
}

// GetRankingRequestMultiError is an error wrapping multiple validation errors
// returned by GetRankingRequest.ValidateAll() if the designated constraints
// aren't met.
type GetRankingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRankingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRankingRequestMultiError) AllErrors() []error { return m }

// GetRankingRequestValidationError is the validation error returned by
// GetRankingRequest.Validate if the designated constraints aren't met.
type GetRankingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRankingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRankingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRankingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRankingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRankingRequestValidationError) ErrorName() string {
	return "GetRankingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRankingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRankingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRankingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRankingRequestValidationError{}

// Validate checks the field values on GetRankingReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRankingReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRankingReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRankingReplyMultiError, or nil if none found.
func (m *GetRankingReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRankingReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetRankingReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetRankingReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRankingReplyValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetRankingReplyMultiError(errors)
	}

	return nil
}

// GetRankingReplyMultiError is an error wrapping multiple validation errors
// returned by GetRankingReply.ValidateAll() if the designated constraints
// aren't met.
type GetRankingReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRankingReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRankingReplyMultiError) AllErrors() []error { return m }

// GetRankingReplyValidationError is the validation error returned by
// GetRankingReply.Validate if the designated constraints aren't met.
type GetRankingReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRankingReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRankingReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRankingReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRankingReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRankingReplyValidationError) ErrorName() string { return "GetRankingReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetRankingReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRankingReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRankingReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRankingReplyValidationError{}

// Validate checks the field values on CreateGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGroupRequestMultiError, or nil if none found.
func (m *CreateGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for IsRoot

	if len(errors) > 0 {
		return CreateGroupRequestMultiError(errors)
	}

	return nil
}

// CreateGroupRequestMultiError is an error wrapping multiple validation errors
// returned by CreateGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGroupRequestMultiError) AllErrors() []error { return m }

// CreateGroupRequestValidationError is the validation error returned by
// CreateGroupRequest.Validate if the designated constraints aren't met.
type CreateGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGroupRequestValidationError) ErrorName() string {
	return "CreateGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGroupRequestValidationError{}

// Validate checks the field values on CreateGroupReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGroupReplyMultiError, or nil if none found.
func (m *CreateGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateGroupReplyMultiError(errors)
	}

	return nil
}

// CreateGroupReplyMultiError is an error wrapping multiple validation errors
// returned by CreateGroupReply.ValidateAll() if the designated constraints
// aren't met.
type CreateGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGroupReplyMultiError) AllErrors() []error { return m }

// CreateGroupReplyValidationError is the validation error returned by
// CreateGroupReply.Validate if the designated constraints aren't met.
type CreateGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGroupReplyValidationError) ErrorName() string { return "CreateGroupReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGroupReplyValidationError{}

// Validate checks the field values on UpdateGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGroupRequestMultiError, or nil if none found.
func (m *UpdateGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for IsRoot

	if len(errors) > 0 {
		return UpdateGroupRequestMultiError(errors)
	}

	return nil
}

// UpdateGroupRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGroupRequestMultiError) AllErrors() []error { return m }

// UpdateGroupRequestValidationError is the validation error returned by
// UpdateGroupRequest.Validate if the designated constraints aren't met.
type UpdateGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupRequestValidationError) ErrorName() string {
	return "UpdateGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupRequestValidationError{}

// Validate checks the field values on UpdateGroupReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGroupReplyMultiError, or nil if none found.
func (m *UpdateGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdateGroupReplyMultiError(errors)
	}

	return nil
}

// UpdateGroupReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateGroupReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGroupReplyMultiError) AllErrors() []error { return m }

// UpdateGroupReplyValidationError is the validation error returned by
// UpdateGroupReply.Validate if the designated constraints aren't met.
type UpdateGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupReplyValidationError) ErrorName() string { return "UpdateGroupReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupReplyValidationError{}

// Validate checks the field values on DeleteGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGroupRequestMultiError, or nil if none found.
func (m *DeleteGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteGroupRequestMultiError(errors)
	}

	return nil
}

// DeleteGroupRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGroupRequestMultiError) AllErrors() []error { return m }

// DeleteGroupRequestValidationError is the validation error returned by
// DeleteGroupRequest.Validate if the designated constraints aren't met.
type DeleteGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGroupRequestValidationError) ErrorName() string {
	return "DeleteGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGroupRequestValidationError{}

// Validate checks the field values on DeleteGroupReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGroupReplyMultiError, or nil if none found.
func (m *DeleteGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteGroupReplyMultiError(errors)
	}

	return nil
}

// DeleteGroupReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteGroupReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGroupReplyMultiError) AllErrors() []error { return m }

// DeleteGroupReplyValidationError is the validation error returned by
// DeleteGroupReply.Validate if the designated constraints aren't met.
type DeleteGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGroupReplyValidationError) ErrorName() string { return "DeleteGroupReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGroupReplyValidationError{}

// Validate checks the field values on GetGroupRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupRequestMultiError, or nil if none found.
func (m *GetGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetGroupRequestMultiError(errors)
	}

	return nil
}

// GetGroupRequestMultiError is an error wrapping multiple validation errors
// returned by GetGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type GetGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupRequestMultiError) AllErrors() []error { return m }

// GetGroupRequestValidationError is the validation error returned by
// GetGroupRequest.Validate if the designated constraints aren't met.
type GetGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupRequestValidationError) ErrorName() string { return "GetGroupRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupRequestValidationError{}

// Validate checks the field values on GetGroupReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetGroupReplyMultiError, or
// nil if none found.
func (m *GetGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for IsRoot

	if len(errors) > 0 {
		return GetGroupReplyMultiError(errors)
	}

	return nil
}

// GetGroupReplyMultiError is an error wrapping multiple validation errors
// returned by GetGroupReply.ValidateAll() if the designated constraints
// aren't met.
type GetGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupReplyMultiError) AllErrors() []error { return m }

// GetGroupReplyValidationError is the validation error returned by
// GetGroupReply.Validate if the designated constraints aren't met.
type GetGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupReplyValidationError) ErrorName() string { return "GetGroupReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupReplyValidationError{}

// Validate checks the field values on ListGroupRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGroupRequestMultiError, or nil if none found.
func (m *ListGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSize() <= -1 {
		err := ListGroupRequestValidationError{
			field:  "Size",
			reason: "value must be greater than -1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCurrent() <= -1 {
		err := ListGroupRequestValidationError{
			field:  "Current",
			reason: "value must be greater than -1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListGroupRequestMultiError(errors)
	}

	return nil
}

// ListGroupRequestMultiError is an error wrapping multiple validation errors
// returned by ListGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type ListGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGroupRequestMultiError) AllErrors() []error { return m }

// ListGroupRequestValidationError is the validation error returned by
// ListGroupRequest.Validate if the designated constraints aren't met.
type ListGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGroupRequestValidationError) ErrorName() string { return "ListGroupRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGroupRequestValidationError{}

// Validate checks the field values on ListGroupReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGroupReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListGroupReplyMultiError,
// or nil if none found.
func (m *ListGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGroupReplyValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGroupReplyValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGroupReplyValidationError{
					field:  fmt.Sprintf("Groups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListGroupReplyMultiError(errors)
	}

	return nil
}

// ListGroupReplyMultiError is an error wrapping multiple validation errors
// returned by ListGroupReply.ValidateAll() if the designated constraints
// aren't met.
type ListGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGroupReplyMultiError) AllErrors() []error { return m }

// ListGroupReplyValidationError is the validation error returned by
// ListGroupReply.Validate if the designated constraints aren't met.
type ListGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGroupReplyValidationError) ErrorName() string { return "ListGroupReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGroupReplyValidationError{}

// Validate checks the field values on Problem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Problem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Problem with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProblemMultiError, or nil if none found.
func (m *Problem) ValidateAll() error {
	return m.validate(true)
}

func (m *Problem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for Point

	// no validation rules for ContestId

	// no validation rules for CaseVersion

	// no validation rules for Index

	// no validation rules for Config

	if len(errors) > 0 {
		return ProblemMultiError(errors)
	}

	return nil
}

// ProblemMultiError is an error wrapping multiple validation errors returned
// by Problem.ValidateAll() if the designated constraints aren't met.
type ProblemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProblemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProblemMultiError) AllErrors() []error { return m }

// ProblemValidationError is the validation error returned by Problem.Validate
// if the designated constraints aren't met.
type ProblemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProblemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProblemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProblemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProblemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProblemValidationError) ErrorName() string { return "ProblemValidationError" }

// Error satisfies the builtin error interface
func (e ProblemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProblem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProblemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProblemValidationError{}

// Validate checks the field values on Submission with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Submission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Submission with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SubmissionMultiError, or
// nil if none found.
func (m *Submission) ValidateAll() error {
	return m.validate(true)
}

func (m *Submission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Code

	// no validation rules for Status

	// no validation rules for Point

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubmissionValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubmissionValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmissionValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubmissionMultiError(errors)
	}

	return nil
}

// SubmissionMultiError is an error wrapping multiple validation errors
// returned by Submission.ValidateAll() if the designated constraints aren't met.
type SubmissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmissionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmissionMultiError) AllErrors() []error { return m }

// SubmissionValidationError is the validation error returned by
// Submission.Validate if the designated constraints aren't met.
type SubmissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmissionValidationError) ErrorName() string { return "SubmissionValidationError" }

// Error satisfies the builtin error interface
func (e SubmissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmissionValidationError{}

// Validate checks the field values on SubmitJudgeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubmitJudgeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubmitJudgeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubmitJudgeRequestMultiError, or nil if none found.
func (m *SubmitJudgeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitJudgeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SubmissionId

	// no validation rules for Point

	if len(errors) > 0 {
		return SubmitJudgeRequestMultiError(errors)
	}

	return nil
}

// SubmitJudgeRequestMultiError is an error wrapping multiple validation errors
// returned by SubmitJudgeRequest.ValidateAll() if the designated constraints
// aren't met.
type SubmitJudgeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitJudgeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitJudgeRequestMultiError) AllErrors() []error { return m }

// SubmitJudgeRequestValidationError is the validation error returned by
// SubmitJudgeRequest.Validate if the designated constraints aren't met.
type SubmitJudgeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitJudgeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitJudgeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitJudgeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitJudgeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitJudgeRequestValidationError) ErrorName() string {
	return "SubmitJudgeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitJudgeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitJudgeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitJudgeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitJudgeRequestValidationError{}

// Validate checks the field values on SubmitJudgeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubmitJudgeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubmitJudgeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubmitJudgeReplyMultiError, or nil if none found.
func (m *SubmitJudgeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitJudgeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SubmitJudgeReplyMultiError(errors)
	}

	return nil
}

// SubmitJudgeReplyMultiError is an error wrapping multiple validation errors
// returned by SubmitJudgeReply.ValidateAll() if the designated constraints
// aren't met.
type SubmitJudgeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitJudgeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitJudgeReplyMultiError) AllErrors() []error { return m }

// SubmitJudgeReplyValidationError is the validation error returned by
// SubmitJudgeReply.Validate if the designated constraints aren't met.
type SubmitJudgeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitJudgeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitJudgeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitJudgeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitJudgeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitJudgeReplyValidationError) ErrorName() string { return "SubmitJudgeReplyValidationError" }

// Error satisfies the builtin error interface
func (e SubmitJudgeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitJudgeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitJudgeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitJudgeReplyValidationError{}

// Validate checks the field values on GetJudgableProblemsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetJudgableProblemsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJudgableProblemsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJudgableProblemsRequestMultiError, or nil if none found.
func (m *GetJudgableProblemsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJudgableProblemsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetJudgableProblemsRequestMultiError(errors)
	}

	return nil
}

// GetJudgableProblemsRequestMultiError is an error wrapping multiple
// validation errors returned by GetJudgableProblemsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetJudgableProblemsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJudgableProblemsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJudgableProblemsRequestMultiError) AllErrors() []error { return m }

// GetJudgableProblemsRequestValidationError is the validation error returned
// by GetJudgableProblemsRequest.Validate if the designated constraints aren't met.
type GetJudgableProblemsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJudgableProblemsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJudgableProblemsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJudgableProblemsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJudgableProblemsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJudgableProblemsRequestValidationError) ErrorName() string {
	return "GetJudgableProblemsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetJudgableProblemsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJudgableProblemsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJudgableProblemsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJudgableProblemsRequestValidationError{}

// Validate checks the field values on GetJudgableProblemsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetJudgableProblemsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJudgableProblemsReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJudgableProblemsReplyMultiError, or nil if none found.
func (m *GetJudgableProblemsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJudgableProblemsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetJudgableProblemsReplyValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetJudgableProblemsReplyValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetJudgableProblemsReplyValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetJudgableProblemsReplyMultiError(errors)
	}

	return nil
}

// GetJudgableProblemsReplyMultiError is an error wrapping multiple validation
// errors returned by GetJudgableProblemsReply.ValidateAll() if the designated
// constraints aren't met.
type GetJudgableProblemsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJudgableProblemsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJudgableProblemsReplyMultiError) AllErrors() []error { return m }

// GetJudgableProblemsReplyValidationError is the validation error returned by
// GetJudgableProblemsReply.Validate if the designated constraints aren't met.
type GetJudgableProblemsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJudgableProblemsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJudgableProblemsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJudgableProblemsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJudgableProblemsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJudgableProblemsReplyValidationError) ErrorName() string {
	return "GetJudgableProblemsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetJudgableProblemsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJudgableProblemsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJudgableProblemsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJudgableProblemsReplyValidationError{}

// Validate checks the field values on GetSubmissionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubmissionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubmissionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubmissionsRequestMultiError, or nil if none found.
func (m *GetSubmissionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubmissionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProblemId

	// no validation rules for Status

	if len(errors) > 0 {
		return GetSubmissionsRequestMultiError(errors)
	}

	return nil
}

// GetSubmissionsRequestMultiError is an error wrapping multiple validation
// errors returned by GetSubmissionsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSubmissionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubmissionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubmissionsRequestMultiError) AllErrors() []error { return m }

// GetSubmissionsRequestValidationError is the validation error returned by
// GetSubmissionsRequest.Validate if the designated constraints aren't met.
type GetSubmissionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubmissionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubmissionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubmissionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubmissionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubmissionsRequestValidationError) ErrorName() string {
	return "GetSubmissionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubmissionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubmissionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubmissionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubmissionsRequestValidationError{}

// Validate checks the field values on GetSubmissionsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubmissionsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubmissionsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubmissionsReplyMultiError, or nil if none found.
func (m *GetSubmissionsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubmissionsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSubmissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSubmissionsReplyValidationError{
						field:  fmt.Sprintf("Submissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSubmissionsReplyValidationError{
						field:  fmt.Sprintf("Submissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSubmissionsReplyValidationError{
					field:  fmt.Sprintf("Submissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSubmissionsReplyMultiError(errors)
	}

	return nil
}

// GetSubmissionsReplyMultiError is an error wrapping multiple validation
// errors returned by GetSubmissionsReply.ValidateAll() if the designated
// constraints aren't met.
type GetSubmissionsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubmissionsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubmissionsReplyMultiError) AllErrors() []error { return m }

// GetSubmissionsReplyValidationError is the validation error returned by
// GetSubmissionsReply.Validate if the designated constraints aren't met.
type GetSubmissionsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubmissionsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubmissionsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubmissionsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubmissionsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubmissionsReplyValidationError) ErrorName() string {
	return "GetSubmissionsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubmissionsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubmissionsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubmissionsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubmissionsReplyValidationError{}

// Validate checks the field values on CreateProblemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProblemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProblemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProblemRequestMultiError, or nil if none found.
func (m *CreateProblemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProblemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TypeId

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for Point

	// no validation rules for ContestId

	// no validation rules for Index

	// no validation rules for Config

	// no validation rules for OwnerId

	// no validation rules for Visibility

	if len(errors) > 0 {
		return CreateProblemRequestMultiError(errors)
	}

	return nil
}

// CreateProblemRequestMultiError is an error wrapping multiple validation
// errors returned by CreateProblemRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateProblemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProblemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProblemRequestMultiError) AllErrors() []error { return m }

// CreateProblemRequestValidationError is the validation error returned by
// CreateProblemRequest.Validate if the designated constraints aren't met.
type CreateProblemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProblemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProblemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProblemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProblemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProblemRequestValidationError) ErrorName() string {
	return "CreateProblemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProblemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProblemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProblemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProblemRequestValidationError{}

// Validate checks the field values on CreateProblemReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProblemReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProblemReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProblemReplyMultiError, or nil if none found.
func (m *CreateProblemReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProblemReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateProblemReplyMultiError(errors)
	}

	return nil
}

// CreateProblemReplyMultiError is an error wrapping multiple validation errors
// returned by CreateProblemReply.ValidateAll() if the designated constraints
// aren't met.
type CreateProblemReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProblemReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProblemReplyMultiError) AllErrors() []error { return m }

// CreateProblemReplyValidationError is the validation error returned by
// CreateProblemReply.Validate if the designated constraints aren't met.
type CreateProblemReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProblemReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProblemReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProblemReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProblemReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProblemReplyValidationError) ErrorName() string {
	return "CreateProblemReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProblemReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProblemReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProblemReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProblemReplyValidationError{}

// Validate checks the field values on UpdateProblemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProblemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProblemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProblemRequestMultiError, or nil if none found.
func (m *UpdateProblemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProblemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TypeId

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for Point

	// no validation rules for ContestId

	// no validation rules for CaseVersion

	// no validation rules for Index

	// no validation rules for Config

	// no validation rules for OwnerId

	// no validation rules for Visibility

	if len(errors) > 0 {
		return UpdateProblemRequestMultiError(errors)
	}

	return nil
}

// UpdateProblemRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateProblemRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateProblemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProblemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProblemRequestMultiError) AllErrors() []error { return m }

// UpdateProblemRequestValidationError is the validation error returned by
// UpdateProblemRequest.Validate if the designated constraints aren't met.
type UpdateProblemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProblemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProblemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProblemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProblemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProblemRequestValidationError) ErrorName() string {
	return "UpdateProblemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProblemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProblemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProblemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProblemRequestValidationError{}

// Validate checks the field values on UpdateProblemReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProblemReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProblemReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProblemReplyMultiError, or nil if none found.
func (m *UpdateProblemReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProblemReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdateProblemReplyMultiError(errors)
	}

	return nil
}

// UpdateProblemReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateProblemReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateProblemReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProblemReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProblemReplyMultiError) AllErrors() []error { return m }

// UpdateProblemReplyValidationError is the validation error returned by
// UpdateProblemReply.Validate if the designated constraints aren't met.
type UpdateProblemReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProblemReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProblemReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProblemReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProblemReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProblemReplyValidationError) ErrorName() string {
	return "UpdateProblemReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProblemReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProblemReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProblemReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProblemReplyValidationError{}

// Validate checks the field values on DeleteProblemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProblemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProblemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProblemRequestMultiError, or nil if none found.
func (m *DeleteProblemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProblemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteProblemRequestMultiError(errors)
	}

	return nil
}

// DeleteProblemRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteProblemRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteProblemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProblemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProblemRequestMultiError) AllErrors() []error { return m }

// DeleteProblemRequestValidationError is the validation error returned by
// DeleteProblemRequest.Validate if the designated constraints aren't met.
type DeleteProblemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProblemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProblemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProblemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProblemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProblemRequestValidationError) ErrorName() string {
	return "DeleteProblemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProblemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProblemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProblemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProblemRequestValidationError{}

// Validate checks the field values on DeleteProblemReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProblemReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProblemReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProblemReplyMultiError, or nil if none found.
func (m *DeleteProblemReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProblemReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteProblemReplyMultiError(errors)
	}

	return nil
}

// DeleteProblemReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteProblemReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteProblemReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProblemReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProblemReplyMultiError) AllErrors() []error { return m }

// DeleteProblemReplyValidationError is the validation error returned by
// DeleteProblemReply.Validate if the designated constraints aren't met.
type DeleteProblemReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProblemReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProblemReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProblemReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProblemReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProblemReplyValidationError) ErrorName() string {
	return "DeleteProblemReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProblemReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProblemReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProblemReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProblemReplyValidationError{}

// Validate checks the field values on GetProblemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProblemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProblemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProblemRequestMultiError, or nil if none found.
func (m *GetProblemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProblemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetProblemRequestMultiError(errors)
	}

	return nil
}

// GetProblemRequestMultiError is an error wrapping multiple validation errors
// returned by GetProblemRequest.ValidateAll() if the designated constraints
// aren't met.
type GetProblemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProblemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProblemRequestMultiError) AllErrors() []error { return m }

// GetProblemRequestValidationError is the validation error returned by
// GetProblemRequest.Validate if the designated constraints aren't met.
type GetProblemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProblemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProblemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProblemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProblemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProblemRequestValidationError) ErrorName() string {
	return "GetProblemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProblemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProblemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProblemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProblemRequestValidationError{}

// Validate checks the field values on GetProblemReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProblemReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProblemReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProblemReplyMultiError, or nil if none found.
func (m *GetProblemReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProblemReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TypeId

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for Point

	// no validation rules for ContestId

	// no validation rules for CaseVersion

	// no validation rules for Index

	// no validation rules for Config

	// no validation rules for OwnerId

	// no validation rules for Visibility

	if len(errors) > 0 {
		return GetProblemReplyMultiError(errors)
	}

	return nil
}

// GetProblemReplyMultiError is an error wrapping multiple validation errors
// returned by GetProblemReply.ValidateAll() if the designated constraints
// aren't met.
type GetProblemReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProblemReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProblemReplyMultiError) AllErrors() []error { return m }

// GetProblemReplyValidationError is the validation error returned by
// GetProblemReply.Validate if the designated constraints aren't met.
type GetProblemReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProblemReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProblemReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProblemReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProblemReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProblemReplyValidationError) ErrorName() string { return "GetProblemReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetProblemReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProblemReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProblemReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProblemReplyValidationError{}

// Validate checks the field values on ListProblemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProblemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProblemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProblemRequestMultiError, or nil if none found.
func (m *ListProblemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProblemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Size

	// no validation rules for Currency

	if len(errors) > 0 {
		return ListProblemRequestMultiError(errors)
	}

	return nil
}

// ListProblemRequestMultiError is an error wrapping multiple validation errors
// returned by ListProblemRequest.ValidateAll() if the designated constraints
// aren't met.
type ListProblemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProblemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProblemRequestMultiError) AllErrors() []error { return m }

// ListProblemRequestValidationError is the validation error returned by
// ListProblemRequest.Validate if the designated constraints aren't met.
type ListProblemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProblemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProblemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProblemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProblemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProblemRequestValidationError) ErrorName() string {
	return "ListProblemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProblemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProblemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProblemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProblemRequestValidationError{}

// Validate checks the field values on ListProblemReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListProblemReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProblemReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProblemReplyMultiError, or nil if none found.
func (m *ListProblemReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProblemReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Currency

	// no validation rules for Total

	for idx, item := range m.GetProblems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProblemReplyValidationError{
						field:  fmt.Sprintf("Problems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProblemReplyValidationError{
						field:  fmt.Sprintf("Problems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProblemReplyValidationError{
					field:  fmt.Sprintf("Problems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProblemReplyMultiError(errors)
	}

	return nil
}

// ListProblemReplyMultiError is an error wrapping multiple validation errors
// returned by ListProblemReply.ValidateAll() if the designated constraints
// aren't met.
type ListProblemReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProblemReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProblemReplyMultiError) AllErrors() []error { return m }

// ListProblemReplyValidationError is the validation error returned by
// ListProblemReply.Validate if the designated constraints aren't met.
type ListProblemReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProblemReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProblemReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProblemReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProblemReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProblemReplyValidationError) ErrorName() string { return "ListProblemReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListProblemReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProblemReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProblemReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProblemReplyValidationError{}

// Validate checks the field values on GetProblemTypesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProblemTypesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProblemTypesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProblemTypesRequestMultiError, or nil if none found.
func (m *GetProblemTypesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProblemTypesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetProblemTypesRequestMultiError(errors)
	}

	return nil
}

// GetProblemTypesRequestMultiError is an error wrapping multiple validation
// errors returned by GetProblemTypesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetProblemTypesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProblemTypesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProblemTypesRequestMultiError) AllErrors() []error { return m }

// GetProblemTypesRequestValidationError is the validation error returned by
// GetProblemTypesRequest.Validate if the designated constraints aren't met.
type GetProblemTypesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProblemTypesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProblemTypesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProblemTypesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProblemTypesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProblemTypesRequestValidationError) ErrorName() string {
	return "GetProblemTypesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProblemTypesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProblemTypesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProblemTypesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProblemTypesRequestValidationError{}

// Validate checks the field values on GetProblemTypesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProblemTypesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProblemTypesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProblemTypesReplyMultiError, or nil if none found.
func (m *GetProblemTypesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProblemTypesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTypes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetProblemTypesReplyValidationError{
						field:  fmt.Sprintf("Types[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetProblemTypesReplyValidationError{
						field:  fmt.Sprintf("Types[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetProblemTypesReplyValidationError{
					field:  fmt.Sprintf("Types[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetProblemTypesReplyMultiError(errors)
	}

	return nil
}

// GetProblemTypesReplyMultiError is an error wrapping multiple validation
// errors returned by GetProblemTypesReply.ValidateAll() if the designated
// constraints aren't met.
type GetProblemTypesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProblemTypesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProblemTypesReplyMultiError) AllErrors() []error { return m }

// GetProblemTypesReplyValidationError is the validation error returned by
// GetProblemTypesReply.Validate if the designated constraints aren't met.
type GetProblemTypesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProblemTypesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProblemTypesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProblemTypesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProblemTypesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProblemTypesReplyValidationError) ErrorName() string {
	return "GetProblemTypesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetProblemTypesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProblemTypesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProblemTypesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProblemTypesReplyValidationError{}

// Validate checks the field values on UpdateAdjudicatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAdjudicatorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAdjudicatorRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAdjudicatorRequestMultiError, or nil if none found.
func (m *UpdateAdjudicatorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAdjudicatorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProblemId

	if len(errors) > 0 {
		return UpdateAdjudicatorRequestMultiError(errors)
	}

	return nil
}

// UpdateAdjudicatorRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateAdjudicatorRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateAdjudicatorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAdjudicatorRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAdjudicatorRequestMultiError) AllErrors() []error { return m }

// UpdateAdjudicatorRequestValidationError is the validation error returned by
// UpdateAdjudicatorRequest.Validate if the designated constraints aren't met.
type UpdateAdjudicatorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAdjudicatorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAdjudicatorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAdjudicatorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAdjudicatorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAdjudicatorRequestValidationError) ErrorName() string {
	return "UpdateAdjudicatorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAdjudicatorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAdjudicatorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAdjudicatorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAdjudicatorRequestValidationError{}

// Validate checks the field values on UpdateAdjudicatorReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAdjudicatorReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAdjudicatorReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAdjudicatorReplyMultiError, or nil if none found.
func (m *UpdateAdjudicatorReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAdjudicatorReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdateAdjudicatorReplyMultiError(errors)
	}

	return nil
}

// UpdateAdjudicatorReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateAdjudicatorReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateAdjudicatorReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAdjudicatorReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAdjudicatorReplyMultiError) AllErrors() []error { return m }

// UpdateAdjudicatorReplyValidationError is the validation error returned by
// UpdateAdjudicatorReply.Validate if the designated constraints aren't met.
type UpdateAdjudicatorReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAdjudicatorReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAdjudicatorReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAdjudicatorReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAdjudicatorReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAdjudicatorReplyValidationError) ErrorName() string {
	return "UpdateAdjudicatorReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAdjudicatorReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAdjudicatorReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAdjudicatorReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAdjudicatorReplyValidationError{}

// Validate checks the field values on GetAdjudicatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAdjudicatorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAdjudicatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAdjudicatorRequestMultiError, or nil if none found.
func (m *GetAdjudicatorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAdjudicatorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProblemId

	if len(errors) > 0 {
		return GetAdjudicatorRequestMultiError(errors)
	}

	return nil
}

// GetAdjudicatorRequestMultiError is an error wrapping multiple validation
// errors returned by GetAdjudicatorRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAdjudicatorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAdjudicatorRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAdjudicatorRequestMultiError) AllErrors() []error { return m }

// GetAdjudicatorRequestValidationError is the validation error returned by
// GetAdjudicatorRequest.Validate if the designated constraints aren't met.
type GetAdjudicatorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAdjudicatorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAdjudicatorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAdjudicatorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAdjudicatorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAdjudicatorRequestValidationError) ErrorName() string {
	return "GetAdjudicatorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAdjudicatorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAdjudicatorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAdjudicatorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAdjudicatorRequestValidationError{}

// Validate checks the field values on GetAdjudicatorReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAdjudicatorReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAdjudicatorReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAdjudicatorReplyMultiError, or nil if none found.
func (m *GetAdjudicatorReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAdjudicatorReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAdjudicatorReplyValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAdjudicatorReplyValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAdjudicatorReplyValidationError{
					field:  fmt.Sprintf("Groups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAdjudicatorReplyMultiError(errors)
	}

	return nil
}

// GetAdjudicatorReplyMultiError is an error wrapping multiple validation
// errors returned by GetAdjudicatorReply.ValidateAll() if the designated
// constraints aren't met.
type GetAdjudicatorReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAdjudicatorReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAdjudicatorReplyMultiError) AllErrors() []error { return m }

// GetAdjudicatorReplyValidationError is the validation error returned by
// GetAdjudicatorReply.Validate if the designated constraints aren't met.
type GetAdjudicatorReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAdjudicatorReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAdjudicatorReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAdjudicatorReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAdjudicatorReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAdjudicatorReplyValidationError) ErrorName() string {
	return "GetAdjudicatorReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetAdjudicatorReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAdjudicatorReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAdjudicatorReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAdjudicatorReplyValidationError{}

// Validate checks the field values on CreateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserRequestMultiError, or nil if none found.
func (m *CreateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	if len(errors) > 0 {
		return CreateUserRequestMultiError(errors)
	}

	return nil
}

// CreateUserRequestMultiError is an error wrapping multiple validation errors
// returned by CreateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserRequestMultiError) AllErrors() []error { return m }

// CreateUserRequestValidationError is the validation error returned by
// CreateUserRequest.Validate if the designated constraints aren't met.
type CreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRequestValidationError) ErrorName() string {
	return "CreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRequestValidationError{}

// Validate checks the field values on CreateUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserReplyMultiError, or nil if none found.
func (m *CreateUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateUserReplyMultiError(errors)
	}

	return nil
}

// CreateUserReplyMultiError is an error wrapping multiple validation errors
// returned by CreateUserReply.ValidateAll() if the designated constraints
// aren't met.
type CreateUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserReplyMultiError) AllErrors() []error { return m }

// CreateUserReplyValidationError is the validation error returned by
// CreateUserReply.Validate if the designated constraints aren't met.
type CreateUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserReplyValidationError) ErrorName() string { return "CreateUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserReplyValidationError{}

// Validate checks the field values on BatchCreateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchCreateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchCreateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchCreateUserRequestMultiError, or nil if none found.
func (m *BatchCreateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchCreateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetNumber() <= 0 {
		err := BatchCreateUserRequestValidationError{
			field:  "Number",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BatchCreateUserRequestMultiError(errors)
	}

	return nil
}

// BatchCreateUserRequestMultiError is an error wrapping multiple validation
// errors returned by BatchCreateUserRequest.ValidateAll() if the designated
// constraints aren't met.
type BatchCreateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchCreateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchCreateUserRequestMultiError) AllErrors() []error { return m }

// BatchCreateUserRequestValidationError is the validation error returned by
// BatchCreateUserRequest.Validate if the designated constraints aren't met.
type BatchCreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchCreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchCreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchCreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchCreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchCreateUserRequestValidationError) ErrorName() string {
	return "BatchCreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchCreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchCreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchCreateUserRequestValidationError{}

// Validate checks the field values on BatchCreateUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchCreateUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchCreateUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchCreateUserReplyMultiError, or nil if none found.
func (m *BatchCreateUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchCreateUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchCreateUserReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchCreateUserReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchCreateUserReplyValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BatchCreateUserReplyMultiError(errors)
	}

	return nil
}

// BatchCreateUserReplyMultiError is an error wrapping multiple validation
// errors returned by BatchCreateUserReply.ValidateAll() if the designated
// constraints aren't met.
type BatchCreateUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchCreateUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchCreateUserReplyMultiError) AllErrors() []error { return m }

// BatchCreateUserReplyValidationError is the validation error returned by
// BatchCreateUserReply.Validate if the designated constraints aren't met.
type BatchCreateUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchCreateUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchCreateUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchCreateUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchCreateUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchCreateUserReplyValidationError) ErrorName() string {
	return "BatchCreateUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e BatchCreateUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchCreateUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchCreateUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchCreateUserReplyValidationError{}

// Validate checks the field values on UpdateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserRequestMultiError, or nil if none found.
func (m *UpdateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for State

	if len(errors) > 0 {
		return UpdateUserRequestMultiError(errors)
	}

	return nil
}

// UpdateUserRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRequestMultiError) AllErrors() []error { return m }

// UpdateUserRequestValidationError is the validation error returned by
// UpdateUserRequest.Validate if the designated constraints aren't met.
type UpdateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRequestValidationError) ErrorName() string {
	return "UpdateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRequestValidationError{}

// Validate checks the field values on UpdateUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserReplyMultiError, or nil if none found.
func (m *UpdateUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdateUserReplyMultiError(errors)
	}

	return nil
}

// UpdateUserReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateUserReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserReplyMultiError) AllErrors() []error { return m }

// UpdateUserReplyValidationError is the validation error returned by
// UpdateUserReply.Validate if the designated constraints aren't met.
type UpdateUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserReplyValidationError) ErrorName() string { return "UpdateUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserReplyValidationError{}

// Validate checks the field values on DeleteUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserRequestMultiError, or nil if none found.
func (m *DeleteUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteUserRequestMultiError(errors)
	}

	return nil
}

// DeleteUserRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteUserRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserRequestMultiError) AllErrors() []error { return m }

// DeleteUserRequestValidationError is the validation error returned by
// DeleteUserRequest.Validate if the designated constraints aren't met.
type DeleteUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserRequestValidationError) ErrorName() string {
	return "DeleteUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserRequestValidationError{}

// Validate checks the field values on DeleteUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserReplyMultiError, or nil if none found.
func (m *DeleteUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteUserReplyMultiError(errors)
	}

	return nil
}

// DeleteUserReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteUserReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserReplyMultiError) AllErrors() []error { return m }

// DeleteUserReplyValidationError is the validation error returned by
// DeleteUserReply.Validate if the designated constraints aren't met.
type DeleteUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserReplyValidationError) ErrorName() string { return "DeleteUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserReplyValidationError{}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}

	return nil
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on GetUserReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserReplyMultiError, or
// nil if none found.
func (m *GetUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for State

	if len(errors) > 0 {
		return GetUserReplyMultiError(errors)
	}

	return nil
}

// GetUserReplyMultiError is an error wrapping multiple validation errors
// returned by GetUserReply.ValidateAll() if the designated constraints aren't met.
type GetUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserReplyMultiError) AllErrors() []error { return m }

// GetUserReplyValidationError is the validation error returned by
// GetUserReply.Validate if the designated constraints aren't met.
type GetUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserReplyValidationError) ErrorName() string { return "GetUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserReplyValidationError{}

// Validate checks the field values on ListUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserRequestMultiError, or nil if none found.
func (m *ListUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Size

	// no validation rules for Current

	if len(errors) > 0 {
		return ListUserRequestMultiError(errors)
	}

	return nil
}

// ListUserRequestMultiError is an error wrapping multiple validation errors
// returned by ListUserRequest.ValidateAll() if the designated constraints
// aren't met.
type ListUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserRequestMultiError) AllErrors() []error { return m }

// ListUserRequestValidationError is the validation error returned by
// ListUserRequest.Validate if the designated constraints aren't met.
type ListUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserRequestValidationError) ErrorName() string { return "ListUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserRequestValidationError{}

// Validate checks the field values on ListUserReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListUserReplyMultiError, or
// nil if none found.
func (m *ListUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserReplyValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserReplyMultiError(errors)
	}

	return nil
}

// ListUserReplyMultiError is an error wrapping multiple validation errors
// returned by ListUserReply.ValidateAll() if the designated constraints
// aren't met.
type ListUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserReplyMultiError) AllErrors() []error { return m }

// ListUserReplyValidationError is the validation error returned by
// ListUserReply.Validate if the designated constraints aren't met.
type ListUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserReplyValidationError) ErrorName() string { return "ListUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserReplyValidationError{}

// Validate checks the field values on ListContestReply_Contest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListContestReply_Contest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListContestReply_Contest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListContestReply_ContestMultiError, or nil if none found.
func (m *ListContestReply_Contest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContestReply_Contest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Status

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListContestReply_ContestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListContestReply_ContestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListContestReply_ContestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListContestReply_ContestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListContestReply_ContestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListContestReply_ContestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Language

	// no validation rules for ExtraTime

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListContestReply_ContestValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListContestReply_ContestValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListContestReply_ContestValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListContestReply_ContestMultiError(errors)
	}

	return nil
}

// ListContestReply_ContestMultiError is an error wrapping multiple validation
// errors returned by ListContestReply_Contest.ValidateAll() if the designated
// constraints aren't met.
type ListContestReply_ContestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContestReply_ContestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContestReply_ContestMultiError) AllErrors() []error { return m }

// ListContestReply_ContestValidationError is the validation error returned by
// ListContestReply_Contest.Validate if the designated constraints aren't met.
type ListContestReply_ContestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContestReply_ContestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContestReply_ContestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContestReply_ContestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContestReply_ContestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContestReply_ContestValidationError) ErrorName() string {
	return "ListContestReply_ContestValidationError"
}

// Error satisfies the builtin error interface
func (e ListContestReply_ContestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContestReply_Contest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContestReply_ContestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContestReply_ContestValidationError{}

// Validate checks the field values on GetRankingReply_UserResult with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRankingReply_UserResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRankingReply_UserResult with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRankingReply_UserResultMultiError, or nil if none found.
func (m *GetRankingReply_UserResult) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRankingReply_UserResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProblems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetRankingReply_UserResultValidationError{
						field:  fmt.Sprintf("Problems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetRankingReply_UserResultValidationError{
						field:  fmt.Sprintf("Problems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRankingReply_UserResultValidationError{
					field:  fmt.Sprintf("Problems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Username

	// no validation rules for TotalScore

	// no validation rules for Rank

	// no validation rules for Penalty

	if len(errors) > 0 {
		return GetRankingReply_UserResultMultiError(errors)
	}

	return nil
}

// GetRankingReply_UserResultMultiError is an error wrapping multiple
// validation errors returned by GetRankingReply_UserResult.ValidateAll() if
// the designated constraints aren't met.
type GetRankingReply_UserResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRankingReply_UserResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRankingReply_UserResultMultiError) AllErrors() []error { return m }

// GetRankingReply_UserResultValidationError is the validation error returned
// by GetRankingReply_UserResult.Validate if the designated constraints aren't met.
type GetRankingReply_UserResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRankingReply_UserResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRankingReply_UserResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRankingReply_UserResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRankingReply_UserResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRankingReply_UserResultValidationError) ErrorName() string {
	return "GetRankingReply_UserResultValidationError"
}

// Error satisfies the builtin error interface
func (e GetRankingReply_UserResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRankingReply_UserResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRankingReply_UserResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRankingReply_UserResultValidationError{}

// Validate checks the field values on GetRankingReply_UserResult_ProblemResult
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetRankingReply_UserResult_ProblemResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetRankingReply_UserResult_ProblemResult with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetRankingReply_UserResult_ProblemResultMultiError, or nil if none found.
func (m *GetRankingReply_UserResult_ProblemResult) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRankingReply_UserResult_ProblemResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProblemId

	// no validation rules for State

	// no validation rules for Point

	// no validation rules for TriedTimes

	if all {
		switch v := interface{}(m.GetScoreAchievedTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRankingReply_UserResult_ProblemResultValidationError{
					field:  "ScoreAchievedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRankingReply_UserResult_ProblemResultValidationError{
					field:  "ScoreAchievedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScoreAchievedTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRankingReply_UserResult_ProblemResultValidationError{
				field:  "ScoreAchievedTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetRankingReply_UserResult_ProblemResultMultiError(errors)
	}

	return nil
}

// GetRankingReply_UserResult_ProblemResultMultiError is an error wrapping
// multiple validation errors returned by
// GetRankingReply_UserResult_ProblemResult.ValidateAll() if the designated
// constraints aren't met.
type GetRankingReply_UserResult_ProblemResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRankingReply_UserResult_ProblemResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRankingReply_UserResult_ProblemResultMultiError) AllErrors() []error { return m }

// GetRankingReply_UserResult_ProblemResultValidationError is the validation
// error returned by GetRankingReply_UserResult_ProblemResult.Validate if the
// designated constraints aren't met.
type GetRankingReply_UserResult_ProblemResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRankingReply_UserResult_ProblemResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRankingReply_UserResult_ProblemResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRankingReply_UserResult_ProblemResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRankingReply_UserResult_ProblemResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRankingReply_UserResult_ProblemResultValidationError) ErrorName() string {
	return "GetRankingReply_UserResult_ProblemResultValidationError"
}

// Error satisfies the builtin error interface
func (e GetRankingReply_UserResult_ProblemResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRankingReply_UserResult_ProblemResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRankingReply_UserResult_ProblemResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRankingReply_UserResult_ProblemResultValidationError{}

// Validate checks the field values on ListGroupReply_Group with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGroupReply_Group) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGroupReply_Group with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGroupReply_GroupMultiError, or nil if none found.
func (m *ListGroupReply_Group) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGroupReply_Group) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for IsRoot

	if len(errors) > 0 {
		return ListGroupReply_GroupMultiError(errors)
	}

	return nil
}

// ListGroupReply_GroupMultiError is an error wrapping multiple validation
// errors returned by ListGroupReply_Group.ValidateAll() if the designated
// constraints aren't met.
type ListGroupReply_GroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGroupReply_GroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGroupReply_GroupMultiError) AllErrors() []error { return m }

// ListGroupReply_GroupValidationError is the validation error returned by
// ListGroupReply_Group.Validate if the designated constraints aren't met.
type ListGroupReply_GroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGroupReply_GroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGroupReply_GroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGroupReply_GroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGroupReply_GroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGroupReply_GroupValidationError) ErrorName() string {
	return "ListGroupReply_GroupValidationError"
}

// Error satisfies the builtin error interface
func (e ListGroupReply_GroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGroupReply_Group.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGroupReply_GroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGroupReply_GroupValidationError{}

// Validate checks the field values on ListProblemReply_Problem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProblemReply_Problem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProblemReply_Problem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProblemReply_ProblemMultiError, or nil if none found.
func (m *ListProblemReply_Problem) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProblemReply_Problem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TypeId

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for Point

	// no validation rules for ContestId

	// no validation rules for CaseVersion

	// no validation rules for Index

	// no validation rules for Config

	// no validation rules for OwnerId

	// no validation rules for Visibility

	if len(errors) > 0 {
		return ListProblemReply_ProblemMultiError(errors)
	}

	return nil
}

// ListProblemReply_ProblemMultiError is an error wrapping multiple validation
// errors returned by ListProblemReply_Problem.ValidateAll() if the designated
// constraints aren't met.
type ListProblemReply_ProblemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProblemReply_ProblemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProblemReply_ProblemMultiError) AllErrors() []error { return m }

// ListProblemReply_ProblemValidationError is the validation error returned by
// ListProblemReply_Problem.Validate if the designated constraints aren't met.
type ListProblemReply_ProblemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProblemReply_ProblemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProblemReply_ProblemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProblemReply_ProblemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProblemReply_ProblemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProblemReply_ProblemValidationError) ErrorName() string {
	return "ListProblemReply_ProblemValidationError"
}

// Error satisfies the builtin error interface
func (e ListProblemReply_ProblemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProblemReply_Problem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProblemReply_ProblemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProblemReply_ProblemValidationError{}

// Validate checks the field values on GetProblemTypesReply_ProblemType with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetProblemTypesReply_ProblemType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProblemTypesReply_ProblemType with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetProblemTypesReply_ProblemTypeMultiError, or nil if none found.
func (m *GetProblemTypesReply_ProblemType) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProblemTypesReply_ProblemType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Slug

	// no validation rules for Description

	// no validation rules for Judge

	if len(errors) > 0 {
		return GetProblemTypesReply_ProblemTypeMultiError(errors)
	}

	return nil
}

// GetProblemTypesReply_ProblemTypeMultiError is an error wrapping multiple
// validation errors returned by
// GetProblemTypesReply_ProblemType.ValidateAll() if the designated
// constraints aren't met.
type GetProblemTypesReply_ProblemTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProblemTypesReply_ProblemTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProblemTypesReply_ProblemTypeMultiError) AllErrors() []error { return m }

// GetProblemTypesReply_ProblemTypeValidationError is the validation error
// returned by GetProblemTypesReply_ProblemType.Validate if the designated
// constraints aren't met.
type GetProblemTypesReply_ProblemTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProblemTypesReply_ProblemTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProblemTypesReply_ProblemTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProblemTypesReply_ProblemTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProblemTypesReply_ProblemTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProblemTypesReply_ProblemTypeValidationError) ErrorName() string {
	return "GetProblemTypesReply_ProblemTypeValidationError"
}

// Error satisfies the builtin error interface
func (e GetProblemTypesReply_ProblemTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProblemTypesReply_ProblemType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProblemTypesReply_ProblemTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProblemTypesReply_ProblemTypeValidationError{}

// Validate checks the field values on GetAdjudicatorReply_Group with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAdjudicatorReply_Group) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAdjudicatorReply_Group with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAdjudicatorReply_GroupMultiError, or nil if none found.
func (m *GetAdjudicatorReply_Group) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAdjudicatorReply_Group) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return GetAdjudicatorReply_GroupMultiError(errors)
	}

	return nil
}

// GetAdjudicatorReply_GroupMultiError is an error wrapping multiple validation
// errors returned by GetAdjudicatorReply_Group.ValidateAll() if the
// designated constraints aren't met.
type GetAdjudicatorReply_GroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAdjudicatorReply_GroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAdjudicatorReply_GroupMultiError) AllErrors() []error { return m }

// GetAdjudicatorReply_GroupValidationError is the validation error returned by
// GetAdjudicatorReply_Group.Validate if the designated constraints aren't met.
type GetAdjudicatorReply_GroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAdjudicatorReply_GroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAdjudicatorReply_GroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAdjudicatorReply_GroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAdjudicatorReply_GroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAdjudicatorReply_GroupValidationError) ErrorName() string {
	return "GetAdjudicatorReply_GroupValidationError"
}

// Error satisfies the builtin error interface
func (e GetAdjudicatorReply_GroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAdjudicatorReply_Group.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAdjudicatorReply_GroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAdjudicatorReply_GroupValidationError{}

// Validate checks the field values on BatchCreateUserReply_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchCreateUserReply_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchCreateUserReply_User with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchCreateUserReply_UserMultiError, or nil if none found.
func (m *BatchCreateUserReply_User) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchCreateUserReply_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	if len(errors) > 0 {
		return BatchCreateUserReply_UserMultiError(errors)
	}

	return nil
}

// BatchCreateUserReply_UserMultiError is an error wrapping multiple validation
// errors returned by BatchCreateUserReply_User.ValidateAll() if the
// designated constraints aren't met.
type BatchCreateUserReply_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchCreateUserReply_UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchCreateUserReply_UserMultiError) AllErrors() []error { return m }

// BatchCreateUserReply_UserValidationError is the validation error returned by
// BatchCreateUserReply_User.Validate if the designated constraints aren't met.
type BatchCreateUserReply_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchCreateUserReply_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchCreateUserReply_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchCreateUserReply_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchCreateUserReply_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchCreateUserReply_UserValidationError) ErrorName() string {
	return "BatchCreateUserReply_UserValidationError"
}

// Error satisfies the builtin error interface
func (e BatchCreateUserReply_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchCreateUserReply_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchCreateUserReply_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchCreateUserReply_UserValidationError{}

// Validate checks the field values on ListUserReply_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserReply_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserReply_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserReply_UserMultiError, or nil if none found.
func (m *ListUserReply_User) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserReply_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for State

	if len(errors) > 0 {
		return ListUserReply_UserMultiError(errors)
	}

	return nil
}

// ListUserReply_UserMultiError is an error wrapping multiple validation errors
// returned by ListUserReply_User.ValidateAll() if the designated constraints
// aren't met.
type ListUserReply_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserReply_UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserReply_UserMultiError) AllErrors() []error { return m }

// ListUserReply_UserValidationError is the validation error returned by
// ListUserReply_User.Validate if the designated constraints aren't met.
type ListUserReply_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserReply_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserReply_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserReply_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserReply_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserReply_UserValidationError) ErrorName() string {
	return "ListUserReply_UserValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserReply_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserReply_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserReply_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserReply_UserValidationError{}
