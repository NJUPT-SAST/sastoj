// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: admin/admin/service/v1/admin.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Admin_DeleteCasesByProblemId_FullMethodName = "/api.sastoj.admin.admin.service.v1.Admin/DeleteCasesByProblemId"
	Admin_CreateContest_FullMethodName          = "/api.sastoj.admin.admin.service.v1.Admin/CreateContest"
	Admin_UpdateContest_FullMethodName          = "/api.sastoj.admin.admin.service.v1.Admin/UpdateContest"
	Admin_DeleteContest_FullMethodName          = "/api.sastoj.admin.admin.service.v1.Admin/DeleteContest"
	Admin_GetContest_FullMethodName             = "/api.sastoj.admin.admin.service.v1.Admin/GetContest"
	Admin_ListContest_FullMethodName            = "/api.sastoj.admin.admin.service.v1.Admin/ListContest"
	Admin_AddContestants_FullMethodName         = "/api.sastoj.admin.admin.service.v1.Admin/AddContestants"
	Admin_ManualRanking_FullMethodName          = "/api.sastoj.admin.admin.service.v1.Admin/ManualRanking"
	Admin_GetRanking_FullMethodName             = "/api.sastoj.admin.admin.service.v1.Admin/GetRanking"
	Admin_CreateGroup_FullMethodName            = "/api.sastoj.admin.admin.service.v1.Admin/CreateGroup"
	Admin_UpdateGroup_FullMethodName            = "/api.sastoj.admin.admin.service.v1.Admin/UpdateGroup"
	Admin_DeleteGroup_FullMethodName            = "/api.sastoj.admin.admin.service.v1.Admin/DeleteGroup"
	Admin_GetGroup_FullMethodName               = "/api.sastoj.admin.admin.service.v1.Admin/GetGroup"
	Admin_ListGroup_FullMethodName              = "/api.sastoj.admin.admin.service.v1.Admin/ListGroup"
	Admin_SubmitJudge_FullMethodName            = "/api.sastoj.admin.admin.service.v1.Admin/SubmitJudge"
	Admin_GetJudgableProblems_FullMethodName    = "/api.sastoj.admin.admin.service.v1.Admin/GetJudgableProblems"
	Admin_GetSubmissions_FullMethodName         = "/api.sastoj.admin.admin.service.v1.Admin/GetSubmissions"
	Admin_UpdateJudger_FullMethodName           = "/api.sastoj.admin.admin.service.v1.Admin/UpdateJudger"
	Admin_GetJudger_FullMethodName              = "/api.sastoj.admin.admin.service.v1.Admin/GetJudger"
	Admin_CreateProblem_FullMethodName          = "/api.sastoj.admin.admin.service.v1.Admin/CreateProblem"
	Admin_UpdateProblem_FullMethodName          = "/api.sastoj.admin.admin.service.v1.Admin/UpdateProblem"
	Admin_DeleteProblem_FullMethodName          = "/api.sastoj.admin.admin.service.v1.Admin/DeleteProblem"
	Admin_ListProblem_FullMethodName            = "/api.sastoj.admin.admin.service.v1.Admin/ListProblem"
	Admin_GetProblem_FullMethodName             = "/api.sastoj.admin.admin.service.v1.Admin/GetProblem"
	Admin_GetProblemTypes_FullMethodName        = "/api.sastoj.admin.admin.service.v1.Admin/GetProblemTypes"
	Admin_CreateUser_FullMethodName             = "/api.sastoj.admin.admin.service.v1.Admin/CreateUser"
	Admin_BatchCreateUser_FullMethodName        = "/api.sastoj.admin.admin.service.v1.Admin/BatchCreateUser"
	Admin_UpdateUser_FullMethodName             = "/api.sastoj.admin.admin.service.v1.Admin/UpdateUser"
	Admin_DeleteUser_FullMethodName             = "/api.sastoj.admin.admin.service.v1.Admin/DeleteUser"
	Admin_GetUser_FullMethodName                = "/api.sastoj.admin.admin.service.v1.Admin/GetUser"
	Admin_ListUser_FullMethodName               = "/api.sastoj.admin.admin.service.v1.Admin/ListUser"
)

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	DeleteCasesByProblemId(ctx context.Context, in *DeleteCasesByProblemIdRequest, opts ...grpc.CallOption) (*DeleteCasesByProblemIdReply, error)
	CreateContest(ctx context.Context, in *CreateContestRequest, opts ...grpc.CallOption) (*CreateContestReply, error)
	UpdateContest(ctx context.Context, in *UpdateContestRequest, opts ...grpc.CallOption) (*UpdateContestReply, error)
	DeleteContest(ctx context.Context, in *DeleteContestRequest, opts ...grpc.CallOption) (*DeleteContestReply, error)
	GetContest(ctx context.Context, in *GetContestRequest, opts ...grpc.CallOption) (*GetContestReply, error)
	ListContest(ctx context.Context, in *ListContestRequest, opts ...grpc.CallOption) (*ListContestReply, error)
	AddContestants(ctx context.Context, in *AddContestantsRequest, opts ...grpc.CallOption) (*AddContestantsReply, error)
	ManualRanking(ctx context.Context, in *ManualRankingRequest, opts ...grpc.CallOption) (*ManualRankingReply, error)
	GetRanking(ctx context.Context, in *GetRankingRequest, opts ...grpc.CallOption) (*GetRankingReply, error)
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupReply, error)
	UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*UpdateGroupReply, error)
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupReply, error)
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupReply, error)
	ListGroup(ctx context.Context, in *ListGroupRequest, opts ...grpc.CallOption) (*ListGroupReply, error)
	SubmitJudge(ctx context.Context, in *SubmitJudgeRequest, opts ...grpc.CallOption) (*SubmitJudgeReply, error)
	GetJudgableProblems(ctx context.Context, in *GetJudgableProblemsRequest, opts ...grpc.CallOption) (*GetJudgableProblemsReply, error)
	GetSubmissions(ctx context.Context, in *GetSubmissionsRequest, opts ...grpc.CallOption) (*GetSubmissionsReply, error)
	UpdateJudger(ctx context.Context, in *UpdateJudgerRequest, opts ...grpc.CallOption) (*UpdateJudgerReply, error)
	GetJudger(ctx context.Context, in *GetJudgerRequest, opts ...grpc.CallOption) (*GetJudgerReply, error)
	CreateProblem(ctx context.Context, in *CreateProblemRequest, opts ...grpc.CallOption) (*CreateProblemReply, error)
	UpdateProblem(ctx context.Context, in *UpdateProblemRequest, opts ...grpc.CallOption) (*UpdateProblemReply, error)
	DeleteProblem(ctx context.Context, in *DeleteProblemRequest, opts ...grpc.CallOption) (*DeleteProblemReply, error)
	ListProblem(ctx context.Context, in *ListProblemRequest, opts ...grpc.CallOption) (*ListProblemReply, error)
	GetProblem(ctx context.Context, in *GetProblemRequest, opts ...grpc.CallOption) (*GetProblemReply, error)
	GetProblemTypes(ctx context.Context, in *GetProblemTypesRequest, opts ...grpc.CallOption) (*GetProblemTypesReply, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserReply, error)
	BatchCreateUser(ctx context.Context, in *BatchCreateUserRequest, opts ...grpc.CallOption) (*BatchCreateUserReply, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserReply, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserReply, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserReply, error)
	ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserReply, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) DeleteCasesByProblemId(ctx context.Context, in *DeleteCasesByProblemIdRequest, opts ...grpc.CallOption) (*DeleteCasesByProblemIdReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCasesByProblemIdReply)
	err := c.cc.Invoke(ctx, Admin_DeleteCasesByProblemId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateContest(ctx context.Context, in *CreateContestRequest, opts ...grpc.CallOption) (*CreateContestReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateContestReply)
	err := c.cc.Invoke(ctx, Admin_CreateContest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateContest(ctx context.Context, in *UpdateContestRequest, opts ...grpc.CallOption) (*UpdateContestReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateContestReply)
	err := c.cc.Invoke(ctx, Admin_UpdateContest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteContest(ctx context.Context, in *DeleteContestRequest, opts ...grpc.CallOption) (*DeleteContestReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteContestReply)
	err := c.cc.Invoke(ctx, Admin_DeleteContest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetContest(ctx context.Context, in *GetContestRequest, opts ...grpc.CallOption) (*GetContestReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContestReply)
	err := c.cc.Invoke(ctx, Admin_GetContest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListContest(ctx context.Context, in *ListContestRequest, opts ...grpc.CallOption) (*ListContestReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListContestReply)
	err := c.cc.Invoke(ctx, Admin_ListContest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AddContestants(ctx context.Context, in *AddContestantsRequest, opts ...grpc.CallOption) (*AddContestantsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddContestantsReply)
	err := c.cc.Invoke(ctx, Admin_AddContestants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ManualRanking(ctx context.Context, in *ManualRankingRequest, opts ...grpc.CallOption) (*ManualRankingReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ManualRankingReply)
	err := c.cc.Invoke(ctx, Admin_ManualRanking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetRanking(ctx context.Context, in *GetRankingRequest, opts ...grpc.CallOption) (*GetRankingReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRankingReply)
	err := c.cc.Invoke(ctx, Admin_GetRanking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGroupReply)
	err := c.cc.Invoke(ctx, Admin_CreateGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*UpdateGroupReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateGroupReply)
	err := c.cc.Invoke(ctx, Admin_UpdateGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteGroupReply)
	err := c.cc.Invoke(ctx, Admin_DeleteGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGroupReply)
	err := c.cc.Invoke(ctx, Admin_GetGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListGroup(ctx context.Context, in *ListGroupRequest, opts ...grpc.CallOption) (*ListGroupReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGroupReply)
	err := c.cc.Invoke(ctx, Admin_ListGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SubmitJudge(ctx context.Context, in *SubmitJudgeRequest, opts ...grpc.CallOption) (*SubmitJudgeReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitJudgeReply)
	err := c.cc.Invoke(ctx, Admin_SubmitJudge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetJudgableProblems(ctx context.Context, in *GetJudgableProblemsRequest, opts ...grpc.CallOption) (*GetJudgableProblemsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetJudgableProblemsReply)
	err := c.cc.Invoke(ctx, Admin_GetJudgableProblems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetSubmissions(ctx context.Context, in *GetSubmissionsRequest, opts ...grpc.CallOption) (*GetSubmissionsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubmissionsReply)
	err := c.cc.Invoke(ctx, Admin_GetSubmissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateJudger(ctx context.Context, in *UpdateJudgerRequest, opts ...grpc.CallOption) (*UpdateJudgerReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateJudgerReply)
	err := c.cc.Invoke(ctx, Admin_UpdateJudger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetJudger(ctx context.Context, in *GetJudgerRequest, opts ...grpc.CallOption) (*GetJudgerReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetJudgerReply)
	err := c.cc.Invoke(ctx, Admin_GetJudger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateProblem(ctx context.Context, in *CreateProblemRequest, opts ...grpc.CallOption) (*CreateProblemReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProblemReply)
	err := c.cc.Invoke(ctx, Admin_CreateProblem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateProblem(ctx context.Context, in *UpdateProblemRequest, opts ...grpc.CallOption) (*UpdateProblemReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProblemReply)
	err := c.cc.Invoke(ctx, Admin_UpdateProblem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteProblem(ctx context.Context, in *DeleteProblemRequest, opts ...grpc.CallOption) (*DeleteProblemReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProblemReply)
	err := c.cc.Invoke(ctx, Admin_DeleteProblem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListProblem(ctx context.Context, in *ListProblemRequest, opts ...grpc.CallOption) (*ListProblemReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProblemReply)
	err := c.cc.Invoke(ctx, Admin_ListProblem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetProblem(ctx context.Context, in *GetProblemRequest, opts ...grpc.CallOption) (*GetProblemReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProblemReply)
	err := c.cc.Invoke(ctx, Admin_GetProblem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetProblemTypes(ctx context.Context, in *GetProblemTypesRequest, opts ...grpc.CallOption) (*GetProblemTypesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProblemTypesReply)
	err := c.cc.Invoke(ctx, Admin_GetProblemTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserReply)
	err := c.cc.Invoke(ctx, Admin_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) BatchCreateUser(ctx context.Context, in *BatchCreateUserRequest, opts ...grpc.CallOption) (*BatchCreateUserReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchCreateUserReply)
	err := c.cc.Invoke(ctx, Admin_BatchCreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserReply)
	err := c.cc.Invoke(ctx, Admin_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserReply)
	err := c.cc.Invoke(ctx, Admin_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserReply)
	err := c.cc.Invoke(ctx, Admin_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserReply)
	err := c.cc.Invoke(ctx, Admin_ListUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations must embed UnimplementedAdminServer
// for forward compatibility.
type AdminServer interface {
	DeleteCasesByProblemId(context.Context, *DeleteCasesByProblemIdRequest) (*DeleteCasesByProblemIdReply, error)
	CreateContest(context.Context, *CreateContestRequest) (*CreateContestReply, error)
	UpdateContest(context.Context, *UpdateContestRequest) (*UpdateContestReply, error)
	DeleteContest(context.Context, *DeleteContestRequest) (*DeleteContestReply, error)
	GetContest(context.Context, *GetContestRequest) (*GetContestReply, error)
	ListContest(context.Context, *ListContestRequest) (*ListContestReply, error)
	AddContestants(context.Context, *AddContestantsRequest) (*AddContestantsReply, error)
	ManualRanking(context.Context, *ManualRankingRequest) (*ManualRankingReply, error)
	GetRanking(context.Context, *GetRankingRequest) (*GetRankingReply, error)
	CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupReply, error)
	UpdateGroup(context.Context, *UpdateGroupRequest) (*UpdateGroupReply, error)
	DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupReply, error)
	GetGroup(context.Context, *GetGroupRequest) (*GetGroupReply, error)
	ListGroup(context.Context, *ListGroupRequest) (*ListGroupReply, error)
	SubmitJudge(context.Context, *SubmitJudgeRequest) (*SubmitJudgeReply, error)
	GetJudgableProblems(context.Context, *GetJudgableProblemsRequest) (*GetJudgableProblemsReply, error)
	GetSubmissions(context.Context, *GetSubmissionsRequest) (*GetSubmissionsReply, error)
	UpdateJudger(context.Context, *UpdateJudgerRequest) (*UpdateJudgerReply, error)
	GetJudger(context.Context, *GetJudgerRequest) (*GetJudgerReply, error)
	CreateProblem(context.Context, *CreateProblemRequest) (*CreateProblemReply, error)
	UpdateProblem(context.Context, *UpdateProblemRequest) (*UpdateProblemReply, error)
	DeleteProblem(context.Context, *DeleteProblemRequest) (*DeleteProblemReply, error)
	ListProblem(context.Context, *ListProblemRequest) (*ListProblemReply, error)
	GetProblem(context.Context, *GetProblemRequest) (*GetProblemReply, error)
	GetProblemTypes(context.Context, *GetProblemTypesRequest) (*GetProblemTypesReply, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserReply, error)
	BatchCreateUser(context.Context, *BatchCreateUserRequest) (*BatchCreateUserReply, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserReply, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserReply, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserReply, error)
	ListUser(context.Context, *ListUserRequest) (*ListUserReply, error)
	mustEmbedUnimplementedAdminServer()
}

// UnimplementedAdminServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdminServer struct{}

func (UnimplementedAdminServer) DeleteCasesByProblemId(context.Context, *DeleteCasesByProblemIdRequest) (*DeleteCasesByProblemIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCasesByProblemId not implemented")
}
func (UnimplementedAdminServer) CreateContest(context.Context, *CreateContestRequest) (*CreateContestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContest not implemented")
}
func (UnimplementedAdminServer) UpdateContest(context.Context, *UpdateContestRequest) (*UpdateContestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContest not implemented")
}
func (UnimplementedAdminServer) DeleteContest(context.Context, *DeleteContestRequest) (*DeleteContestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContest not implemented")
}
func (UnimplementedAdminServer) GetContest(context.Context, *GetContestRequest) (*GetContestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContest not implemented")
}
func (UnimplementedAdminServer) ListContest(context.Context, *ListContestRequest) (*ListContestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContest not implemented")
}
func (UnimplementedAdminServer) AddContestants(context.Context, *AddContestantsRequest) (*AddContestantsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddContestants not implemented")
}
func (UnimplementedAdminServer) ManualRanking(context.Context, *ManualRankingRequest) (*ManualRankingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManualRanking not implemented")
}
func (UnimplementedAdminServer) GetRanking(context.Context, *GetRankingRequest) (*GetRankingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRanking not implemented")
}
func (UnimplementedAdminServer) CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedAdminServer) UpdateGroup(context.Context, *UpdateGroupRequest) (*UpdateGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedAdminServer) DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedAdminServer) GetGroup(context.Context, *GetGroupRequest) (*GetGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedAdminServer) ListGroup(context.Context, *ListGroupRequest) (*ListGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroup not implemented")
}
func (UnimplementedAdminServer) SubmitJudge(context.Context, *SubmitJudgeRequest) (*SubmitJudgeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitJudge not implemented")
}
func (UnimplementedAdminServer) GetJudgableProblems(context.Context, *GetJudgableProblemsRequest) (*GetJudgableProblemsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJudgableProblems not implemented")
}
func (UnimplementedAdminServer) GetSubmissions(context.Context, *GetSubmissionsRequest) (*GetSubmissionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubmissions not implemented")
}
func (UnimplementedAdminServer) UpdateJudger(context.Context, *UpdateJudgerRequest) (*UpdateJudgerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJudger not implemented")
}
func (UnimplementedAdminServer) GetJudger(context.Context, *GetJudgerRequest) (*GetJudgerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJudger not implemented")
}
func (UnimplementedAdminServer) CreateProblem(context.Context, *CreateProblemRequest) (*CreateProblemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProblem not implemented")
}
func (UnimplementedAdminServer) UpdateProblem(context.Context, *UpdateProblemRequest) (*UpdateProblemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProblem not implemented")
}
func (UnimplementedAdminServer) DeleteProblem(context.Context, *DeleteProblemRequest) (*DeleteProblemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProblem not implemented")
}
func (UnimplementedAdminServer) ListProblem(context.Context, *ListProblemRequest) (*ListProblemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProblem not implemented")
}
func (UnimplementedAdminServer) GetProblem(context.Context, *GetProblemRequest) (*GetProblemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProblem not implemented")
}
func (UnimplementedAdminServer) GetProblemTypes(context.Context, *GetProblemTypesRequest) (*GetProblemTypesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProblemTypes not implemented")
}
func (UnimplementedAdminServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedAdminServer) BatchCreateUser(context.Context, *BatchCreateUserRequest) (*BatchCreateUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateUser not implemented")
}
func (UnimplementedAdminServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedAdminServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedAdminServer) GetUser(context.Context, *GetUserRequest) (*GetUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedAdminServer) ListUser(context.Context, *ListUserRequest) (*ListUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (UnimplementedAdminServer) mustEmbedUnimplementedAdminServer() {}
func (UnimplementedAdminServer) testEmbeddedByValue()               {}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	// If the following call pancis, it indicates UnimplementedAdminServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_DeleteCasesByProblemId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCasesByProblemIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteCasesByProblemId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DeleteCasesByProblemId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteCasesByProblemId(ctx, req.(*DeleteCasesByProblemIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_CreateContest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateContest(ctx, req.(*CreateContestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_UpdateContest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateContest(ctx, req.(*UpdateContestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DeleteContest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteContest(ctx, req.(*DeleteContestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetContest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetContest(ctx, req.(*GetContestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_ListContest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListContest(ctx, req.(*ListContestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AddContestants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddContestantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AddContestants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_AddContestants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AddContestants(ctx, req.(*AddContestantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ManualRanking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManualRankingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ManualRanking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_ManualRanking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ManualRanking(ctx, req.(*ManualRankingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetRanking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRankingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetRanking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetRanking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetRanking(ctx, req.(*GetRankingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_UpdateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateGroup(ctx, req.(*UpdateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteGroup(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetGroup(ctx, req.(*GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_ListGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListGroup(ctx, req.(*ListGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SubmitJudge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitJudgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SubmitJudge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SubmitJudge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SubmitJudge(ctx, req.(*SubmitJudgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetJudgableProblems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJudgableProblemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetJudgableProblems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetJudgableProblems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetJudgableProblems(ctx, req.(*GetJudgableProblemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetSubmissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubmissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetSubmissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetSubmissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetSubmissions(ctx, req.(*GetSubmissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateJudger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJudgerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateJudger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_UpdateJudger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateJudger(ctx, req.(*UpdateJudgerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetJudger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJudgerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetJudger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetJudger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetJudger(ctx, req.(*GetJudgerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_CreateProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateProblem(ctx, req.(*CreateProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_UpdateProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateProblem(ctx, req.(*UpdateProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DeleteProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteProblem(ctx, req.(*DeleteProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_ListProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListProblem(ctx, req.(*ListProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetProblem(ctx, req.(*GetProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetProblemTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProblemTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetProblemTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetProblemTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetProblemTypes(ctx, req.(*GetProblemTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_BatchCreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).BatchCreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_BatchCreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).BatchCreateUser(ctx, req.(*BatchCreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_ListUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListUser(ctx, req.(*ListUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.sastoj.admin.admin.service.v1.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteCasesByProblemId",
			Handler:    _Admin_DeleteCasesByProblemId_Handler,
		},
		{
			MethodName: "CreateContest",
			Handler:    _Admin_CreateContest_Handler,
		},
		{
			MethodName: "UpdateContest",
			Handler:    _Admin_UpdateContest_Handler,
		},
		{
			MethodName: "DeleteContest",
			Handler:    _Admin_DeleteContest_Handler,
		},
		{
			MethodName: "GetContest",
			Handler:    _Admin_GetContest_Handler,
		},
		{
			MethodName: "ListContest",
			Handler:    _Admin_ListContest_Handler,
		},
		{
			MethodName: "AddContestants",
			Handler:    _Admin_AddContestants_Handler,
		},
		{
			MethodName: "ManualRanking",
			Handler:    _Admin_ManualRanking_Handler,
		},
		{
			MethodName: "GetRanking",
			Handler:    _Admin_GetRanking_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _Admin_CreateGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _Admin_UpdateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _Admin_DeleteGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _Admin_GetGroup_Handler,
		},
		{
			MethodName: "ListGroup",
			Handler:    _Admin_ListGroup_Handler,
		},
		{
			MethodName: "SubmitJudge",
			Handler:    _Admin_SubmitJudge_Handler,
		},
		{
			MethodName: "GetJudgableProblems",
			Handler:    _Admin_GetJudgableProblems_Handler,
		},
		{
			MethodName: "GetSubmissions",
			Handler:    _Admin_GetSubmissions_Handler,
		},
		{
			MethodName: "UpdateJudger",
			Handler:    _Admin_UpdateJudger_Handler,
		},
		{
			MethodName: "GetJudger",
			Handler:    _Admin_GetJudger_Handler,
		},
		{
			MethodName: "CreateProblem",
			Handler:    _Admin_CreateProblem_Handler,
		},
		{
			MethodName: "UpdateProblem",
			Handler:    _Admin_UpdateProblem_Handler,
		},
		{
			MethodName: "DeleteProblem",
			Handler:    _Admin_DeleteProblem_Handler,
		},
		{
			MethodName: "ListProblem",
			Handler:    _Admin_ListProblem_Handler,
		},
		{
			MethodName: "GetProblem",
			Handler:    _Admin_GetProblem_Handler,
		},
		{
			MethodName: "GetProblemTypes",
			Handler:    _Admin_GetProblemTypes_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Admin_CreateUser_Handler,
		},
		{
			MethodName: "BatchCreateUser",
			Handler:    _Admin_BatchCreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Admin_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Admin_DeleteUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Admin_GetUser_Handler,
		},
		{
			MethodName: "ListUser",
			Handler:    _Admin_ListUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/admin/service/v1/admin.proto",
}
