// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             (unknown)
// source: sastoj/admin/admin/service/v1/admin.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAdminAddContestants = "/api.sastoj.admin.admin.service.v1.Admin/AddContestants"
const OperationAdminBatchCreateUser = "/api.sastoj.admin.admin.service.v1.Admin/BatchCreateUser"
const OperationAdminCreateContest = "/api.sastoj.admin.admin.service.v1.Admin/CreateContest"
const OperationAdminCreateGroup = "/api.sastoj.admin.admin.service.v1.Admin/CreateGroup"
const OperationAdminCreateProblem = "/api.sastoj.admin.admin.service.v1.Admin/CreateProblem"
const OperationAdminCreateUser = "/api.sastoj.admin.admin.service.v1.Admin/CreateUser"
const OperationAdminDeleteCasesByProblemId = "/api.sastoj.admin.admin.service.v1.Admin/DeleteCasesByProblemId"
const OperationAdminDeleteContest = "/api.sastoj.admin.admin.service.v1.Admin/DeleteContest"
const OperationAdminDeleteGroup = "/api.sastoj.admin.admin.service.v1.Admin/DeleteGroup"
const OperationAdminDeleteProblem = "/api.sastoj.admin.admin.service.v1.Admin/DeleteProblem"
const OperationAdminDeleteUser = "/api.sastoj.admin.admin.service.v1.Admin/DeleteUser"
const OperationAdminGetAdjudicator = "/api.sastoj.admin.admin.service.v1.Admin/GetAdjudicator"
const OperationAdminGetContest = "/api.sastoj.admin.admin.service.v1.Admin/GetContest"
const OperationAdminGetGroup = "/api.sastoj.admin.admin.service.v1.Admin/GetGroup"
const OperationAdminGetJudgableProblems = "/api.sastoj.admin.admin.service.v1.Admin/GetJudgableProblems"
const OperationAdminGetProblem = "/api.sastoj.admin.admin.service.v1.Admin/GetProblem"
const OperationAdminGetProblemTypes = "/api.sastoj.admin.admin.service.v1.Admin/GetProblemTypes"
const OperationAdminGetRanking = "/api.sastoj.admin.admin.service.v1.Admin/GetRanking"
const OperationAdminGetReferenceAnswer = "/api.sastoj.admin.admin.service.v1.Admin/GetReferenceAnswer"
const OperationAdminGetSubmissions = "/api.sastoj.admin.admin.service.v1.Admin/GetSubmissions"
const OperationAdminGetUser = "/api.sastoj.admin.admin.service.v1.Admin/GetUser"
const OperationAdminListContest = "/api.sastoj.admin.admin.service.v1.Admin/ListContest"
const OperationAdminListGroup = "/api.sastoj.admin.admin.service.v1.Admin/ListGroup"
const OperationAdminListProblem = "/api.sastoj.admin.admin.service.v1.Admin/ListProblem"
const OperationAdminListUser = "/api.sastoj.admin.admin.service.v1.Admin/ListUser"
const OperationAdminManualRanking = "/api.sastoj.admin.admin.service.v1.Admin/ManualRanking"
const OperationAdminSubmitJudge = "/api.sastoj.admin.admin.service.v1.Admin/SubmitJudge"
const OperationAdminUpdateAdjudicator = "/api.sastoj.admin.admin.service.v1.Admin/UpdateAdjudicator"
const OperationAdminUpdateContest = "/api.sastoj.admin.admin.service.v1.Admin/UpdateContest"
const OperationAdminUpdateGroup = "/api.sastoj.admin.admin.service.v1.Admin/UpdateGroup"
const OperationAdminUpdateProblem = "/api.sastoj.admin.admin.service.v1.Admin/UpdateProblem"
const OperationAdminUpdateUser = "/api.sastoj.admin.admin.service.v1.Admin/UpdateUser"

type AdminHTTPServer interface {
	AddContestants(context.Context, *AddContestantsRequest) (*AddContestantsReply, error)
	BatchCreateUser(context.Context, *BatchCreateUserRequest) (*BatchCreateUserReply, error)
	CreateContest(context.Context, *CreateContestRequest) (*CreateContestReply, error)
	CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupReply, error)
	CreateProblem(context.Context, *CreateProblemRequest) (*CreateProblemReply, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserReply, error)
	DeleteCasesByProblemId(context.Context, *DeleteCasesByProblemIdRequest) (*DeleteCasesByProblemIdReply, error)
	DeleteContest(context.Context, *DeleteContestRequest) (*DeleteContestReply, error)
	DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupReply, error)
	DeleteProblem(context.Context, *DeleteProblemRequest) (*DeleteProblemReply, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserReply, error)
	GetAdjudicator(context.Context, *GetAdjudicatorRequest) (*GetAdjudicatorReply, error)
	GetContest(context.Context, *GetContestRequest) (*GetContestReply, error)
	GetGroup(context.Context, *GetGroupRequest) (*GetGroupReply, error)
	GetJudgableProblems(context.Context, *GetJudgableProblemsRequest) (*GetJudgableProblemsReply, error)
	GetProblem(context.Context, *GetProblemRequest) (*GetProblemReply, error)
	GetProblemTypes(context.Context, *GetProblemTypesRequest) (*GetProblemTypesReply, error)
	GetRanking(context.Context, *GetRankingRequest) (*GetRankingReply, error)
	GetReferenceAnswer(context.Context, *GetReferenceAnswerRequest) (*GetReferenceAnswerReply, error)
	GetSubmissions(context.Context, *GetSubmissionsRequest) (*GetSubmissionsReply, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserReply, error)
	ListContest(context.Context, *ListContestRequest) (*ListContestReply, error)
	ListGroup(context.Context, *ListGroupRequest) (*ListGroupReply, error)
	ListProblem(context.Context, *ListProblemRequest) (*ListProblemReply, error)
	ListUser(context.Context, *ListUserRequest) (*ListUserReply, error)
	ManualRanking(context.Context, *ManualRankingRequest) (*ManualRankingReply, error)
	SubmitJudge(context.Context, *SubmitJudgeRequest) (*SubmitJudgeReply, error)
	UpdateAdjudicator(context.Context, *UpdateAdjudicatorRequest) (*UpdateAdjudicatorReply, error)
	UpdateContest(context.Context, *UpdateContestRequest) (*UpdateContestReply, error)
	UpdateGroup(context.Context, *UpdateGroupRequest) (*UpdateGroupReply, error)
	UpdateProblem(context.Context, *UpdateProblemRequest) (*UpdateProblemReply, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserReply, error)
}

func RegisterAdminHTTPServer(s *http.Server, srv AdminHTTPServer) {
	r := s.Route("/")
	r.DELETE("/case/{problem_id}", _Admin_DeleteCasesByProblemId0_HTTP_Handler(srv))
	r.POST("/contest", _Admin_CreateContest0_HTTP_Handler(srv))
	r.PUT("/contest", _Admin_UpdateContest0_HTTP_Handler(srv))
	r.DELETE("/contest/{id}", _Admin_DeleteContest0_HTTP_Handler(srv))
	r.GET("/contest/{id}", _Admin_GetContest0_HTTP_Handler(srv))
	r.GET("/contest", _Admin_ListContest0_HTTP_Handler(srv))
	r.POST("/contest/contestants", _Admin_AddContestants0_HTTP_Handler(srv))
	r.POST("/contest/rank", _Admin_ManualRanking0_HTTP_Handler(srv))
	r.GET("/contest/rank/{contest_id}", _Admin_GetRanking0_HTTP_Handler(srv))
	r.POST("/group", _Admin_CreateGroup0_HTTP_Handler(srv))
	r.PUT("/group", _Admin_UpdateGroup0_HTTP_Handler(srv))
	r.DELETE("/group/{id}", _Admin_DeleteGroup0_HTTP_Handler(srv))
	r.GET("/group/{id}", _Admin_GetGroup0_HTTP_Handler(srv))
	r.GET("/group", _Admin_ListGroup0_HTTP_Handler(srv))
	r.POST("/judge/{submission_id}", _Admin_SubmitJudge0_HTTP_Handler(srv))
	r.GET("/judge", _Admin_GetJudgableProblems0_HTTP_Handler(srv))
	r.GET("/judge/{problem_id}", _Admin_GetSubmissions0_HTTP_Handler(srv))
	r.GET("/judge/answer/{problem_id}", _Admin_GetReferenceAnswer0_HTTP_Handler(srv))
	r.POST("/adjudicator/{problem_id}", _Admin_UpdateAdjudicator0_HTTP_Handler(srv))
	r.GET("/adjudicator/{problem_id}", _Admin_GetAdjudicator0_HTTP_Handler(srv))
	r.POST("/problem", _Admin_CreateProblem0_HTTP_Handler(srv))
	r.PUT("/problem", _Admin_UpdateProblem0_HTTP_Handler(srv))
	r.DELETE("/problem/{id}", _Admin_DeleteProblem0_HTTP_Handler(srv))
	r.GET("/problem/list", _Admin_ListProblem0_HTTP_Handler(srv))
	r.GET("/problem/{id}", _Admin_GetProblem0_HTTP_Handler(srv))
	r.GET("/problem-types", _Admin_GetProblemTypes0_HTTP_Handler(srv))
	r.POST("/users", _Admin_CreateUser0_HTTP_Handler(srv))
	r.POST("/users/batch", _Admin_BatchCreateUser0_HTTP_Handler(srv))
	r.PUT("/users", _Admin_UpdateUser0_HTTP_Handler(srv))
	r.DELETE("/users/{id}", _Admin_DeleteUser0_HTTP_Handler(srv))
	r.GET("/users/{id}", _Admin_GetUser0_HTTP_Handler(srv))
	r.GET("/users", _Admin_ListUser0_HTTP_Handler(srv))
}

func _Admin_DeleteCasesByProblemId0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCasesByProblemIdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminDeleteCasesByProblemId)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCasesByProblemId(ctx, req.(*DeleteCasesByProblemIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteCasesByProblemIdReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_CreateContest0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateContestRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminCreateContest)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateContest(ctx, req.(*CreateContestRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateContestReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateContest0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateContestRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminUpdateContest)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateContest(ctx, req.(*UpdateContestRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateContestReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteContest0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteContestRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminDeleteContest)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteContest(ctx, req.(*DeleteContestRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteContestReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetContest0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetContestRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetContest)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetContest(ctx, req.(*GetContestRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetContestReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListContest0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListContestRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminListContest)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListContest(ctx, req.(*ListContestRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListContestReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_AddContestants0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddContestantsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminAddContestants)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddContestants(ctx, req.(*AddContestantsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddContestantsReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ManualRanking0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ManualRankingRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminManualRanking)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ManualRanking(ctx, req.(*ManualRankingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ManualRankingReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetRanking0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRankingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetRanking)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRanking(ctx, req.(*GetRankingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRankingReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_CreateGroup0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateGroupRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminCreateGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateGroup(ctx, req.(*CreateGroupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateGroupReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateGroup0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateGroupRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminUpdateGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateGroup(ctx, req.(*UpdateGroupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateGroupReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteGroup0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteGroupRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminDeleteGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteGroup(ctx, req.(*DeleteGroupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteGroupReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetGroup0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetGroupRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetGroup(ctx, req.(*GetGroupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetGroupReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListGroup0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListGroupRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminListGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListGroup(ctx, req.(*ListGroupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListGroupReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_SubmitJudge0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SubmitJudgeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminSubmitJudge)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SubmitJudge(ctx, req.(*SubmitJudgeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SubmitJudgeReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetJudgableProblems0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetJudgableProblemsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetJudgableProblems)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetJudgableProblems(ctx, req.(*GetJudgableProblemsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetJudgableProblemsReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetSubmissions0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSubmissionsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetSubmissions)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSubmissions(ctx, req.(*GetSubmissionsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSubmissionsReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetReferenceAnswer0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetReferenceAnswerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetReferenceAnswer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetReferenceAnswer(ctx, req.(*GetReferenceAnswerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetReferenceAnswerReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateAdjudicator0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAdjudicatorRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminUpdateAdjudicator)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAdjudicator(ctx, req.(*UpdateAdjudicatorRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateAdjudicatorReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetAdjudicator0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAdjudicatorRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetAdjudicator)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAdjudicator(ctx, req.(*GetAdjudicatorRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAdjudicatorReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_CreateProblem0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateProblemRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminCreateProblem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateProblem(ctx, req.(*CreateProblemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateProblemReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateProblem0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateProblemRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminUpdateProblem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateProblem(ctx, req.(*UpdateProblemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateProblemReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteProblem0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteProblemRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminDeleteProblem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteProblem(ctx, req.(*DeleteProblemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteProblemReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListProblem0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListProblemRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminListProblem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListProblem(ctx, req.(*ListProblemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListProblemReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetProblem0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetProblemRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetProblem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProblem(ctx, req.(*GetProblemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetProblemReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetProblemTypes0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetProblemTypesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetProblemTypes)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProblemTypes(ctx, req.(*GetProblemTypesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetProblemTypesReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_CreateUser0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminCreateUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateUser(ctx, req.(*CreateUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateUserReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_BatchCreateUser0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BatchCreateUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminBatchCreateUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchCreateUser(ctx, req.(*BatchCreateUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BatchCreateUserReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateUser0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminUpdateUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUser(ctx, req.(*UpdateUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateUserReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteUser0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminDeleteUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteUser(ctx, req.(*DeleteUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteUserReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetUser0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUser(ctx, req.(*GetUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListUser0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminListUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUser(ctx, req.(*ListUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserReply)
		return ctx.Result(200, reply)
	}
}

type AdminHTTPClient interface {
	AddContestants(ctx context.Context, req *AddContestantsRequest, opts ...http.CallOption) (rsp *AddContestantsReply, err error)
	BatchCreateUser(ctx context.Context, req *BatchCreateUserRequest, opts ...http.CallOption) (rsp *BatchCreateUserReply, err error)
	CreateContest(ctx context.Context, req *CreateContestRequest, opts ...http.CallOption) (rsp *CreateContestReply, err error)
	CreateGroup(ctx context.Context, req *CreateGroupRequest, opts ...http.CallOption) (rsp *CreateGroupReply, err error)
	CreateProblem(ctx context.Context, req *CreateProblemRequest, opts ...http.CallOption) (rsp *CreateProblemReply, err error)
	CreateUser(ctx context.Context, req *CreateUserRequest, opts ...http.CallOption) (rsp *CreateUserReply, err error)
	DeleteCasesByProblemId(ctx context.Context, req *DeleteCasesByProblemIdRequest, opts ...http.CallOption) (rsp *DeleteCasesByProblemIdReply, err error)
	DeleteContest(ctx context.Context, req *DeleteContestRequest, opts ...http.CallOption) (rsp *DeleteContestReply, err error)
	DeleteGroup(ctx context.Context, req *DeleteGroupRequest, opts ...http.CallOption) (rsp *DeleteGroupReply, err error)
	DeleteProblem(ctx context.Context, req *DeleteProblemRequest, opts ...http.CallOption) (rsp *DeleteProblemReply, err error)
	DeleteUser(ctx context.Context, req *DeleteUserRequest, opts ...http.CallOption) (rsp *DeleteUserReply, err error)
	GetAdjudicator(ctx context.Context, req *GetAdjudicatorRequest, opts ...http.CallOption) (rsp *GetAdjudicatorReply, err error)
	GetContest(ctx context.Context, req *GetContestRequest, opts ...http.CallOption) (rsp *GetContestReply, err error)
	GetGroup(ctx context.Context, req *GetGroupRequest, opts ...http.CallOption) (rsp *GetGroupReply, err error)
	GetJudgableProblems(ctx context.Context, req *GetJudgableProblemsRequest, opts ...http.CallOption) (rsp *GetJudgableProblemsReply, err error)
	GetProblem(ctx context.Context, req *GetProblemRequest, opts ...http.CallOption) (rsp *GetProblemReply, err error)
	GetProblemTypes(ctx context.Context, req *GetProblemTypesRequest, opts ...http.CallOption) (rsp *GetProblemTypesReply, err error)
	GetRanking(ctx context.Context, req *GetRankingRequest, opts ...http.CallOption) (rsp *GetRankingReply, err error)
	GetReferenceAnswer(ctx context.Context, req *GetReferenceAnswerRequest, opts ...http.CallOption) (rsp *GetReferenceAnswerReply, err error)
	GetSubmissions(ctx context.Context, req *GetSubmissionsRequest, opts ...http.CallOption) (rsp *GetSubmissionsReply, err error)
	GetUser(ctx context.Context, req *GetUserRequest, opts ...http.CallOption) (rsp *GetUserReply, err error)
	ListContest(ctx context.Context, req *ListContestRequest, opts ...http.CallOption) (rsp *ListContestReply, err error)
	ListGroup(ctx context.Context, req *ListGroupRequest, opts ...http.CallOption) (rsp *ListGroupReply, err error)
	ListProblem(ctx context.Context, req *ListProblemRequest, opts ...http.CallOption) (rsp *ListProblemReply, err error)
	ListUser(ctx context.Context, req *ListUserRequest, opts ...http.CallOption) (rsp *ListUserReply, err error)
	ManualRanking(ctx context.Context, req *ManualRankingRequest, opts ...http.CallOption) (rsp *ManualRankingReply, err error)
	SubmitJudge(ctx context.Context, req *SubmitJudgeRequest, opts ...http.CallOption) (rsp *SubmitJudgeReply, err error)
	UpdateAdjudicator(ctx context.Context, req *UpdateAdjudicatorRequest, opts ...http.CallOption) (rsp *UpdateAdjudicatorReply, err error)
	UpdateContest(ctx context.Context, req *UpdateContestRequest, opts ...http.CallOption) (rsp *UpdateContestReply, err error)
	UpdateGroup(ctx context.Context, req *UpdateGroupRequest, opts ...http.CallOption) (rsp *UpdateGroupReply, err error)
	UpdateProblem(ctx context.Context, req *UpdateProblemRequest, opts ...http.CallOption) (rsp *UpdateProblemReply, err error)
	UpdateUser(ctx context.Context, req *UpdateUserRequest, opts ...http.CallOption) (rsp *UpdateUserReply, err error)
}

type AdminHTTPClientImpl struct {
	cc *http.Client
}

func NewAdminHTTPClient(client *http.Client) AdminHTTPClient {
	return &AdminHTTPClientImpl{client}
}

func (c *AdminHTTPClientImpl) AddContestants(ctx context.Context, in *AddContestantsRequest, opts ...http.CallOption) (*AddContestantsReply, error) {
	var out AddContestantsReply
	pattern := "/contest/contestants"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminAddContestants))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) BatchCreateUser(ctx context.Context, in *BatchCreateUserRequest, opts ...http.CallOption) (*BatchCreateUserReply, error) {
	var out BatchCreateUserReply
	pattern := "/users/batch"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminBatchCreateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) CreateContest(ctx context.Context, in *CreateContestRequest, opts ...http.CallOption) (*CreateContestReply, error) {
	var out CreateContestReply
	pattern := "/contest"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminCreateContest))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...http.CallOption) (*CreateGroupReply, error) {
	var out CreateGroupReply
	pattern := "/group"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminCreateGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) CreateProblem(ctx context.Context, in *CreateProblemRequest, opts ...http.CallOption) (*CreateProblemReply, error) {
	var out CreateProblemReply
	pattern := "/problem"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminCreateProblem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...http.CallOption) (*CreateUserReply, error) {
	var out CreateUserReply
	pattern := "/users"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminCreateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) DeleteCasesByProblemId(ctx context.Context, in *DeleteCasesByProblemIdRequest, opts ...http.CallOption) (*DeleteCasesByProblemIdReply, error) {
	var out DeleteCasesByProblemIdReply
	pattern := "/case/{problem_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminDeleteCasesByProblemId))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) DeleteContest(ctx context.Context, in *DeleteContestRequest, opts ...http.CallOption) (*DeleteContestReply, error) {
	var out DeleteContestReply
	pattern := "/contest/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminDeleteContest))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...http.CallOption) (*DeleteGroupReply, error) {
	var out DeleteGroupReply
	pattern := "/group/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminDeleteGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) DeleteProblem(ctx context.Context, in *DeleteProblemRequest, opts ...http.CallOption) (*DeleteProblemReply, error) {
	var out DeleteProblemReply
	pattern := "/problem/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminDeleteProblem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...http.CallOption) (*DeleteUserReply, error) {
	var out DeleteUserReply
	pattern := "/users/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminDeleteUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) GetAdjudicator(ctx context.Context, in *GetAdjudicatorRequest, opts ...http.CallOption) (*GetAdjudicatorReply, error) {
	var out GetAdjudicatorReply
	pattern := "/adjudicator/{problem_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetAdjudicator))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) GetContest(ctx context.Context, in *GetContestRequest, opts ...http.CallOption) (*GetContestReply, error) {
	var out GetContestReply
	pattern := "/contest/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetContest))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...http.CallOption) (*GetGroupReply, error) {
	var out GetGroupReply
	pattern := "/group/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) GetJudgableProblems(ctx context.Context, in *GetJudgableProblemsRequest, opts ...http.CallOption) (*GetJudgableProblemsReply, error) {
	var out GetJudgableProblemsReply
	pattern := "/judge"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetJudgableProblems))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) GetProblem(ctx context.Context, in *GetProblemRequest, opts ...http.CallOption) (*GetProblemReply, error) {
	var out GetProblemReply
	pattern := "/problem/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetProblem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) GetProblemTypes(ctx context.Context, in *GetProblemTypesRequest, opts ...http.CallOption) (*GetProblemTypesReply, error) {
	var out GetProblemTypesReply
	pattern := "/problem-types"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetProblemTypes))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) GetRanking(ctx context.Context, in *GetRankingRequest, opts ...http.CallOption) (*GetRankingReply, error) {
	var out GetRankingReply
	pattern := "/contest/rank/{contest_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetRanking))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) GetReferenceAnswer(ctx context.Context, in *GetReferenceAnswerRequest, opts ...http.CallOption) (*GetReferenceAnswerReply, error) {
	var out GetReferenceAnswerReply
	pattern := "/judge/answer/{problem_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetReferenceAnswer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) GetSubmissions(ctx context.Context, in *GetSubmissionsRequest, opts ...http.CallOption) (*GetSubmissionsReply, error) {
	var out GetSubmissionsReply
	pattern := "/judge/{problem_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetSubmissions))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) GetUser(ctx context.Context, in *GetUserRequest, opts ...http.CallOption) (*GetUserReply, error) {
	var out GetUserReply
	pattern := "/users/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) ListContest(ctx context.Context, in *ListContestRequest, opts ...http.CallOption) (*ListContestReply, error) {
	var out ListContestReply
	pattern := "/contest"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminListContest))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) ListGroup(ctx context.Context, in *ListGroupRequest, opts ...http.CallOption) (*ListGroupReply, error) {
	var out ListGroupReply
	pattern := "/group"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminListGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) ListProblem(ctx context.Context, in *ListProblemRequest, opts ...http.CallOption) (*ListProblemReply, error) {
	var out ListProblemReply
	pattern := "/problem/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminListProblem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) ListUser(ctx context.Context, in *ListUserRequest, opts ...http.CallOption) (*ListUserReply, error) {
	var out ListUserReply
	pattern := "/users"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminListUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) ManualRanking(ctx context.Context, in *ManualRankingRequest, opts ...http.CallOption) (*ManualRankingReply, error) {
	var out ManualRankingReply
	pattern := "/contest/rank"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminManualRanking))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) SubmitJudge(ctx context.Context, in *SubmitJudgeRequest, opts ...http.CallOption) (*SubmitJudgeReply, error) {
	var out SubmitJudgeReply
	pattern := "/judge/{submission_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminSubmitJudge))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) UpdateAdjudicator(ctx context.Context, in *UpdateAdjudicatorRequest, opts ...http.CallOption) (*UpdateAdjudicatorReply, error) {
	var out UpdateAdjudicatorReply
	pattern := "/adjudicator/{problem_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminUpdateAdjudicator))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) UpdateContest(ctx context.Context, in *UpdateContestRequest, opts ...http.CallOption) (*UpdateContestReply, error) {
	var out UpdateContestReply
	pattern := "/contest"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminUpdateContest))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...http.CallOption) (*UpdateGroupReply, error) {
	var out UpdateGroupReply
	pattern := "/group"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminUpdateGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) UpdateProblem(ctx context.Context, in *UpdateProblemRequest, opts ...http.CallOption) (*UpdateProblemReply, error) {
	var out UpdateProblemReply
	pattern := "/problem"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminUpdateProblem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...http.CallOption) (*UpdateUserReply, error) {
	var out UpdateUserReply
	pattern := "/users"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminUpdateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
