// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/sastoj/admin/case/service/v1/case.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Case with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Case) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Case with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CaseMultiError, or nil if none found.
func (m *Case) ValidateAll() error {
	return m.validate(true)
}

func (m *Case) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Point

	// no validation rules for Index

	// no validation rules for IsAuto

	if len(errors) > 0 {
		return CaseMultiError(errors)
	}

	return nil
}

// CaseMultiError is an error wrapping multiple validation errors returned by
// Case.ValidateAll() if the designated constraints aren't met.
type CaseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CaseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CaseMultiError) AllErrors() []error { return m }

// CaseValidationError is the validation error returned by Case.Validate if the
// designated constraints aren't met.
type CaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CaseValidationError) ErrorName() string { return "CaseValidationError" }

// Error satisfies the builtin error interface
func (e CaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCase.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CaseValidationError{}

// Validate checks the field values on CreateCasesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCasesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCasesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCasesRequestMultiError, or nil if none found.
func (m *CreateCasesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCasesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProblemId

	for idx, item := range m.GetRequests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateCasesRequestValidationError{
						field:  fmt.Sprintf("Requests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateCasesRequestValidationError{
						field:  fmt.Sprintf("Requests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateCasesRequestValidationError{
					field:  fmt.Sprintf("Requests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateCasesRequestMultiError(errors)
	}

	return nil
}

// CreateCasesRequestMultiError is an error wrapping multiple validation errors
// returned by CreateCasesRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateCasesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCasesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCasesRequestMultiError) AllErrors() []error { return m }

// CreateCasesRequestValidationError is the validation error returned by
// CreateCasesRequest.Validate if the designated constraints aren't met.
type CreateCasesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCasesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCasesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCasesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCasesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCasesRequestValidationError) ErrorName() string {
	return "CreateCasesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCasesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCasesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCasesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCasesRequestValidationError{}

// Validate checks the field values on CreateCasesReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateCasesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCasesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCasesReplyMultiError, or nil if none found.
func (m *CreateCasesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCasesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateCasesReplyMultiError(errors)
	}

	return nil
}

// CreateCasesReplyMultiError is an error wrapping multiple validation errors
// returned by CreateCasesReply.ValidateAll() if the designated constraints
// aren't met.
type CreateCasesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCasesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCasesReplyMultiError) AllErrors() []error { return m }

// CreateCasesReplyValidationError is the validation error returned by
// CreateCasesReply.Validate if the designated constraints aren't met.
type CreateCasesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCasesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCasesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCasesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCasesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCasesReplyValidationError) ErrorName() string { return "CreateCasesReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateCasesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCasesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCasesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCasesReplyValidationError{}

// Validate checks the field values on UpdateCaseRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateCaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCaseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCaseRequestMultiError, or nil if none found.
func (m *UpdateCaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Point

	// no validation rules for Index

	// no validation rules for IsAuto

	// no validation rules for ProblemId

	if len(errors) > 0 {
		return UpdateCaseRequestMultiError(errors)
	}

	return nil
}

// UpdateCaseRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateCaseRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateCaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCaseRequestMultiError) AllErrors() []error { return m }

// UpdateCaseRequestValidationError is the validation error returned by
// UpdateCaseRequest.Validate if the designated constraints aren't met.
type UpdateCaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCaseRequestValidationError) ErrorName() string {
	return "UpdateCaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCaseRequestValidationError{}

// Validate checks the field values on UpdateCaseReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateCaseReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCaseReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCaseReplyMultiError, or nil if none found.
func (m *UpdateCaseReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCaseReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCaseReplyMultiError(errors)
	}

	return nil
}

// UpdateCaseReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateCaseReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateCaseReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCaseReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCaseReplyMultiError) AllErrors() []error { return m }

// UpdateCaseReplyValidationError is the validation error returned by
// UpdateCaseReply.Validate if the designated constraints aren't met.
type UpdateCaseReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCaseReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCaseReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCaseReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCaseReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCaseReplyValidationError) ErrorName() string { return "UpdateCaseReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateCaseReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCaseReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCaseReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCaseReplyValidationError{}

// Validate checks the field values on DeleteCaseByCaseIdsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCaseByCaseIdsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCaseByCaseIdsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCaseByCaseIdsRequestMultiError, or nil if none found.
func (m *DeleteCaseByCaseIdsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCaseByCaseIdsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCaseByCaseIdsRequestMultiError(errors)
	}

	return nil
}

// DeleteCaseByCaseIdsRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteCaseByCaseIdsRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteCaseByCaseIdsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCaseByCaseIdsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCaseByCaseIdsRequestMultiError) AllErrors() []error { return m }

// DeleteCaseByCaseIdsRequestValidationError is the validation error returned
// by DeleteCaseByCaseIdsRequest.Validate if the designated constraints aren't met.
type DeleteCaseByCaseIdsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCaseByCaseIdsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCaseByCaseIdsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCaseByCaseIdsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCaseByCaseIdsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCaseByCaseIdsRequestValidationError) ErrorName() string {
	return "DeleteCaseByCaseIdsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCaseByCaseIdsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCaseByCaseIdsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCaseByCaseIdsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCaseByCaseIdsRequestValidationError{}

// Validate checks the field values on DeleteCaseByCaseIdsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCaseByCaseIdsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCaseByCaseIdsReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCaseByCaseIdsReplyMultiError, or nil if none found.
func (m *DeleteCaseByCaseIdsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCaseByCaseIdsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCaseByCaseIdsReplyMultiError(errors)
	}

	return nil
}

// DeleteCaseByCaseIdsReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteCaseByCaseIdsReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteCaseByCaseIdsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCaseByCaseIdsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCaseByCaseIdsReplyMultiError) AllErrors() []error { return m }

// DeleteCaseByCaseIdsReplyValidationError is the validation error returned by
// DeleteCaseByCaseIdsReply.Validate if the designated constraints aren't met.
type DeleteCaseByCaseIdsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCaseByCaseIdsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCaseByCaseIdsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCaseByCaseIdsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCaseByCaseIdsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCaseByCaseIdsReplyValidationError) ErrorName() string {
	return "DeleteCaseByCaseIdsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCaseByCaseIdsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCaseByCaseIdsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCaseByCaseIdsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCaseByCaseIdsReplyValidationError{}

// Validate checks the field values on DeleteCasesByProblemIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCasesByProblemIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCasesByProblemIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteCasesByProblemIdRequestMultiError, or nil if none found.
func (m *DeleteCasesByProblemIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCasesByProblemIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProblemId

	if len(errors) > 0 {
		return DeleteCasesByProblemIdRequestMultiError(errors)
	}

	return nil
}

// DeleteCasesByProblemIdRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteCasesByProblemIdRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteCasesByProblemIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCasesByProblemIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCasesByProblemIdRequestMultiError) AllErrors() []error { return m }

// DeleteCasesByProblemIdRequestValidationError is the validation error
// returned by DeleteCasesByProblemIdRequest.Validate if the designated
// constraints aren't met.
type DeleteCasesByProblemIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCasesByProblemIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCasesByProblemIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCasesByProblemIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCasesByProblemIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCasesByProblemIdRequestValidationError) ErrorName() string {
	return "DeleteCasesByProblemIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCasesByProblemIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCasesByProblemIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCasesByProblemIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCasesByProblemIdRequestValidationError{}

// Validate checks the field values on DeleteCasesByProblemIdReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCasesByProblemIdReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCasesByProblemIdReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCasesByProblemIdReplyMultiError, or nil if none found.
func (m *DeleteCasesByProblemIdReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCasesByProblemIdReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCasesByProblemIdReplyMultiError(errors)
	}

	return nil
}

// DeleteCasesByProblemIdReplyMultiError is an error wrapping multiple
// validation errors returned by DeleteCasesByProblemIdReply.ValidateAll() if
// the designated constraints aren't met.
type DeleteCasesByProblemIdReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCasesByProblemIdReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCasesByProblemIdReplyMultiError) AllErrors() []error { return m }

// DeleteCasesByProblemIdReplyValidationError is the validation error returned
// by DeleteCasesByProblemIdReply.Validate if the designated constraints
// aren't met.
type DeleteCasesByProblemIdReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCasesByProblemIdReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCasesByProblemIdReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCasesByProblemIdReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCasesByProblemIdReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCasesByProblemIdReplyValidationError) ErrorName() string {
	return "DeleteCasesByProblemIdReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCasesByProblemIdReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCasesByProblemIdReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCasesByProblemIdReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCasesByProblemIdReplyValidationError{}

// Validate checks the field values on GetCasesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCasesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCasesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCasesRequestMultiError, or nil if none found.
func (m *GetCasesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCasesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProblemId

	if len(errors) > 0 {
		return GetCasesRequestMultiError(errors)
	}

	return nil
}

// GetCasesRequestMultiError is an error wrapping multiple validation errors
// returned by GetCasesRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCasesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCasesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCasesRequestMultiError) AllErrors() []error { return m }

// GetCasesRequestValidationError is the validation error returned by
// GetCasesRequest.Validate if the designated constraints aren't met.
type GetCasesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCasesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCasesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCasesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCasesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCasesRequestValidationError) ErrorName() string { return "GetCasesRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetCasesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCasesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCasesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCasesRequestValidationError{}

// Validate checks the field values on GetCasesReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCasesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCasesReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetCasesReplyMultiError, or
// nil if none found.
func (m *GetCasesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCasesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCasesReplyValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCasesReplyValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCasesReplyValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCasesReplyMultiError(errors)
	}

	return nil
}

// GetCasesReplyMultiError is an error wrapping multiple validation errors
// returned by GetCasesReply.ValidateAll() if the designated constraints
// aren't met.
type GetCasesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCasesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCasesReplyMultiError) AllErrors() []error { return m }

// GetCasesReplyValidationError is the validation error returned by
// GetCasesReply.Validate if the designated constraints aren't met.
type GetCasesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCasesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCasesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCasesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCasesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCasesReplyValidationError) ErrorName() string { return "GetCasesReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetCasesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCasesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCasesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCasesReplyValidationError{}
