// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             (unknown)
// source: admin/case/service/v1/case.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCaseServiceDeleteCasesByProblemId = "/api.sastoj.admin.case.service.v1.CaseService/DeleteCasesByProblemId"

type CaseServiceHTTPServer interface {
	DeleteCasesByProblemId(context.Context, *DeleteCasesByProblemIdRequest) (*DeleteCasesByProblemIdReply, error)
}

func RegisterCaseServiceHTTPServer(s *http.Server, srv CaseServiceHTTPServer) {
	r := s.Route("/")
	r.DELETE("/case/{problem_id}", _CaseService_DeleteCasesByProblemId0_HTTP_Handler(srv))
}

func _CaseService_DeleteCasesByProblemId0_HTTP_Handler(srv CaseServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCasesByProblemIdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCaseServiceDeleteCasesByProblemId)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCasesByProblemId(ctx, req.(*DeleteCasesByProblemIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteCasesByProblemIdReply)
		return ctx.Result(200, reply)
	}
}

type CaseServiceHTTPClient interface {
	DeleteCasesByProblemId(ctx context.Context, req *DeleteCasesByProblemIdRequest, opts ...http.CallOption) (rsp *DeleteCasesByProblemIdReply, err error)
}

type CaseServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewCaseServiceHTTPClient(client *http.Client) CaseServiceHTTPClient {
	return &CaseServiceHTTPClientImpl{client}
}

func (c *CaseServiceHTTPClientImpl) DeleteCasesByProblemId(ctx context.Context, in *DeleteCasesByProblemIdRequest, opts ...http.CallOption) (*DeleteCasesByProblemIdReply, error) {
	var out DeleteCasesByProblemIdReply
	pattern := "/case/{problem_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCaseServiceDeleteCasesByProblemId))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
