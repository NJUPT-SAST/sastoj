// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: sastoj/admin/contest/service/v1/contest.proto

package contest

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateContestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateContestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateContestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateContestRequestMultiError, or nil if none found.
func (m *CreateContestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateContestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Status

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateContestRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateContestRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateContestRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateContestRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateContestRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateContestRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Language

	// no validation rules for ExtraTime

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateContestRequestValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateContestRequestValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateContestRequestValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateContestRequestMultiError(errors)
	}

	return nil
}

// CreateContestRequestMultiError is an error wrapping multiple validation
// errors returned by CreateContestRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateContestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateContestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateContestRequestMultiError) AllErrors() []error { return m }

// CreateContestRequestValidationError is the validation error returned by
// CreateContestRequest.Validate if the designated constraints aren't met.
type CreateContestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateContestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateContestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateContestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateContestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateContestRequestValidationError) ErrorName() string {
	return "CreateContestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateContestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateContestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateContestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateContestRequestValidationError{}

// Validate checks the field values on CreateContestReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateContestReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateContestReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateContestReplyMultiError, or nil if none found.
func (m *CreateContestReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateContestReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateContestReplyMultiError(errors)
	}

	return nil
}

// CreateContestReplyMultiError is an error wrapping multiple validation errors
// returned by CreateContestReply.ValidateAll() if the designated constraints
// aren't met.
type CreateContestReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateContestReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateContestReplyMultiError) AllErrors() []error { return m }

// CreateContestReplyValidationError is the validation error returned by
// CreateContestReply.Validate if the designated constraints aren't met.
type CreateContestReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateContestReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateContestReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateContestReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateContestReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateContestReplyValidationError) ErrorName() string {
	return "CreateContestReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateContestReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateContestReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateContestReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateContestReplyValidationError{}

// Validate checks the field values on UpdateContestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateContestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateContestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateContestRequestMultiError, or nil if none found.
func (m *UpdateContestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateContestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Status

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateContestRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateContestRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateContestRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateContestRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateContestRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateContestRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Language

	// no validation rules for ExtraTime

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateContestRequestValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateContestRequestValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateContestRequestValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateContestRequestMultiError(errors)
	}

	return nil
}

// UpdateContestRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateContestRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateContestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateContestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateContestRequestMultiError) AllErrors() []error { return m }

// UpdateContestRequestValidationError is the validation error returned by
// UpdateContestRequest.Validate if the designated constraints aren't met.
type UpdateContestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateContestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateContestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateContestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateContestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateContestRequestValidationError) ErrorName() string {
	return "UpdateContestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateContestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateContestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateContestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateContestRequestValidationError{}

// Validate checks the field values on UpdateContestReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateContestReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateContestReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateContestReplyMultiError, or nil if none found.
func (m *UpdateContestReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateContestReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdateContestReplyMultiError(errors)
	}

	return nil
}

// UpdateContestReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateContestReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateContestReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateContestReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateContestReplyMultiError) AllErrors() []error { return m }

// UpdateContestReplyValidationError is the validation error returned by
// UpdateContestReply.Validate if the designated constraints aren't met.
type UpdateContestReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateContestReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateContestReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateContestReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateContestReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateContestReplyValidationError) ErrorName() string {
	return "UpdateContestReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateContestReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateContestReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateContestReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateContestReplyValidationError{}

// Validate checks the field values on DeleteContestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteContestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteContestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteContestRequestMultiError, or nil if none found.
func (m *DeleteContestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteContestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteContestRequestMultiError(errors)
	}

	return nil
}

// DeleteContestRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteContestRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteContestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteContestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteContestRequestMultiError) AllErrors() []error { return m }

// DeleteContestRequestValidationError is the validation error returned by
// DeleteContestRequest.Validate if the designated constraints aren't met.
type DeleteContestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteContestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteContestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteContestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteContestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteContestRequestValidationError) ErrorName() string {
	return "DeleteContestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteContestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteContestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteContestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteContestRequestValidationError{}

// Validate checks the field values on DeleteContestReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteContestReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteContestReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteContestReplyMultiError, or nil if none found.
func (m *DeleteContestReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteContestReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteContestReplyMultiError(errors)
	}

	return nil
}

// DeleteContestReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteContestReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteContestReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteContestReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteContestReplyMultiError) AllErrors() []error { return m }

// DeleteContestReplyValidationError is the validation error returned by
// DeleteContestReply.Validate if the designated constraints aren't met.
type DeleteContestReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteContestReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteContestReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteContestReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteContestReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteContestReplyValidationError) ErrorName() string {
	return "DeleteContestReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteContestReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteContestReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteContestReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteContestReplyValidationError{}

// Validate checks the field values on GetContestRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetContestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetContestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetContestRequestMultiError, or nil if none found.
func (m *GetContestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetContestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetContestRequestMultiError(errors)
	}

	return nil
}

// GetContestRequestMultiError is an error wrapping multiple validation errors
// returned by GetContestRequest.ValidateAll() if the designated constraints
// aren't met.
type GetContestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetContestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetContestRequestMultiError) AllErrors() []error { return m }

// GetContestRequestValidationError is the validation error returned by
// GetContestRequest.Validate if the designated constraints aren't met.
type GetContestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetContestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetContestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetContestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetContestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetContestRequestValidationError) ErrorName() string {
	return "GetContestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetContestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetContestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetContestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetContestRequestValidationError{}

// Validate checks the field values on GetContestReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetContestReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetContestReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetContestReplyMultiError, or nil if none found.
func (m *GetContestReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetContestReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Status

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetContestReplyValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetContestReplyValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetContestReplyValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetContestReplyValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetContestReplyValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetContestReplyValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Language

	// no validation rules for ExtraTime

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetContestReplyValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetContestReplyValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetContestReplyValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetContestReplyMultiError(errors)
	}

	return nil
}

// GetContestReplyMultiError is an error wrapping multiple validation errors
// returned by GetContestReply.ValidateAll() if the designated constraints
// aren't met.
type GetContestReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetContestReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetContestReplyMultiError) AllErrors() []error { return m }

// GetContestReplyValidationError is the validation error returned by
// GetContestReply.Validate if the designated constraints aren't met.
type GetContestReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetContestReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetContestReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetContestReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetContestReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetContestReplyValidationError) ErrorName() string { return "GetContestReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetContestReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetContestReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetContestReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetContestReplyValidationError{}

// Validate checks the field values on ListContestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListContestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListContestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListContestRequestMultiError, or nil if none found.
func (m *ListContestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSize() <= -1 {
		err := ListContestRequestValidationError{
			field:  "Size",
			reason: "value must be greater than -1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCurrent() <= -1 {
		err := ListContestRequestValidationError{
			field:  "Current",
			reason: "value must be greater than -1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListContestRequestMultiError(errors)
	}

	return nil
}

// ListContestRequestMultiError is an error wrapping multiple validation errors
// returned by ListContestRequest.ValidateAll() if the designated constraints
// aren't met.
type ListContestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContestRequestMultiError) AllErrors() []error { return m }

// ListContestRequestValidationError is the validation error returned by
// ListContestRequest.Validate if the designated constraints aren't met.
type ListContestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContestRequestValidationError) ErrorName() string {
	return "ListContestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListContestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContestRequestValidationError{}

// Validate checks the field values on ListContestReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListContestReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListContestReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListContestReplyMultiError, or nil if none found.
func (m *ListContestReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContestReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetContests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListContestReplyValidationError{
						field:  fmt.Sprintf("Contests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListContestReplyValidationError{
						field:  fmt.Sprintf("Contests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListContestReplyValidationError{
					field:  fmt.Sprintf("Contests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListContestReplyMultiError(errors)
	}

	return nil
}

// ListContestReplyMultiError is an error wrapping multiple validation errors
// returned by ListContestReply.ValidateAll() if the designated constraints
// aren't met.
type ListContestReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContestReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContestReplyMultiError) AllErrors() []error { return m }

// ListContestReplyValidationError is the validation error returned by
// ListContestReply.Validate if the designated constraints aren't met.
type ListContestReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContestReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContestReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContestReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContestReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContestReplyValidationError) ErrorName() string { return "ListContestReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListContestReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContestReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContestReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContestReplyValidationError{}

// Validate checks the field values on AddContestantsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddContestantsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddContestantsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddContestantsRequestMultiError, or nil if none found.
func (m *AddContestantsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddContestantsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for ContestId

	if _, ok := _AddContestantsRequest_Role_InLookup[m.GetRole()]; !ok {
		err := AddContestantsRequestValidationError{
			field:  "Role",
			reason: "value must be in list [0 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddContestantsRequestMultiError(errors)
	}

	return nil
}

// AddContestantsRequestMultiError is an error wrapping multiple validation
// errors returned by AddContestantsRequest.ValidateAll() if the designated
// constraints aren't met.
type AddContestantsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddContestantsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddContestantsRequestMultiError) AllErrors() []error { return m }

// AddContestantsRequestValidationError is the validation error returned by
// AddContestantsRequest.Validate if the designated constraints aren't met.
type AddContestantsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddContestantsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddContestantsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddContestantsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddContestantsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddContestantsRequestValidationError) ErrorName() string {
	return "AddContestantsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddContestantsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddContestantsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddContestantsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddContestantsRequestValidationError{}

var _AddContestantsRequest_Role_InLookup = map[int32]struct{}{
	0: {},
	1: {},
}

// Validate checks the field values on AddContestantsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddContestantsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddContestantsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddContestantsReplyMultiError, or nil if none found.
func (m *AddContestantsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddContestantsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return AddContestantsReplyMultiError(errors)
	}

	return nil
}

// AddContestantsReplyMultiError is an error wrapping multiple validation
// errors returned by AddContestantsReply.ValidateAll() if the designated
// constraints aren't met.
type AddContestantsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddContestantsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddContestantsReplyMultiError) AllErrors() []error { return m }

// AddContestantsReplyValidationError is the validation error returned by
// AddContestantsReply.Validate if the designated constraints aren't met.
type AddContestantsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddContestantsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddContestantsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddContestantsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddContestantsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddContestantsReplyValidationError) ErrorName() string {
	return "AddContestantsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AddContestantsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddContestantsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddContestantsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddContestantsReplyValidationError{}

// Validate checks the field values on ListContestReply_Contest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListContestReply_Contest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListContestReply_Contest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListContestReply_ContestMultiError, or nil if none found.
func (m *ListContestReply_Contest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContestReply_Contest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Status

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListContestReply_ContestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListContestReply_ContestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListContestReply_ContestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListContestReply_ContestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListContestReply_ContestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListContestReply_ContestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Language

	// no validation rules for ExtraTime

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListContestReply_ContestValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListContestReply_ContestValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListContestReply_ContestValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListContestReply_ContestMultiError(errors)
	}

	return nil
}

// ListContestReply_ContestMultiError is an error wrapping multiple validation
// errors returned by ListContestReply_Contest.ValidateAll() if the designated
// constraints aren't met.
type ListContestReply_ContestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContestReply_ContestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContestReply_ContestMultiError) AllErrors() []error { return m }

// ListContestReply_ContestValidationError is the validation error returned by
// ListContestReply_Contest.Validate if the designated constraints aren't met.
type ListContestReply_ContestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContestReply_ContestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContestReply_ContestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContestReply_ContestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContestReply_ContestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContestReply_ContestValidationError) ErrorName() string {
	return "ListContestReply_ContestValidationError"
}

// Error satisfies the builtin error interface
func (e ListContestReply_ContestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContestReply_Contest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContestReply_ContestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContestReply_ContestValidationError{}
