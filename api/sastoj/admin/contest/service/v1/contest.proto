syntax = "proto3";

package api.sastoj.admin.contest;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "errors/errors.proto";
import "validate/validate.proto";
option go_package = "sastoj/api/sastoj/admin/contest;contest";
option java_multiple_files = true;
option java_package = "api.sastoj.admin.contest";

service Contest {
	rpc CreateContest (CreateContestRequest) returns (CreateContestReply){
		option (google.api.http) = {
			post: "/contest"
			body: "*"
		};
	}
	rpc UpdateContest (UpdateContestRequest) returns (UpdateContestReply){
		option (google.api.http) = {
			put: "/contest"
			body: "*"
		};
	}
	rpc DeleteContest (DeleteContestRequest) returns (DeleteContestReply){
		option (google.api.http) = {
			delete: "/contest/{id}"
		};
	}
	rpc GetContest (GetContestRequest) returns (GetContestReply){
		option (google.api.http) = {
			get: "/contest/{id}"
		};
	}
	rpc ListContest (ListContestRequest) returns (ListContestReply){
		option (google.api.http) = {
			get: "/contest"
		};
	}

	rpc AddContestants (AddContestantsRequest) returns (AddContestantsReply){
		option (google.api.http) = {
			post: "/contest/contestants"
			body: "*"
		};
	}
}
enum ErrorReason {
	// 设置缺省错误码
	option (errors.default_code) = 500;

	// 为某个枚举单独设置错误码
	SERVER_ERROR = 0 [(errors.code) = 500];
	INVALID_ARGUMENT = 1 [(errors.code) = 400];
	CONTENT_MISSING = 2 [(errors.code) = 400];


	CONTEST_NOT_FOUND = 3 [(errors.code) = 404];
	CONTEST_INVALID = 4 [(errors.code) = 400];
	CONTEST_EXISTED = 5 [(errors.code) = 400];

	GROUP_NOT_FOUND = 6 [(errors.code) = 404];
}
message CreateContestRequest {
	string title = 1;
	string description = 2;
	int32 status = 3 ;
	int32 type = 4;
	google.protobuf.Timestamp start_time = 5;
	google.protobuf.Timestamp end_time = 6;
	string language = 7;
	int32 extra_time = 8;
	google.protobuf.Timestamp create_time = 9;

}
message CreateContestReply {
	int64 id = 1;
}

message UpdateContestRequest {
	int64 id = 1;
	string title = 2;
	string description = 3;
	int32 status = 4;
	int32 type = 5;
	google.protobuf.Timestamp start_time = 6;
	google.protobuf.Timestamp end_time = 7;
	string language = 8;
	int32 extra_time = 9;
	google.protobuf.Timestamp create_time = 10;
}
message UpdateContestReply {
	bool success = 1;
}

message DeleteContestRequest {
	int64 id = 1;
}
message DeleteContestReply {
	bool success = 1;
}

message GetContestRequest {
	int64 id = 1 ;
}
message GetContestReply {
	int64 id = 1;
	string title = 2;
	string description = 3;
	int32 status = 4;
	int32 type = 5;
	google.protobuf.Timestamp start_time = 6;
	google.protobuf.Timestamp end_time = 7;
	string language = 8;
	int32 extra_time = 9;
	google.protobuf.Timestamp create_time = 10;
}

message ListContestRequest {
	int64 size = 1 [(validate.rules).int64 = {gt: -1}];
	int64 current = 2[(validate.rules).int64 = {gt: -1}];
}
message ListContestReply {
	message Contest{
		int64 id = 1;
		string title = 2;
		string description = 3;
		int32 status = 4;
		int32 type = 5;
		google.protobuf.Timestamp start_time = 6;
		google.protobuf.Timestamp end_time = 7;
		string language = 8;
		int32 extra_time = 9;
		google.protobuf.Timestamp create_time = 10;
	}
	repeated Contest contests = 1;
}

message AddContestantsRequest {
	int64 group_id = 1;
  int64 contest_id = 2;
	int32 role = 3 [(validate.rules).int32 =  {in: [0,1]}];
}
message AddContestantsReply {
	bool success = 1;
}