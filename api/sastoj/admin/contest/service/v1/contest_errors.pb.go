// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package contest

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 为某个枚举单独设置错误码
func IsServerError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SERVER_ERROR.String() && e.Code == 500
}

// 为某个枚举单独设置错误码
func ErrorServerError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_SERVER_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsInvalidArgument(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_ARGUMENT.String() && e.Code == 400
}

func ErrorInvalidArgument(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_INVALID_ARGUMENT.String(), fmt.Sprintf(format, args...))
}

func IsContentMissing(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CONTENT_MISSING.String() && e.Code == 400
}

func ErrorContentMissing(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_CONTENT_MISSING.String(), fmt.Sprintf(format, args...))
}

func IsContestNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CONTEST_NOT_FOUND.String() && e.Code == 404
}

func ErrorContestNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_CONTEST_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsContestInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CONTEST_INVALID.String() && e.Code == 400
}

func ErrorContestInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_CONTEST_INVALID.String(), fmt.Sprintf(format, args...))
}

func IsContestExisted(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CONTEST_EXISTED.String() && e.Code == 400
}

func ErrorContestExisted(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_CONTEST_EXISTED.String(), fmt.Sprintf(format, args...))
}

func IsGroupNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GROUP_NOT_FOUND.String() && e.Code == 404
}

func ErrorGroupNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_GROUP_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}
