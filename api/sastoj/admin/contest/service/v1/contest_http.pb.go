// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.26.1
// source: sastoj/admin/contest/contest.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationContestCreateContest = "/api.sastoj.admin.contest.Contest/CreateContest"
const OperationContestDeleteContest = "/api.sastoj.admin.contest.Contest/DeleteContest"
const OperationContestGetContest = "/api.sastoj.admin.contest.Contest/GetContest"
const OperationContestListContest = "/api.sastoj.admin.contest.Contest/ListContest"
const OperationContestUpdateContest = "/api.sastoj.admin.contest.Contest/UpdateContest"

type ContestHTTPServer interface {
	CreateContest(context.Context, *CreateContestRequest) (*CreateContestReply, error)
	DeleteContest(context.Context, *DeleteContestRequest) (*DeleteContestReply, error)
	GetContest(context.Context, *GetContestRequest) (*GetContestReply, error)
	ListContest(context.Context, *ListContestRequest) (*ListContestReply, error)
	UpdateContest(context.Context, *UpdateContestRequest) (*UpdateContestReply, error)
}

func RegisterContestHTTPServer(s *http.Server, srv ContestHTTPServer) {
	r := s.Route("/")
	r.POST("/contest", _Contest_CreateContest0_HTTP_Handler(srv))
	r.PUT("/contest", _Contest_UpdateContest0_HTTP_Handler(srv))
	r.DELETE("/contest/{id}", _Contest_DeleteContest0_HTTP_Handler(srv))
	r.GET("/contest/{id}", _Contest_GetContest0_HTTP_Handler(srv))
	r.GET("/contest", _Contest_ListContest0_HTTP_Handler(srv))
}

func _Contest_CreateContest0_HTTP_Handler(srv ContestHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateContestRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContestCreateContest)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateContest(ctx, req.(*CreateContestRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateContestReply)
		return ctx.Result(200, reply)
	}
}

func _Contest_UpdateContest0_HTTP_Handler(srv ContestHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateContestRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContestUpdateContest)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateContest(ctx, req.(*UpdateContestRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateContestReply)
		return ctx.Result(200, reply)
	}
}

func _Contest_DeleteContest0_HTTP_Handler(srv ContestHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteContestRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContestDeleteContest)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteContest(ctx, req.(*DeleteContestRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteContestReply)
		return ctx.Result(200, reply)
	}
}

func _Contest_GetContest0_HTTP_Handler(srv ContestHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetContestRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContestGetContest)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetContest(ctx, req.(*GetContestRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetContestReply)
		return ctx.Result(200, reply)
	}
}

func _Contest_ListContest0_HTTP_Handler(srv ContestHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListContestRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContestListContest)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListContest(ctx, req.(*ListContestRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListContestReply)
		return ctx.Result(200, reply)
	}
}

type ContestHTTPClient interface {
	CreateContest(ctx context.Context, req *CreateContestRequest, opts ...http.CallOption) (rsp *CreateContestReply, err error)
	DeleteContest(ctx context.Context, req *DeleteContestRequest, opts ...http.CallOption) (rsp *DeleteContestReply, err error)
	GetContest(ctx context.Context, req *GetContestRequest, opts ...http.CallOption) (rsp *GetContestReply, err error)
	ListContest(ctx context.Context, req *ListContestRequest, opts ...http.CallOption) (rsp *ListContestReply, err error)
	UpdateContest(ctx context.Context, req *UpdateContestRequest, opts ...http.CallOption) (rsp *UpdateContestReply, err error)
}

type ContestHTTPClientImpl struct {
	cc *http.Client
}

func NewContestHTTPClient(client *http.Client) ContestHTTPClient {
	return &ContestHTTPClientImpl{client}
}

func (c *ContestHTTPClientImpl) CreateContest(ctx context.Context, in *CreateContestRequest, opts ...http.CallOption) (*CreateContestReply, error) {
	var out CreateContestReply
	pattern := "/contest"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationContestCreateContest))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContestHTTPClientImpl) DeleteContest(ctx context.Context, in *DeleteContestRequest, opts ...http.CallOption) (*DeleteContestReply, error) {
	var out DeleteContestReply
	pattern := "/contest/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationContestDeleteContest))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContestHTTPClientImpl) GetContest(ctx context.Context, in *GetContestRequest, opts ...http.CallOption) (*GetContestReply, error) {
	var out GetContestReply
	pattern := "/contest/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationContestGetContest))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContestHTTPClientImpl) ListContest(ctx context.Context, in *ListContestRequest, opts ...http.CallOption) (*ListContestReply, error) {
	var out ListContestReply
	pattern := "/contest"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationContestListContest))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContestHTTPClientImpl) UpdateContest(ctx context.Context, in *UpdateContestRequest, opts ...http.CallOption) (*UpdateContestReply, error) {
	var out UpdateContestReply
	pattern := "/contest"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationContestUpdateContest))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
