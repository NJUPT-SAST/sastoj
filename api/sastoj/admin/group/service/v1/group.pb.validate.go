// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: admin/group/service/v1/group.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGroupRequestMultiError, or nil if none found.
func (m *CreateGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for IsRoot

	if len(errors) > 0 {
		return CreateGroupRequestMultiError(errors)
	}

	return nil
}

// CreateGroupRequestMultiError is an error wrapping multiple validation errors
// returned by CreateGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGroupRequestMultiError) AllErrors() []error { return m }

// CreateGroupRequestValidationError is the validation error returned by
// CreateGroupRequest.Validate if the designated constraints aren't met.
type CreateGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGroupRequestValidationError) ErrorName() string {
	return "CreateGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGroupRequestValidationError{}

// Validate checks the field values on CreateGroupReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGroupReplyMultiError, or nil if none found.
func (m *CreateGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateGroupReplyMultiError(errors)
	}

	return nil
}

// CreateGroupReplyMultiError is an error wrapping multiple validation errors
// returned by CreateGroupReply.ValidateAll() if the designated constraints
// aren't met.
type CreateGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGroupReplyMultiError) AllErrors() []error { return m }

// CreateGroupReplyValidationError is the validation error returned by
// CreateGroupReply.Validate if the designated constraints aren't met.
type CreateGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGroupReplyValidationError) ErrorName() string { return "CreateGroupReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGroupReplyValidationError{}

// Validate checks the field values on UpdateGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGroupRequestMultiError, or nil if none found.
func (m *UpdateGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for IsRoot

	if len(errors) > 0 {
		return UpdateGroupRequestMultiError(errors)
	}

	return nil
}

// UpdateGroupRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGroupRequestMultiError) AllErrors() []error { return m }

// UpdateGroupRequestValidationError is the validation error returned by
// UpdateGroupRequest.Validate if the designated constraints aren't met.
type UpdateGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupRequestValidationError) ErrorName() string {
	return "UpdateGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupRequestValidationError{}

// Validate checks the field values on UpdateGroupReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGroupReplyMultiError, or nil if none found.
func (m *UpdateGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdateGroupReplyMultiError(errors)
	}

	return nil
}

// UpdateGroupReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateGroupReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGroupReplyMultiError) AllErrors() []error { return m }

// UpdateGroupReplyValidationError is the validation error returned by
// UpdateGroupReply.Validate if the designated constraints aren't met.
type UpdateGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupReplyValidationError) ErrorName() string { return "UpdateGroupReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupReplyValidationError{}

// Validate checks the field values on DeleteGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGroupRequestMultiError, or nil if none found.
func (m *DeleteGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteGroupRequestMultiError(errors)
	}

	return nil
}

// DeleteGroupRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGroupRequestMultiError) AllErrors() []error { return m }

// DeleteGroupRequestValidationError is the validation error returned by
// DeleteGroupRequest.Validate if the designated constraints aren't met.
type DeleteGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGroupRequestValidationError) ErrorName() string {
	return "DeleteGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGroupRequestValidationError{}

// Validate checks the field values on DeleteGroupReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGroupReplyMultiError, or nil if none found.
func (m *DeleteGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteGroupReplyMultiError(errors)
	}

	return nil
}

// DeleteGroupReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteGroupReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGroupReplyMultiError) AllErrors() []error { return m }

// DeleteGroupReplyValidationError is the validation error returned by
// DeleteGroupReply.Validate if the designated constraints aren't met.
type DeleteGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGroupReplyValidationError) ErrorName() string { return "DeleteGroupReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGroupReplyValidationError{}

// Validate checks the field values on GetGroupRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupRequestMultiError, or nil if none found.
func (m *GetGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetGroupRequestMultiError(errors)
	}

	return nil
}

// GetGroupRequestMultiError is an error wrapping multiple validation errors
// returned by GetGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type GetGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupRequestMultiError) AllErrors() []error { return m }

// GetGroupRequestValidationError is the validation error returned by
// GetGroupRequest.Validate if the designated constraints aren't met.
type GetGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupRequestValidationError) ErrorName() string { return "GetGroupRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupRequestValidationError{}

// Validate checks the field values on GetGroupReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetGroupReplyMultiError, or
// nil if none found.
func (m *GetGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for IsRoot

	if len(errors) > 0 {
		return GetGroupReplyMultiError(errors)
	}

	return nil
}

// GetGroupReplyMultiError is an error wrapping multiple validation errors
// returned by GetGroupReply.ValidateAll() if the designated constraints
// aren't met.
type GetGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupReplyMultiError) AllErrors() []error { return m }

// GetGroupReplyValidationError is the validation error returned by
// GetGroupReply.Validate if the designated constraints aren't met.
type GetGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupReplyValidationError) ErrorName() string { return "GetGroupReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupReplyValidationError{}

// Validate checks the field values on ListGroupRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGroupRequestMultiError, or nil if none found.
func (m *ListGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSize() <= -1 {
		err := ListGroupRequestValidationError{
			field:  "Size",
			reason: "value must be greater than -1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCurrent() <= -1 {
		err := ListGroupRequestValidationError{
			field:  "Current",
			reason: "value must be greater than -1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListGroupRequestMultiError(errors)
	}

	return nil
}

// ListGroupRequestMultiError is an error wrapping multiple validation errors
// returned by ListGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type ListGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGroupRequestMultiError) AllErrors() []error { return m }

// ListGroupRequestValidationError is the validation error returned by
// ListGroupRequest.Validate if the designated constraints aren't met.
type ListGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGroupRequestValidationError) ErrorName() string { return "ListGroupRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGroupRequestValidationError{}

// Validate checks the field values on ListGroupReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGroupReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListGroupReplyMultiError,
// or nil if none found.
func (m *ListGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGroupReplyValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGroupReplyValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGroupReplyValidationError{
					field:  fmt.Sprintf("Groups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListGroupReplyMultiError(errors)
	}

	return nil
}

// ListGroupReplyMultiError is an error wrapping multiple validation errors
// returned by ListGroupReply.ValidateAll() if the designated constraints
// aren't met.
type ListGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGroupReplyMultiError) AllErrors() []error { return m }

// ListGroupReplyValidationError is the validation error returned by
// ListGroupReply.Validate if the designated constraints aren't met.
type ListGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGroupReplyValidationError) ErrorName() string { return "ListGroupReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGroupReplyValidationError{}

// Validate checks the field values on ListGroupReply_Group with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGroupReply_Group) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGroupReply_Group with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGroupReply_GroupMultiError, or nil if none found.
func (m *ListGroupReply_Group) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGroupReply_Group) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for IsRoot

	if len(errors) > 0 {
		return ListGroupReply_GroupMultiError(errors)
	}

	return nil
}

// ListGroupReply_GroupMultiError is an error wrapping multiple validation
// errors returned by ListGroupReply_Group.ValidateAll() if the designated
// constraints aren't met.
type ListGroupReply_GroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGroupReply_GroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGroupReply_GroupMultiError) AllErrors() []error { return m }

// ListGroupReply_GroupValidationError is the validation error returned by
// ListGroupReply_Group.Validate if the designated constraints aren't met.
type ListGroupReply_GroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGroupReply_GroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGroupReply_GroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGroupReply_GroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGroupReply_GroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGroupReply_GroupValidationError) ErrorName() string {
	return "ListGroupReply_GroupValidationError"
}

// Error satisfies the builtin error interface
func (e ListGroupReply_GroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGroupReply_Group.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGroupReply_GroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGroupReply_GroupValidationError{}
