syntax = "proto3";

package api.sastoj.admin.group.service.v1;

import "google/api/annotations.proto";
import "errors/errors.proto";
import "validate/validate.proto";
option go_package = "sastoj/api/sastoj/admin/group/service/v1;v1";
option java_multiple_files = true;
option java_package = "api.sastoj.admin.group.service.v1";

service Group {
  rpc CreateGroup (CreateGroupRequest) returns (CreateGroupReply) {
    option (google.api.http) = {
      post: "/group",
      body: "*"
    };
  };
  rpc UpdateGroup (UpdateGroupRequest) returns (UpdateGroupReply){
    option (google.api.http) = {
      put: "/group",
      body: "*"
    };
  };
  rpc DeleteGroup (DeleteGroupRequest) returns (DeleteGroupReply){
    option (google.api.http) = {
      delete: "/group/{id}";
    };
  }
  rpc GetGroup (GetGroupRequest) returns (GetGroupReply) {
    option (google.api.http) = {
      get: "/group/{id}"
    };
  };
  rpc ListGroup (ListGroupRequest) returns (ListGroupReply){
    option (google.api.http) = {
      get: "/group"
    };
  };
}
enum ErrorReason {
  // 设置缺省错误码
  option (errors.default_code) = 500;

  // 为某个枚举单独设置错误码
  SERVER_ERROR = 0 [(errors.code) = 500];
  INVALID_ARGUMENT = 1 [(errors.code) = 400];
  CONTENT_MISSING = 2 [(errors.code) = 400];


  GROUP_NOT_FOUND = 3 [(errors.code) = 404];
  GROUP_INVALID = 4 [(errors.code) = 400];
  GROUP_EXISTED = 5 [(errors.code) = 400];

}
message CreateGroupRequest {
  string name = 1;
  bool is_root = 2;
  repeated int64 manage = 3;
  repeated int64 contests = 4;
  repeated int64 problems = 5;
}
message CreateGroupReply {
  int64 id = 1;
}

message UpdateGroupRequest {
  int64 id = 1;
  string name = 2;
  bool is_root = 3;
  repeated int64 manage = 4;
  repeated int64 contests = 5;
  repeated int64 problems = 6;
}
message UpdateGroupReply {
  bool success = 1;
}

message DeleteGroupRequest {
  int64 id = 1;
}
message DeleteGroupReply {
  bool success = 1;
}

message GetGroupRequest {
  int64 id = 1;
}
message GetGroupReply {
  int64 id = 1;
  string name = 2;
  bool is_root = 3;
  repeated int64 manage = 4;
  repeated int64 contests = 5;
  repeated int64 problems = 6;
}

message ListGroupRequest {
  int64 size = 1 [(validate.rules).int64 = {gt: -1}];
  int64 current = 2 [(validate.rules).int64 = {gt: -1}];
}
message ListGroupReply {
  message Group {
    int64 id = 1;
    string name = 2;
    bool is_root = 3;
    repeated int64 manage = 4;
    repeated int64 contests = 5;
    repeated int64 problems = 6;
  }
  repeated Group groups = 1;
}