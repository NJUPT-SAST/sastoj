// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/sastoj/admin/judge/service/v1/judge.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Problem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Problem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Problem with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProblemMultiError, or nil if none found.
func (m *Problem) ValidateAll() error {
	return m.validate(true)
}

func (m *Problem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for Point

	// no validation rules for ContestId

	// no validation rules for CaseVersion

	// no validation rules for Index

	// no validation rules for Config

	if len(errors) > 0 {
		return ProblemMultiError(errors)
	}

	return nil
}

// ProblemMultiError is an error wrapping multiple validation errors returned
// by Problem.ValidateAll() if the designated constraints aren't met.
type ProblemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProblemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProblemMultiError) AllErrors() []error { return m }

// ProblemValidationError is the validation error returned by Problem.Validate
// if the designated constraints aren't met.
type ProblemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProblemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProblemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProblemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProblemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProblemValidationError) ErrorName() string { return "ProblemValidationError" }

// Error satisfies the builtin error interface
func (e ProblemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProblem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProblemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProblemValidationError{}

// Validate checks the field values on Submission with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Submission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Submission with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SubmissionMultiError, or
// nil if none found.
func (m *Submission) ValidateAll() error {
	return m.validate(true)
}

func (m *Submission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Code

	// no validation rules for Status

	// no validation rules for Point

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubmissionValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubmissionValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmissionValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubmissionMultiError(errors)
	}

	return nil
}

// SubmissionMultiError is an error wrapping multiple validation errors
// returned by Submission.ValidateAll() if the designated constraints aren't met.
type SubmissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmissionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmissionMultiError) AllErrors() []error { return m }

// SubmissionValidationError is the validation error returned by
// Submission.Validate if the designated constraints aren't met.
type SubmissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmissionValidationError) ErrorName() string { return "SubmissionValidationError" }

// Error satisfies the builtin error interface
func (e SubmissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmissionValidationError{}

// Validate checks the field values on SubmitJudgeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubmitJudgeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubmitJudgeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubmitJudgeRequestMultiError, or nil if none found.
func (m *SubmitJudgeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitJudgeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SubmissionId

	// no validation rules for Point

	if len(errors) > 0 {
		return SubmitJudgeRequestMultiError(errors)
	}

	return nil
}

// SubmitJudgeRequestMultiError is an error wrapping multiple validation errors
// returned by SubmitJudgeRequest.ValidateAll() if the designated constraints
// aren't met.
type SubmitJudgeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitJudgeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitJudgeRequestMultiError) AllErrors() []error { return m }

// SubmitJudgeRequestValidationError is the validation error returned by
// SubmitJudgeRequest.Validate if the designated constraints aren't met.
type SubmitJudgeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitJudgeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitJudgeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitJudgeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitJudgeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitJudgeRequestValidationError) ErrorName() string {
	return "SubmitJudgeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitJudgeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitJudgeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitJudgeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitJudgeRequestValidationError{}

// Validate checks the field values on SubmitJudgeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubmitJudgeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubmitJudgeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubmitJudgeReplyMultiError, or nil if none found.
func (m *SubmitJudgeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitJudgeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SubmitJudgeReplyMultiError(errors)
	}

	return nil
}

// SubmitJudgeReplyMultiError is an error wrapping multiple validation errors
// returned by SubmitJudgeReply.ValidateAll() if the designated constraints
// aren't met.
type SubmitJudgeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitJudgeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitJudgeReplyMultiError) AllErrors() []error { return m }

// SubmitJudgeReplyValidationError is the validation error returned by
// SubmitJudgeReply.Validate if the designated constraints aren't met.
type SubmitJudgeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitJudgeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitJudgeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitJudgeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitJudgeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitJudgeReplyValidationError) ErrorName() string { return "SubmitJudgeReplyValidationError" }

// Error satisfies the builtin error interface
func (e SubmitJudgeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitJudgeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitJudgeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitJudgeReplyValidationError{}

// Validate checks the field values on GetJudgableProblemsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetJudgableProblemsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJudgableProblemsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJudgableProblemsRequestMultiError, or nil if none found.
func (m *GetJudgableProblemsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJudgableProblemsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetJudgableProblemsRequestMultiError(errors)
	}

	return nil
}

// GetJudgableProblemsRequestMultiError is an error wrapping multiple
// validation errors returned by GetJudgableProblemsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetJudgableProblemsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJudgableProblemsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJudgableProblemsRequestMultiError) AllErrors() []error { return m }

// GetJudgableProblemsRequestValidationError is the validation error returned
// by GetJudgableProblemsRequest.Validate if the designated constraints aren't met.
type GetJudgableProblemsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJudgableProblemsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJudgableProblemsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJudgableProblemsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJudgableProblemsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJudgableProblemsRequestValidationError) ErrorName() string {
	return "GetJudgableProblemsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetJudgableProblemsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJudgableProblemsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJudgableProblemsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJudgableProblemsRequestValidationError{}

// Validate checks the field values on GetJudgableProblemsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetJudgableProblemsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJudgableProblemsReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJudgableProblemsReplyMultiError, or nil if none found.
func (m *GetJudgableProblemsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJudgableProblemsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetJudgableProblemsReplyValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetJudgableProblemsReplyValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetJudgableProblemsReplyValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetJudgableProblemsReplyMultiError(errors)
	}

	return nil
}

// GetJudgableProblemsReplyMultiError is an error wrapping multiple validation
// errors returned by GetJudgableProblemsReply.ValidateAll() if the designated
// constraints aren't met.
type GetJudgableProblemsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJudgableProblemsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJudgableProblemsReplyMultiError) AllErrors() []error { return m }

// GetJudgableProblemsReplyValidationError is the validation error returned by
// GetJudgableProblemsReply.Validate if the designated constraints aren't met.
type GetJudgableProblemsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJudgableProblemsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJudgableProblemsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJudgableProblemsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJudgableProblemsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJudgableProblemsReplyValidationError) ErrorName() string {
	return "GetJudgableProblemsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetJudgableProblemsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJudgableProblemsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJudgableProblemsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJudgableProblemsReplyValidationError{}

// Validate checks the field values on GetSubmissionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubmissionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubmissionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubmissionsRequestMultiError, or nil if none found.
func (m *GetSubmissionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubmissionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProblemId

	// no validation rules for Status

	if len(errors) > 0 {
		return GetSubmissionsRequestMultiError(errors)
	}

	return nil
}

// GetSubmissionsRequestMultiError is an error wrapping multiple validation
// errors returned by GetSubmissionsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSubmissionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubmissionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubmissionsRequestMultiError) AllErrors() []error { return m }

// GetSubmissionsRequestValidationError is the validation error returned by
// GetSubmissionsRequest.Validate if the designated constraints aren't met.
type GetSubmissionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubmissionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubmissionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubmissionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubmissionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubmissionsRequestValidationError) ErrorName() string {
	return "GetSubmissionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubmissionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubmissionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubmissionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubmissionsRequestValidationError{}

// Validate checks the field values on GetSubmissionsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubmissionsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubmissionsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubmissionsReplyMultiError, or nil if none found.
func (m *GetSubmissionsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubmissionsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSubmissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSubmissionsReplyValidationError{
						field:  fmt.Sprintf("Submissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSubmissionsReplyValidationError{
						field:  fmt.Sprintf("Submissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSubmissionsReplyValidationError{
					field:  fmt.Sprintf("Submissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSubmissionsReplyMultiError(errors)
	}

	return nil
}

// GetSubmissionsReplyMultiError is an error wrapping multiple validation
// errors returned by GetSubmissionsReply.ValidateAll() if the designated
// constraints aren't met.
type GetSubmissionsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubmissionsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubmissionsReplyMultiError) AllErrors() []error { return m }

// GetSubmissionsReplyValidationError is the validation error returned by
// GetSubmissionsReply.Validate if the designated constraints aren't met.
type GetSubmissionsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubmissionsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubmissionsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubmissionsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubmissionsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubmissionsReplyValidationError) ErrorName() string {
	return "GetSubmissionsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubmissionsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubmissionsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubmissionsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubmissionsReplyValidationError{}
