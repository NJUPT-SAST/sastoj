// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v5.26.1
// source: api/sastoj/admin/judge/service/v1/judge.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationJudgeGetJudgableProblems = "/api.sastoj.admin.judge.service.v1.Judge/GetJudgableProblems"
const OperationJudgeGetSubmissions = "/api.sastoj.admin.judge.service.v1.Judge/GetSubmissions"
const OperationJudgeSubmitJudge = "/api.sastoj.admin.judge.service.v1.Judge/SubmitJudge"

type JudgeHTTPServer interface {
	GetJudgableProblems(context.Context, *GetJudgableProblemsRequest) (*GetJudgableProblemsReply, error)
	GetSubmissions(context.Context, *GetSubmissionsRequest) (*GetSubmissionsReply, error)
	SubmitJudge(context.Context, *SubmitJudgeRequest) (*SubmitJudgeReply, error)
}

func RegisterJudgeHTTPServer(s *http.Server, srv JudgeHTTPServer) {
	r := s.Route("/")
	r.POST("/judge/{submit_id}", _Judge_SubmitJudge0_HTTP_Handler(srv))
	r.GET("/judge", _Judge_GetJudgableProblems0_HTTP_Handler(srv))
	r.GET("/judge/{problem_id}", _Judge_GetSubmissions0_HTTP_Handler(srv))
}

func _Judge_SubmitJudge0_HTTP_Handler(srv JudgeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SubmitJudgeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationJudgeSubmitJudge)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SubmitJudge(ctx, req.(*SubmitJudgeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SubmitJudgeReply)
		return ctx.Result(200, reply)
	}
}

func _Judge_GetJudgableProblems0_HTTP_Handler(srv JudgeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetJudgableProblemsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationJudgeGetJudgableProblems)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetJudgableProblems(ctx, req.(*GetJudgableProblemsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetJudgableProblemsReply)
		return ctx.Result(200, reply)
	}
}

func _Judge_GetSubmissions0_HTTP_Handler(srv JudgeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSubmissionsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationJudgeGetSubmissions)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSubmissions(ctx, req.(*GetSubmissionsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSubmissionsReply)
		return ctx.Result(200, reply)
	}
}

type JudgeHTTPClient interface {
	GetJudgableProblems(ctx context.Context, req *GetJudgableProblemsRequest, opts ...http.CallOption) (rsp *GetJudgableProblemsReply, err error)
	GetSubmissions(ctx context.Context, req *GetSubmissionsRequest, opts ...http.CallOption) (rsp *GetSubmissionsReply, err error)
	SubmitJudge(ctx context.Context, req *SubmitJudgeRequest, opts ...http.CallOption) (rsp *SubmitJudgeReply, err error)
}

type JudgeHTTPClientImpl struct {
	cc *http.Client
}

func NewJudgeHTTPClient(client *http.Client) JudgeHTTPClient {
	return &JudgeHTTPClientImpl{client}
}

func (c *JudgeHTTPClientImpl) GetJudgableProblems(ctx context.Context, in *GetJudgableProblemsRequest, opts ...http.CallOption) (*GetJudgableProblemsReply, error) {
	var out GetJudgableProblemsReply
	pattern := "/judge"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationJudgeGetJudgableProblems))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *JudgeHTTPClientImpl) GetSubmissions(ctx context.Context, in *GetSubmissionsRequest, opts ...http.CallOption) (*GetSubmissionsReply, error) {
	var out GetSubmissionsReply
	pattern := "/judge/{problem_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationJudgeGetSubmissions))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *JudgeHTTPClientImpl) SubmitJudge(ctx context.Context, in *SubmitJudgeRequest, opts ...http.CallOption) (*SubmitJudgeReply, error) {
	var out SubmitJudgeReply
	pattern := "/judge/{submit_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationJudgeSubmitJudge))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
