// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: sastoj/admin/judger/service/v1/judger.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UpdateJudgerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateJudgerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateJudgerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateJudgerRequestMultiError, or nil if none found.
func (m *UpdateJudgerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateJudgerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProblemId

	if len(errors) > 0 {
		return UpdateJudgerRequestMultiError(errors)
	}

	return nil
}

// UpdateJudgerRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateJudgerRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateJudgerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateJudgerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateJudgerRequestMultiError) AllErrors() []error { return m }

// UpdateJudgerRequestValidationError is the validation error returned by
// UpdateJudgerRequest.Validate if the designated constraints aren't met.
type UpdateJudgerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateJudgerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateJudgerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateJudgerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateJudgerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateJudgerRequestValidationError) ErrorName() string {
	return "UpdateJudgerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateJudgerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateJudgerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateJudgerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateJudgerRequestValidationError{}

// Validate checks the field values on UpdateJudgerReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateJudgerReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateJudgerReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateJudgerReplyMultiError, or nil if none found.
func (m *UpdateJudgerReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateJudgerReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdateJudgerReplyMultiError(errors)
	}

	return nil
}

// UpdateJudgerReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateJudgerReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateJudgerReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateJudgerReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateJudgerReplyMultiError) AllErrors() []error { return m }

// UpdateJudgerReplyValidationError is the validation error returned by
// UpdateJudgerReply.Validate if the designated constraints aren't met.
type UpdateJudgerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateJudgerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateJudgerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateJudgerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateJudgerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateJudgerReplyValidationError) ErrorName() string {
	return "UpdateJudgerReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateJudgerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateJudgerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateJudgerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateJudgerReplyValidationError{}

// Validate checks the field values on GetJudgerRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetJudgerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJudgerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJudgerRequestMultiError, or nil if none found.
func (m *GetJudgerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJudgerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProblemId

	if len(errors) > 0 {
		return GetJudgerRequestMultiError(errors)
	}

	return nil
}

// GetJudgerRequestMultiError is an error wrapping multiple validation errors
// returned by GetJudgerRequest.ValidateAll() if the designated constraints
// aren't met.
type GetJudgerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJudgerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJudgerRequestMultiError) AllErrors() []error { return m }

// GetJudgerRequestValidationError is the validation error returned by
// GetJudgerRequest.Validate if the designated constraints aren't met.
type GetJudgerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJudgerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJudgerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJudgerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJudgerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJudgerRequestValidationError) ErrorName() string { return "GetJudgerRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetJudgerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJudgerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJudgerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJudgerRequestValidationError{}

// Validate checks the field values on GetJudgerReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetJudgerReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJudgerReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetJudgerReplyMultiError,
// or nil if none found.
func (m *GetJudgerReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJudgerReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetJudgerReplyValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetJudgerReplyValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetJudgerReplyValidationError{
					field:  fmt.Sprintf("Groups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetJudgerReplyMultiError(errors)
	}

	return nil
}

// GetJudgerReplyMultiError is an error wrapping multiple validation errors
// returned by GetJudgerReply.ValidateAll() if the designated constraints
// aren't met.
type GetJudgerReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJudgerReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJudgerReplyMultiError) AllErrors() []error { return m }

// GetJudgerReplyValidationError is the validation error returned by
// GetJudgerReply.Validate if the designated constraints aren't met.
type GetJudgerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJudgerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJudgerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJudgerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJudgerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJudgerReplyValidationError) ErrorName() string { return "GetJudgerReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetJudgerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJudgerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJudgerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJudgerReplyValidationError{}

// Validate checks the field values on GetJudgerReply_Group with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetJudgerReply_Group) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJudgerReply_Group with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJudgerReply_GroupMultiError, or nil if none found.
func (m *GetJudgerReply_Group) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJudgerReply_Group) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return GetJudgerReply_GroupMultiError(errors)
	}

	return nil
}

// GetJudgerReply_GroupMultiError is an error wrapping multiple validation
// errors returned by GetJudgerReply_Group.ValidateAll() if the designated
// constraints aren't met.
type GetJudgerReply_GroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJudgerReply_GroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJudgerReply_GroupMultiError) AllErrors() []error { return m }

// GetJudgerReply_GroupValidationError is the validation error returned by
// GetJudgerReply_Group.Validate if the designated constraints aren't met.
type GetJudgerReply_GroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJudgerReply_GroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJudgerReply_GroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJudgerReply_GroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJudgerReply_GroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJudgerReply_GroupValidationError) ErrorName() string {
	return "GetJudgerReply_GroupValidationError"
}

// Error satisfies the builtin error interface
func (e GetJudgerReply_GroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJudgerReply_Group.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJudgerReply_GroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJudgerReply_GroupValidationError{}
