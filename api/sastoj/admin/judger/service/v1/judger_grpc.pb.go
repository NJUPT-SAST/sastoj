// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: sastoj/admin/judger/service/v1/judge.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Judger_UpdateJudger_FullMethodName = "/api.sastoj.admin.judger.service.v1.Judger/UpdateJudger"
	Judger_GetJudger_FullMethodName    = "/api.sastoj.admin.judger.service.v1.Judger/GetJudger"
)

// JudgerClient is the client API for Judger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JudgerClient interface {
	UpdateJudger(ctx context.Context, in *UpdateJudgerRequest, opts ...grpc.CallOption) (*UpdateJudgerReply, error)
	GetJudger(ctx context.Context, in *GetJudgerRequest, opts ...grpc.CallOption) (*GetJudgerReply, error)
}

type judgerClient struct {
	cc grpc.ClientConnInterface
}

func NewJudgerClient(cc grpc.ClientConnInterface) JudgerClient {
	return &judgerClient{cc}
}

func (c *judgerClient) UpdateJudger(ctx context.Context, in *UpdateJudgerRequest, opts ...grpc.CallOption) (*UpdateJudgerReply, error) {
	out := new(UpdateJudgerReply)
	err := c.cc.Invoke(ctx, Judger_UpdateJudger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgerClient) GetJudger(ctx context.Context, in *GetJudgerRequest, opts ...grpc.CallOption) (*GetJudgerReply, error) {
	out := new(GetJudgerReply)
	err := c.cc.Invoke(ctx, Judger_GetJudger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JudgerServer is the server API for Judger service.
// All implementations must embed UnimplementedJudgerServer
// for forward compatibility
type JudgerServer interface {
	UpdateJudger(context.Context, *UpdateJudgerRequest) (*UpdateJudgerReply, error)
	GetJudger(context.Context, *GetJudgerRequest) (*GetJudgerReply, error)
	mustEmbedUnimplementedJudgerServer()
}

// UnimplementedJudgerServer must be embedded to have forward compatible implementations.
type UnimplementedJudgerServer struct {
}

func (UnimplementedJudgerServer) UpdateJudger(context.Context, *UpdateJudgerRequest) (*UpdateJudgerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJudger not implemented")
}
func (UnimplementedJudgerServer) GetJudger(context.Context, *GetJudgerRequest) (*GetJudgerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJudger not implemented")
}
func (UnimplementedJudgerServer) mustEmbedUnimplementedJudgerServer() {}

// UnsafeJudgerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JudgerServer will
// result in compilation errors.
type UnsafeJudgerServer interface {
	mustEmbedUnimplementedJudgerServer()
}

func RegisterJudgerServer(s grpc.ServiceRegistrar, srv JudgerServer) {
	s.RegisterService(&Judger_ServiceDesc, srv)
}

func _Judger_UpdateJudger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJudgerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JudgerServer).UpdateJudger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Judger_UpdateJudger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JudgerServer).UpdateJudger(ctx, req.(*UpdateJudgerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Judger_GetJudger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJudgerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JudgerServer).GetJudger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Judger_GetJudger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JudgerServer).GetJudger(ctx, req.(*GetJudgerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Judger_ServiceDesc is the grpc.ServiceDesc for Judger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Judger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.sastoj.admin.judger.service.v1.Judger",
	HandlerType: (*JudgerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateJudger",
			Handler:    _Judger_UpdateJudger_Handler,
		},
		{
			MethodName: "GetJudger",
			Handler:    _Judger_GetJudger_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sastoj/admin/judger/service/v1/judge.proto",
}
