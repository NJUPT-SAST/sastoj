// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: admin/problem/service/v1/problem.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Problem_CreateProblem_FullMethodName   = "/api.sastoj.admin.problem.service.v1.Problem/CreateProblem"
	Problem_UpdateProblem_FullMethodName   = "/api.sastoj.admin.problem.service.v1.Problem/UpdateProblem"
	Problem_DeleteProblem_FullMethodName   = "/api.sastoj.admin.problem.service.v1.Problem/DeleteProblem"
	Problem_ListProblem_FullMethodName     = "/api.sastoj.admin.problem.service.v1.Problem/ListProblem"
	Problem_GetProblem_FullMethodName      = "/api.sastoj.admin.problem.service.v1.Problem/GetProblem"
	Problem_GetProblemTypes_FullMethodName = "/api.sastoj.admin.problem.service.v1.Problem/GetProblemTypes"
)

// ProblemClient is the client API for Problem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProblemClient interface {
	CreateProblem(ctx context.Context, in *CreateProblemRequest, opts ...grpc.CallOption) (*CreateProblemReply, error)
	UpdateProblem(ctx context.Context, in *UpdateProblemRequest, opts ...grpc.CallOption) (*UpdateProblemReply, error)
	DeleteProblem(ctx context.Context, in *DeleteProblemRequest, opts ...grpc.CallOption) (*DeleteProblemReply, error)
	ListProblem(ctx context.Context, in *ListProblemRequest, opts ...grpc.CallOption) (*ListProblemReply, error)
	GetProblem(ctx context.Context, in *GetProblemRequest, opts ...grpc.CallOption) (*GetProblemReply, error)
	GetProblemTypes(ctx context.Context, in *GetProblemTypesRequest, opts ...grpc.CallOption) (*GetProblemTypesReply, error)
}

type problemClient struct {
	cc grpc.ClientConnInterface
}

func NewProblemClient(cc grpc.ClientConnInterface) ProblemClient {
	return &problemClient{cc}
}

func (c *problemClient) CreateProblem(ctx context.Context, in *CreateProblemRequest, opts ...grpc.CallOption) (*CreateProblemReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProblemReply)
	err := c.cc.Invoke(ctx, Problem_CreateProblem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemClient) UpdateProblem(ctx context.Context, in *UpdateProblemRequest, opts ...grpc.CallOption) (*UpdateProblemReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProblemReply)
	err := c.cc.Invoke(ctx, Problem_UpdateProblem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemClient) DeleteProblem(ctx context.Context, in *DeleteProblemRequest, opts ...grpc.CallOption) (*DeleteProblemReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProblemReply)
	err := c.cc.Invoke(ctx, Problem_DeleteProblem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemClient) ListProblem(ctx context.Context, in *ListProblemRequest, opts ...grpc.CallOption) (*ListProblemReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProblemReply)
	err := c.cc.Invoke(ctx, Problem_ListProblem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemClient) GetProblem(ctx context.Context, in *GetProblemRequest, opts ...grpc.CallOption) (*GetProblemReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProblemReply)
	err := c.cc.Invoke(ctx, Problem_GetProblem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemClient) GetProblemTypes(ctx context.Context, in *GetProblemTypesRequest, opts ...grpc.CallOption) (*GetProblemTypesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProblemTypesReply)
	err := c.cc.Invoke(ctx, Problem_GetProblemTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProblemServer is the server API for Problem service.
// All implementations must embed UnimplementedProblemServer
// for forward compatibility.
type ProblemServer interface {
	CreateProblem(context.Context, *CreateProblemRequest) (*CreateProblemReply, error)
	UpdateProblem(context.Context, *UpdateProblemRequest) (*UpdateProblemReply, error)
	DeleteProblem(context.Context, *DeleteProblemRequest) (*DeleteProblemReply, error)
	ListProblem(context.Context, *ListProblemRequest) (*ListProblemReply, error)
	GetProblem(context.Context, *GetProblemRequest) (*GetProblemReply, error)
	GetProblemTypes(context.Context, *GetProblemTypesRequest) (*GetProblemTypesReply, error)
	mustEmbedUnimplementedProblemServer()
}

// UnimplementedProblemServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProblemServer struct{}

func (UnimplementedProblemServer) CreateProblem(context.Context, *CreateProblemRequest) (*CreateProblemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProblem not implemented")
}
func (UnimplementedProblemServer) UpdateProblem(context.Context, *UpdateProblemRequest) (*UpdateProblemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProblem not implemented")
}
func (UnimplementedProblemServer) DeleteProblem(context.Context, *DeleteProblemRequest) (*DeleteProblemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProblem not implemented")
}
func (UnimplementedProblemServer) ListProblem(context.Context, *ListProblemRequest) (*ListProblemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProblem not implemented")
}
func (UnimplementedProblemServer) GetProblem(context.Context, *GetProblemRequest) (*GetProblemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProblem not implemented")
}
func (UnimplementedProblemServer) GetProblemTypes(context.Context, *GetProblemTypesRequest) (*GetProblemTypesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProblemTypes not implemented")
}
func (UnimplementedProblemServer) mustEmbedUnimplementedProblemServer() {}
func (UnimplementedProblemServer) testEmbeddedByValue()                 {}

// UnsafeProblemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProblemServer will
// result in compilation errors.
type UnsafeProblemServer interface {
	mustEmbedUnimplementedProblemServer()
}

func RegisterProblemServer(s grpc.ServiceRegistrar, srv ProblemServer) {
	// If the following call pancis, it indicates UnimplementedProblemServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Problem_ServiceDesc, srv)
}

func _Problem_CreateProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServer).CreateProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Problem_CreateProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServer).CreateProblem(ctx, req.(*CreateProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Problem_UpdateProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServer).UpdateProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Problem_UpdateProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServer).UpdateProblem(ctx, req.(*UpdateProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Problem_DeleteProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServer).DeleteProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Problem_DeleteProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServer).DeleteProblem(ctx, req.(*DeleteProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Problem_ListProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServer).ListProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Problem_ListProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServer).ListProblem(ctx, req.(*ListProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Problem_GetProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServer).GetProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Problem_GetProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServer).GetProblem(ctx, req.(*GetProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Problem_GetProblemTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProblemTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServer).GetProblemTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Problem_GetProblemTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServer).GetProblemTypes(ctx, req.(*GetProblemTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Problem_ServiceDesc is the grpc.ServiceDesc for Problem service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Problem_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.sastoj.admin.problem.service.v1.Problem",
	HandlerType: (*ProblemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProblem",
			Handler:    _Problem_CreateProblem_Handler,
		},
		{
			MethodName: "UpdateProblem",
			Handler:    _Problem_UpdateProblem_Handler,
		},
		{
			MethodName: "DeleteProblem",
			Handler:    _Problem_DeleteProblem_Handler,
		},
		{
			MethodName: "ListProblem",
			Handler:    _Problem_ListProblem_Handler,
		},
		{
			MethodName: "GetProblem",
			Handler:    _Problem_GetProblem_Handler,
		},
		{
			MethodName: "GetProblemTypes",
			Handler:    _Problem_GetProblemTypes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/problem/service/v1/problem.proto",
}
