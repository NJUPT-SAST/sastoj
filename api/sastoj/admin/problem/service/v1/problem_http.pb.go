// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             (unknown)
// source: sastoj/admin/problem/service/v1/problem.proto

package problem

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationProblemCreateProblem = "/api.sastoj.admin.problem.Problem/CreateProblem"
const OperationProblemDeleteProblem = "/api.sastoj.admin.problem.Problem/DeleteProblem"
const OperationProblemGetProblem = "/api.sastoj.admin.problem.Problem/GetProblem"
const OperationProblemListProblem = "/api.sastoj.admin.problem.Problem/ListProblem"
const OperationProblemUpdateProblem = "/api.sastoj.admin.problem.Problem/UpdateProblem"

type ProblemHTTPServer interface {
	CreateProblem(context.Context, *CreateProblemRequest) (*CreateProblemReply, error)
	DeleteProblem(context.Context, *DeleteProblemRequest) (*DeleteProblemReply, error)
	GetProblem(context.Context, *GetProblemRequest) (*GetProblemReply, error)
	ListProblem(context.Context, *ListProblemRequest) (*ListProblemReply, error)
	UpdateProblem(context.Context, *UpdateProblemRequest) (*UpdateProblemReply, error)
}

func RegisterProblemHTTPServer(s *http.Server, srv ProblemHTTPServer) {
	r := s.Route("/")
	r.POST("/problem", _Problem_CreateProblem0_HTTP_Handler(srv))
	r.PUT("/problem", _Problem_UpdateProblem0_HTTP_Handler(srv))
	r.DELETE("/problem/{id}", _Problem_DeleteProblem0_HTTP_Handler(srv))
	r.GET("/problem/list", _Problem_ListProblem0_HTTP_Handler(srv))
	r.GET("/problem/{id}", _Problem_GetProblem0_HTTP_Handler(srv))
}

func _Problem_CreateProblem0_HTTP_Handler(srv ProblemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateProblemRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProblemCreateProblem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateProblem(ctx, req.(*CreateProblemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateProblemReply)
		return ctx.Result(200, reply)
	}
}

func _Problem_UpdateProblem0_HTTP_Handler(srv ProblemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateProblemRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProblemUpdateProblem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateProblem(ctx, req.(*UpdateProblemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateProblemReply)
		return ctx.Result(200, reply)
	}
}

func _Problem_DeleteProblem0_HTTP_Handler(srv ProblemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteProblemRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProblemDeleteProblem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteProblem(ctx, req.(*DeleteProblemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteProblemReply)
		return ctx.Result(200, reply)
	}
}

func _Problem_ListProblem0_HTTP_Handler(srv ProblemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListProblemRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProblemListProblem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListProblem(ctx, req.(*ListProblemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListProblemReply)
		return ctx.Result(200, reply)
	}
}

func _Problem_GetProblem0_HTTP_Handler(srv ProblemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetProblemRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProblemGetProblem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProblem(ctx, req.(*GetProblemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetProblemReply)
		return ctx.Result(200, reply)
	}
}

type ProblemHTTPClient interface {
	CreateProblem(ctx context.Context, req *CreateProblemRequest, opts ...http.CallOption) (rsp *CreateProblemReply, err error)
	DeleteProblem(ctx context.Context, req *DeleteProblemRequest, opts ...http.CallOption) (rsp *DeleteProblemReply, err error)
	GetProblem(ctx context.Context, req *GetProblemRequest, opts ...http.CallOption) (rsp *GetProblemReply, err error)
	ListProblem(ctx context.Context, req *ListProblemRequest, opts ...http.CallOption) (rsp *ListProblemReply, err error)
	UpdateProblem(ctx context.Context, req *UpdateProblemRequest, opts ...http.CallOption) (rsp *UpdateProblemReply, err error)
}

type ProblemHTTPClientImpl struct {
	cc *http.Client
}

func NewProblemHTTPClient(client *http.Client) ProblemHTTPClient {
	return &ProblemHTTPClientImpl{client}
}

func (c *ProblemHTTPClientImpl) CreateProblem(ctx context.Context, in *CreateProblemRequest, opts ...http.CallOption) (*CreateProblemReply, error) {
	var out CreateProblemReply
	pattern := "/problem"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProblemCreateProblem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProblemHTTPClientImpl) DeleteProblem(ctx context.Context, in *DeleteProblemRequest, opts ...http.CallOption) (*DeleteProblemReply, error) {
	var out DeleteProblemReply
	pattern := "/problem/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProblemDeleteProblem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProblemHTTPClientImpl) GetProblem(ctx context.Context, in *GetProblemRequest, opts ...http.CallOption) (*GetProblemReply, error) {
	var out GetProblemReply
	pattern := "/problem/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProblemGetProblem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProblemHTTPClientImpl) ListProblem(ctx context.Context, in *ListProblemRequest, opts ...http.CallOption) (*ListProblemReply, error) {
	var out ListProblemReply
	pattern := "/problem/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProblemListProblem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProblemHTTPClientImpl) UpdateProblem(ctx context.Context, in *UpdateProblemRequest, opts ...http.CallOption) (*UpdateProblemReply, error) {
	var out UpdateProblemReply
	pattern := "/problem"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProblemUpdateProblem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
