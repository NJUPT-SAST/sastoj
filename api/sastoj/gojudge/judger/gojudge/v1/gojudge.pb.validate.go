// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/sastoj/gojudge/judger/gojudge/v1/gojudge.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FileID with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileID with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FileIDMultiError, or nil if none found.
func (m *FileID) ValidateAll() error {
	return m.validate(true)
}

func (m *FileID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FileID

	if len(errors) > 0 {
		return FileIDMultiError(errors)
	}

	return nil
}

// FileIDMultiError is an error wrapping multiple validation errors returned by
// FileID.ValidateAll() if the designated constraints aren't met.
type FileIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileIDMultiError) AllErrors() []error { return m }

// FileIDValidationError is the validation error returned by FileID.Validate if
// the designated constraints aren't met.
type FileIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileIDValidationError) ErrorName() string { return "FileIDValidationError" }

// Error satisfies the builtin error interface
func (e FileIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileIDValidationError{}

// Validate checks the field values on FileContent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileContent with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileContentMultiError, or
// nil if none found.
func (m *FileContent) ValidateAll() error {
	return m.validate(true)
}

func (m *FileContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Content

	if len(errors) > 0 {
		return FileContentMultiError(errors)
	}

	return nil
}

// FileContentMultiError is an error wrapping multiple validation errors
// returned by FileContent.ValidateAll() if the designated constraints aren't met.
type FileContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileContentMultiError) AllErrors() []error { return m }

// FileContentValidationError is the validation error returned by
// FileContent.Validate if the designated constraints aren't met.
type FileContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileContentValidationError) ErrorName() string { return "FileContentValidationError" }

// Error satisfies the builtin error interface
func (e FileContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileContentValidationError{}

// Validate checks the field values on FileListType with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileListType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileListType with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileListTypeMultiError, or
// nil if none found.
func (m *FileListType) ValidateAll() error {
	return m.validate(true)
}

func (m *FileListType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FileIDs

	if len(errors) > 0 {
		return FileListTypeMultiError(errors)
	}

	return nil
}

// FileListTypeMultiError is an error wrapping multiple validation errors
// returned by FileListType.ValidateAll() if the designated constraints aren't met.
type FileListTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileListTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileListTypeMultiError) AllErrors() []error { return m }

// FileListTypeValidationError is the validation error returned by
// FileListType.Validate if the designated constraints aren't met.
type FileListTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileListTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileListTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileListTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileListTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileListTypeValidationError) ErrorName() string { return "FileListTypeValidationError" }

// Error satisfies the builtin error interface
func (e FileListTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileListType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileListTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileListTypeValidationError{}

// Validate checks the field values on Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RequestMultiError, or nil if none found.
func (m *Request) ValidateAll() error {
	return m.validate(true)
}

func (m *Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestID

	for idx, item := range m.GetCmd() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RequestValidationError{
						field:  fmt.Sprintf("Cmd[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RequestValidationError{
						field:  fmt.Sprintf("Cmd[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RequestValidationError{
					field:  fmt.Sprintf("Cmd[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPipeMapping() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RequestValidationError{
						field:  fmt.Sprintf("PipeMapping[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RequestValidationError{
						field:  fmt.Sprintf("PipeMapping[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RequestValidationError{
					field:  fmt.Sprintf("PipeMapping[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RequestMultiError(errors)
	}

	return nil
}

// RequestMultiError is an error wrapping multiple validation errors returned
// by Request.ValidateAll() if the designated constraints aren't met.
type RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestMultiError) AllErrors() []error { return m }

// RequestValidationError is the validation error returned by Request.Validate
// if the designated constraints aren't met.
type RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestValidationError) ErrorName() string { return "RequestValidationError" }

// Error satisfies the builtin error interface
func (e RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestValidationError{}

// Validate checks the field values on Response with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Response with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResponseMultiError, or nil
// if none found.
func (m *Response) ValidateAll() error {
	return m.validate(true)
}

func (m *Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestID

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Error

	if len(errors) > 0 {
		return ResponseMultiError(errors)
	}

	return nil
}

// ResponseMultiError is an error wrapping multiple validation errors returned
// by Response.ValidateAll() if the designated constraints aren't met.
type ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponseMultiError) AllErrors() []error { return m }

// ResponseValidationError is the validation error returned by
// Response.Validate if the designated constraints aren't met.
type ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseValidationError) ErrorName() string { return "ResponseValidationError" }

// Error satisfies the builtin error interface
func (e ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseValidationError{}

// Validate checks the field values on StreamRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StreamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StreamRequestMultiError, or
// nil if none found.
func (m *StreamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Request.(type) {
	case *StreamRequest_ExecRequest:
		if v == nil {
			err := StreamRequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExecRequest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamRequestValidationError{
						field:  "ExecRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamRequestValidationError{
						field:  "ExecRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExecRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamRequestValidationError{
					field:  "ExecRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamRequest_ExecInput:
		if v == nil {
			err := StreamRequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExecInput()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamRequestValidationError{
						field:  "ExecInput",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamRequestValidationError{
						field:  "ExecInput",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExecInput()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamRequestValidationError{
					field:  "ExecInput",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamRequest_ExecResize:
		if v == nil {
			err := StreamRequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExecResize()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamRequestValidationError{
						field:  "ExecResize",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamRequestValidationError{
						field:  "ExecResize",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExecResize()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamRequestValidationError{
					field:  "ExecResize",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return StreamRequestMultiError(errors)
	}

	return nil
}

// StreamRequestMultiError is an error wrapping multiple validation errors
// returned by StreamRequest.ValidateAll() if the designated constraints
// aren't met.
type StreamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamRequestMultiError) AllErrors() []error { return m }

// StreamRequestValidationError is the validation error returned by
// StreamRequest.Validate if the designated constraints aren't met.
type StreamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamRequestValidationError) ErrorName() string { return "StreamRequestValidationError" }

// Error satisfies the builtin error interface
func (e StreamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamRequestValidationError{}

// Validate checks the field values on StreamResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StreamResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StreamResponseMultiError,
// or nil if none found.
func (m *StreamResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Response.(type) {
	case *StreamResponse_ExecResponse:
		if v == nil {
			err := StreamResponseValidationError{
				field:  "Response",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExecResponse()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamResponseValidationError{
						field:  "ExecResponse",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamResponseValidationError{
						field:  "ExecResponse",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExecResponse()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamResponseValidationError{
					field:  "ExecResponse",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamResponse_ExecOutput:
		if v == nil {
			err := StreamResponseValidationError{
				field:  "Response",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExecOutput()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamResponseValidationError{
						field:  "ExecOutput",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamResponseValidationError{
						field:  "ExecOutput",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExecOutput()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamResponseValidationError{
					field:  "ExecOutput",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return StreamResponseMultiError(errors)
	}

	return nil
}

// StreamResponseMultiError is an error wrapping multiple validation errors
// returned by StreamResponse.ValidateAll() if the designated constraints
// aren't met.
type StreamResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamResponseMultiError) AllErrors() []error { return m }

// StreamResponseValidationError is the validation error returned by
// StreamResponse.Validate if the designated constraints aren't met.
type StreamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamResponseValidationError) ErrorName() string { return "StreamResponseValidationError" }

// Error satisfies the builtin error interface
func (e StreamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamResponseValidationError{}

// Validate checks the field values on Request_LocalFile with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Request_LocalFile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Request_LocalFile with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Request_LocalFileMultiError, or nil if none found.
func (m *Request_LocalFile) ValidateAll() error {
	return m.validate(true)
}

func (m *Request_LocalFile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Src

	if len(errors) > 0 {
		return Request_LocalFileMultiError(errors)
	}

	return nil
}

// Request_LocalFileMultiError is an error wrapping multiple validation errors
// returned by Request_LocalFile.ValidateAll() if the designated constraints
// aren't met.
type Request_LocalFileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Request_LocalFileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Request_LocalFileMultiError) AllErrors() []error { return m }

// Request_LocalFileValidationError is the validation error returned by
// Request_LocalFile.Validate if the designated constraints aren't met.
type Request_LocalFileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Request_LocalFileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Request_LocalFileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Request_LocalFileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Request_LocalFileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Request_LocalFileValidationError) ErrorName() string {
	return "Request_LocalFileValidationError"
}

// Error satisfies the builtin error interface
func (e Request_LocalFileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequest_LocalFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Request_LocalFileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Request_LocalFileValidationError{}

// Validate checks the field values on Request_MemoryFile with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Request_MemoryFile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Request_MemoryFile with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Request_MemoryFileMultiError, or nil if none found.
func (m *Request_MemoryFile) ValidateAll() error {
	return m.validate(true)
}

func (m *Request_MemoryFile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Content

	if len(errors) > 0 {
		return Request_MemoryFileMultiError(errors)
	}

	return nil
}

// Request_MemoryFileMultiError is an error wrapping multiple validation errors
// returned by Request_MemoryFile.ValidateAll() if the designated constraints
// aren't met.
type Request_MemoryFileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Request_MemoryFileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Request_MemoryFileMultiError) AllErrors() []error { return m }

// Request_MemoryFileValidationError is the validation error returned by
// Request_MemoryFile.Validate if the designated constraints aren't met.
type Request_MemoryFileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Request_MemoryFileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Request_MemoryFileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Request_MemoryFileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Request_MemoryFileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Request_MemoryFileValidationError) ErrorName() string {
	return "Request_MemoryFileValidationError"
}

// Error satisfies the builtin error interface
func (e Request_MemoryFileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequest_MemoryFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Request_MemoryFileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Request_MemoryFileValidationError{}

// Validate checks the field values on Request_CachedFile with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Request_CachedFile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Request_CachedFile with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Request_CachedFileMultiError, or nil if none found.
func (m *Request_CachedFile) ValidateAll() error {
	return m.validate(true)
}

func (m *Request_CachedFile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FileID

	if len(errors) > 0 {
		return Request_CachedFileMultiError(errors)
	}

	return nil
}

// Request_CachedFileMultiError is an error wrapping multiple validation errors
// returned by Request_CachedFile.ValidateAll() if the designated constraints
// aren't met.
type Request_CachedFileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Request_CachedFileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Request_CachedFileMultiError) AllErrors() []error { return m }

// Request_CachedFileValidationError is the validation error returned by
// Request_CachedFile.Validate if the designated constraints aren't met.
type Request_CachedFileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Request_CachedFileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Request_CachedFileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Request_CachedFileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Request_CachedFileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Request_CachedFileValidationError) ErrorName() string {
	return "Request_CachedFileValidationError"
}

// Error satisfies the builtin error interface
func (e Request_CachedFileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequest_CachedFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Request_CachedFileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Request_CachedFileValidationError{}

// Validate checks the field values on Request_PipeCollector with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Request_PipeCollector) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Request_PipeCollector with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Request_PipeCollectorMultiError, or nil if none found.
func (m *Request_PipeCollector) ValidateAll() error {
	return m.validate(true)
}

func (m *Request_PipeCollector) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Max

	// no validation rules for Pipe

	if len(errors) > 0 {
		return Request_PipeCollectorMultiError(errors)
	}

	return nil
}

// Request_PipeCollectorMultiError is an error wrapping multiple validation
// errors returned by Request_PipeCollector.ValidateAll() if the designated
// constraints aren't met.
type Request_PipeCollectorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Request_PipeCollectorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Request_PipeCollectorMultiError) AllErrors() []error { return m }

// Request_PipeCollectorValidationError is the validation error returned by
// Request_PipeCollector.Validate if the designated constraints aren't met.
type Request_PipeCollectorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Request_PipeCollectorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Request_PipeCollectorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Request_PipeCollectorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Request_PipeCollectorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Request_PipeCollectorValidationError) ErrorName() string {
	return "Request_PipeCollectorValidationError"
}

// Error satisfies the builtin error interface
func (e Request_PipeCollectorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequest_PipeCollector.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Request_PipeCollectorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Request_PipeCollectorValidationError{}

// Validate checks the field values on Request_StreamInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Request_StreamInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Request_StreamInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Request_StreamInputMultiError, or nil if none found.
func (m *Request_StreamInput) ValidateAll() error {
	return m.validate(true)
}

func (m *Request_StreamInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return Request_StreamInputMultiError(errors)
	}

	return nil
}

// Request_StreamInputMultiError is an error wrapping multiple validation
// errors returned by Request_StreamInput.ValidateAll() if the designated
// constraints aren't met.
type Request_StreamInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Request_StreamInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Request_StreamInputMultiError) AllErrors() []error { return m }

// Request_StreamInputValidationError is the validation error returned by
// Request_StreamInput.Validate if the designated constraints aren't met.
type Request_StreamInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Request_StreamInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Request_StreamInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Request_StreamInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Request_StreamInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Request_StreamInputValidationError) ErrorName() string {
	return "Request_StreamInputValidationError"
}

// Error satisfies the builtin error interface
func (e Request_StreamInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequest_StreamInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Request_StreamInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Request_StreamInputValidationError{}

// Validate checks the field values on Request_StreamOutput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Request_StreamOutput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Request_StreamOutput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Request_StreamOutputMultiError, or nil if none found.
func (m *Request_StreamOutput) ValidateAll() error {
	return m.validate(true)
}

func (m *Request_StreamOutput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return Request_StreamOutputMultiError(errors)
	}

	return nil
}

// Request_StreamOutputMultiError is an error wrapping multiple validation
// errors returned by Request_StreamOutput.ValidateAll() if the designated
// constraints aren't met.
type Request_StreamOutputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Request_StreamOutputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Request_StreamOutputMultiError) AllErrors() []error { return m }

// Request_StreamOutputValidationError is the validation error returned by
// Request_StreamOutput.Validate if the designated constraints aren't met.
type Request_StreamOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Request_StreamOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Request_StreamOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Request_StreamOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Request_StreamOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Request_StreamOutputValidationError) ErrorName() string {
	return "Request_StreamOutputValidationError"
}

// Error satisfies the builtin error interface
func (e Request_StreamOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequest_StreamOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Request_StreamOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Request_StreamOutputValidationError{}

// Validate checks the field values on Request_File with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Request_File) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Request_File with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Request_FileMultiError, or
// nil if none found.
func (m *Request_File) ValidateAll() error {
	return m.validate(true)
}

func (m *Request_File) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.File.(type) {
	case *Request_File_Local:
		if v == nil {
			err := Request_FileValidationError{
				field:  "File",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetLocal()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Request_FileValidationError{
						field:  "Local",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Request_FileValidationError{
						field:  "Local",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLocal()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Request_FileValidationError{
					field:  "Local",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Request_File_Memory:
		if v == nil {
			err := Request_FileValidationError{
				field:  "File",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMemory()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Request_FileValidationError{
						field:  "Memory",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Request_FileValidationError{
						field:  "Memory",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMemory()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Request_FileValidationError{
					field:  "Memory",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Request_File_Cached:
		if v == nil {
			err := Request_FileValidationError{
				field:  "File",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCached()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Request_FileValidationError{
						field:  "Cached",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Request_FileValidationError{
						field:  "Cached",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCached()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Request_FileValidationError{
					field:  "Cached",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Request_File_Pipe:
		if v == nil {
			err := Request_FileValidationError{
				field:  "File",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPipe()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Request_FileValidationError{
						field:  "Pipe",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Request_FileValidationError{
						field:  "Pipe",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPipe()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Request_FileValidationError{
					field:  "Pipe",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Request_File_StreamIn:
		if v == nil {
			err := Request_FileValidationError{
				field:  "File",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStreamIn()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Request_FileValidationError{
						field:  "StreamIn",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Request_FileValidationError{
						field:  "StreamIn",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStreamIn()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Request_FileValidationError{
					field:  "StreamIn",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Request_File_StreamOut:
		if v == nil {
			err := Request_FileValidationError{
				field:  "File",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStreamOut()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Request_FileValidationError{
						field:  "StreamOut",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Request_FileValidationError{
						field:  "StreamOut",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStreamOut()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Request_FileValidationError{
					field:  "StreamOut",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return Request_FileMultiError(errors)
	}

	return nil
}

// Request_FileMultiError is an error wrapping multiple validation errors
// returned by Request_File.ValidateAll() if the designated constraints aren't met.
type Request_FileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Request_FileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Request_FileMultiError) AllErrors() []error { return m }

// Request_FileValidationError is the validation error returned by
// Request_File.Validate if the designated constraints aren't met.
type Request_FileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Request_FileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Request_FileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Request_FileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Request_FileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Request_FileValidationError) ErrorName() string { return "Request_FileValidationError" }

// Error satisfies the builtin error interface
func (e Request_FileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequest_File.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Request_FileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Request_FileValidationError{}

// Validate checks the field values on Request_CmdType with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Request_CmdType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Request_CmdType with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Request_CmdTypeMultiError, or nil if none found.
func (m *Request_CmdType) ValidateAll() error {
	return m.validate(true)
}

func (m *Request_CmdType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFiles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Request_CmdTypeValidationError{
						field:  fmt.Sprintf("Files[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Request_CmdTypeValidationError{
						field:  fmt.Sprintf("Files[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Request_CmdTypeValidationError{
					field:  fmt.Sprintf("Files[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Tty

	// no validation rules for CpuTimeLimit

	// no validation rules for ClockTimeLimit

	// no validation rules for MemoryLimit

	// no validation rules for StackLimit

	// no validation rules for ProcLimit

	// no validation rules for CpuRateLimit

	// no validation rules for CpuSetLimit

	// no validation rules for DataSegmentLimit

	// no validation rules for AddressSpaceLimit

	{
		sorted_keys := make([]string, len(m.GetCopyIn()))
		i := 0
		for key := range m.GetCopyIn() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetCopyIn()[key]
			_ = val

			// no validation rules for CopyIn[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, Request_CmdTypeValidationError{
							field:  fmt.Sprintf("CopyIn[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, Request_CmdTypeValidationError{
							field:  fmt.Sprintf("CopyIn[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return Request_CmdTypeValidationError{
						field:  fmt.Sprintf("CopyIn[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for Symlinks

	for idx, item := range m.GetCopyOut() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Request_CmdTypeValidationError{
						field:  fmt.Sprintf("CopyOut[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Request_CmdTypeValidationError{
						field:  fmt.Sprintf("CopyOut[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Request_CmdTypeValidationError{
					field:  fmt.Sprintf("CopyOut[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCopyOutCached() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Request_CmdTypeValidationError{
						field:  fmt.Sprintf("CopyOutCached[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Request_CmdTypeValidationError{
						field:  fmt.Sprintf("CopyOutCached[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Request_CmdTypeValidationError{
					field:  fmt.Sprintf("CopyOutCached[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CopyOutDir

	// no validation rules for CopyOutMax

	if len(errors) > 0 {
		return Request_CmdTypeMultiError(errors)
	}

	return nil
}

// Request_CmdTypeMultiError is an error wrapping multiple validation errors
// returned by Request_CmdType.ValidateAll() if the designated constraints
// aren't met.
type Request_CmdTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Request_CmdTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Request_CmdTypeMultiError) AllErrors() []error { return m }

// Request_CmdTypeValidationError is the validation error returned by
// Request_CmdType.Validate if the designated constraints aren't met.
type Request_CmdTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Request_CmdTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Request_CmdTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Request_CmdTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Request_CmdTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Request_CmdTypeValidationError) ErrorName() string { return "Request_CmdTypeValidationError" }

// Error satisfies the builtin error interface
func (e Request_CmdTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequest_CmdType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Request_CmdTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Request_CmdTypeValidationError{}

// Validate checks the field values on Request_CmdCopyOutFile with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Request_CmdCopyOutFile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Request_CmdCopyOutFile with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Request_CmdCopyOutFileMultiError, or nil if none found.
func (m *Request_CmdCopyOutFile) ValidateAll() error {
	return m.validate(true)
}

func (m *Request_CmdCopyOutFile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Optional

	if len(errors) > 0 {
		return Request_CmdCopyOutFileMultiError(errors)
	}

	return nil
}

// Request_CmdCopyOutFileMultiError is an error wrapping multiple validation
// errors returned by Request_CmdCopyOutFile.ValidateAll() if the designated
// constraints aren't met.
type Request_CmdCopyOutFileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Request_CmdCopyOutFileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Request_CmdCopyOutFileMultiError) AllErrors() []error { return m }

// Request_CmdCopyOutFileValidationError is the validation error returned by
// Request_CmdCopyOutFile.Validate if the designated constraints aren't met.
type Request_CmdCopyOutFileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Request_CmdCopyOutFileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Request_CmdCopyOutFileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Request_CmdCopyOutFileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Request_CmdCopyOutFileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Request_CmdCopyOutFileValidationError) ErrorName() string {
	return "Request_CmdCopyOutFileValidationError"
}

// Error satisfies the builtin error interface
func (e Request_CmdCopyOutFileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequest_CmdCopyOutFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Request_CmdCopyOutFileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Request_CmdCopyOutFileValidationError{}

// Validate checks the field values on Request_PipeMap with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Request_PipeMap) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Request_PipeMap with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Request_PipeMapMultiError, or nil if none found.
func (m *Request_PipeMap) ValidateAll() error {
	return m.validate(true)
}

func (m *Request_PipeMap) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Request_PipeMapValidationError{
					field:  "In",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Request_PipeMapValidationError{
					field:  "In",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Request_PipeMapValidationError{
				field:  "In",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOut()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Request_PipeMapValidationError{
					field:  "Out",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Request_PipeMapValidationError{
					field:  "Out",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOut()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Request_PipeMapValidationError{
				field:  "Out",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Proxy

	// no validation rules for Name

	// no validation rules for Max

	if len(errors) > 0 {
		return Request_PipeMapMultiError(errors)
	}

	return nil
}

// Request_PipeMapMultiError is an error wrapping multiple validation errors
// returned by Request_PipeMap.ValidateAll() if the designated constraints
// aren't met.
type Request_PipeMapMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Request_PipeMapMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Request_PipeMapMultiError) AllErrors() []error { return m }

// Request_PipeMapValidationError is the validation error returned by
// Request_PipeMap.Validate if the designated constraints aren't met.
type Request_PipeMapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Request_PipeMapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Request_PipeMapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Request_PipeMapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Request_PipeMapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Request_PipeMapValidationError) ErrorName() string { return "Request_PipeMapValidationError" }

// Error satisfies the builtin error interface
func (e Request_PipeMapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequest_PipeMap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Request_PipeMapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Request_PipeMapValidationError{}

// Validate checks the field values on Request_PipeMap_PipeIndex with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Request_PipeMap_PipeIndex) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Request_PipeMap_PipeIndex with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Request_PipeMap_PipeIndexMultiError, or nil if none found.
func (m *Request_PipeMap_PipeIndex) ValidateAll() error {
	return m.validate(true)
}

func (m *Request_PipeMap_PipeIndex) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Index

	// no validation rules for Fd

	if len(errors) > 0 {
		return Request_PipeMap_PipeIndexMultiError(errors)
	}

	return nil
}

// Request_PipeMap_PipeIndexMultiError is an error wrapping multiple validation
// errors returned by Request_PipeMap_PipeIndex.ValidateAll() if the
// designated constraints aren't met.
type Request_PipeMap_PipeIndexMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Request_PipeMap_PipeIndexMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Request_PipeMap_PipeIndexMultiError) AllErrors() []error { return m }

// Request_PipeMap_PipeIndexValidationError is the validation error returned by
// Request_PipeMap_PipeIndex.Validate if the designated constraints aren't met.
type Request_PipeMap_PipeIndexValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Request_PipeMap_PipeIndexValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Request_PipeMap_PipeIndexValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Request_PipeMap_PipeIndexValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Request_PipeMap_PipeIndexValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Request_PipeMap_PipeIndexValidationError) ErrorName() string {
	return "Request_PipeMap_PipeIndexValidationError"
}

// Error satisfies the builtin error interface
func (e Request_PipeMap_PipeIndexValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequest_PipeMap_PipeIndex.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Request_PipeMap_PipeIndexValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Request_PipeMap_PipeIndexValidationError{}

// Validate checks the field values on Response_FileError with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Response_FileError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Response_FileError with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Response_FileErrorMultiError, or nil if none found.
func (m *Response_FileError) ValidateAll() error {
	return m.validate(true)
}

func (m *Response_FileError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Message

	if len(errors) > 0 {
		return Response_FileErrorMultiError(errors)
	}

	return nil
}

// Response_FileErrorMultiError is an error wrapping multiple validation errors
// returned by Response_FileError.ValidateAll() if the designated constraints
// aren't met.
type Response_FileErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Response_FileErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Response_FileErrorMultiError) AllErrors() []error { return m }

// Response_FileErrorValidationError is the validation error returned by
// Response_FileError.Validate if the designated constraints aren't met.
type Response_FileErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Response_FileErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Response_FileErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Response_FileErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Response_FileErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Response_FileErrorValidationError) ErrorName() string {
	return "Response_FileErrorValidationError"
}

// Error satisfies the builtin error interface
func (e Response_FileErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponse_FileError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Response_FileErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Response_FileErrorValidationError{}

// Validate checks the field values on Response_Result with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Response_Result) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Response_Result with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Response_ResultMultiError, or nil if none found.
func (m *Response_Result) ValidateAll() error {
	return m.validate(true)
}

func (m *Response_Result) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for ExitStatus

	// no validation rules for Error

	// no validation rules for Time

	// no validation rules for RunTime

	// no validation rules for Memory

	// no validation rules for Files

	// no validation rules for FileIDs

	for idx, item := range m.GetFileError() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Response_ResultValidationError{
						field:  fmt.Sprintf("FileError[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Response_ResultValidationError{
						field:  fmt.Sprintf("FileError[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Response_ResultValidationError{
					field:  fmt.Sprintf("FileError[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Response_ResultMultiError(errors)
	}

	return nil
}

// Response_ResultMultiError is an error wrapping multiple validation errors
// returned by Response_Result.ValidateAll() if the designated constraints
// aren't met.
type Response_ResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Response_ResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Response_ResultMultiError) AllErrors() []error { return m }

// Response_ResultValidationError is the validation error returned by
// Response_Result.Validate if the designated constraints aren't met.
type Response_ResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Response_ResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Response_ResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Response_ResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Response_ResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Response_ResultValidationError) ErrorName() string { return "Response_ResultValidationError" }

// Error satisfies the builtin error interface
func (e Response_ResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponse_Result.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Response_ResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Response_ResultValidationError{}

// Validate checks the field values on StreamRequest_Input with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamRequest_Input) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamRequest_Input with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamRequest_InputMultiError, or nil if none found.
func (m *StreamRequest_Input) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamRequest_Input) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Content

	if len(errors) > 0 {
		return StreamRequest_InputMultiError(errors)
	}

	return nil
}

// StreamRequest_InputMultiError is an error wrapping multiple validation
// errors returned by StreamRequest_Input.ValidateAll() if the designated
// constraints aren't met.
type StreamRequest_InputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamRequest_InputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamRequest_InputMultiError) AllErrors() []error { return m }

// StreamRequest_InputValidationError is the validation error returned by
// StreamRequest_Input.Validate if the designated constraints aren't met.
type StreamRequest_InputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamRequest_InputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamRequest_InputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamRequest_InputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamRequest_InputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamRequest_InputValidationError) ErrorName() string {
	return "StreamRequest_InputValidationError"
}

// Error satisfies the builtin error interface
func (e StreamRequest_InputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamRequest_Input.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamRequest_InputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamRequest_InputValidationError{}

// Validate checks the field values on StreamRequest_Resize with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamRequest_Resize) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamRequest_Resize with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamRequest_ResizeMultiError, or nil if none found.
func (m *StreamRequest_Resize) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamRequest_Resize) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Rows

	// no validation rules for Cols

	// no validation rules for X

	// no validation rules for Y

	if len(errors) > 0 {
		return StreamRequest_ResizeMultiError(errors)
	}

	return nil
}

// StreamRequest_ResizeMultiError is an error wrapping multiple validation
// errors returned by StreamRequest_Resize.ValidateAll() if the designated
// constraints aren't met.
type StreamRequest_ResizeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamRequest_ResizeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamRequest_ResizeMultiError) AllErrors() []error { return m }

// StreamRequest_ResizeValidationError is the validation error returned by
// StreamRequest_Resize.Validate if the designated constraints aren't met.
type StreamRequest_ResizeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamRequest_ResizeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamRequest_ResizeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamRequest_ResizeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamRequest_ResizeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamRequest_ResizeValidationError) ErrorName() string {
	return "StreamRequest_ResizeValidationError"
}

// Error satisfies the builtin error interface
func (e StreamRequest_ResizeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamRequest_Resize.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamRequest_ResizeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamRequest_ResizeValidationError{}

// Validate checks the field values on StreamResponse_Output with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamResponse_Output) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamResponse_Output with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamResponse_OutputMultiError, or nil if none found.
func (m *StreamResponse_Output) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamResponse_Output) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Content

	if len(errors) > 0 {
		return StreamResponse_OutputMultiError(errors)
	}

	return nil
}

// StreamResponse_OutputMultiError is an error wrapping multiple validation
// errors returned by StreamResponse_Output.ValidateAll() if the designated
// constraints aren't met.
type StreamResponse_OutputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamResponse_OutputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamResponse_OutputMultiError) AllErrors() []error { return m }

// StreamResponse_OutputValidationError is the validation error returned by
// StreamResponse_Output.Validate if the designated constraints aren't met.
type StreamResponse_OutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamResponse_OutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamResponse_OutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamResponse_OutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamResponse_OutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamResponse_OutputValidationError) ErrorName() string {
	return "StreamResponse_OutputValidationError"
}

// Error satisfies the builtin error interface
func (e StreamResponse_OutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamResponse_Output.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamResponse_OutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamResponse_OutputValidationError{}
