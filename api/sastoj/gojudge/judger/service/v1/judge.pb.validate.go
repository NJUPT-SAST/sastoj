// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/sastoj/gojudge/judger/service/v1/judge.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateOneRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateOneRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOneRequestMultiError, or nil if none found.
func (m *CreateOneRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOneRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOneRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOneRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOneRequestValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOneRequestMultiError(errors)
	}

	return nil
}

// CreateOneRequestMultiError is an error wrapping multiple validation errors
// returned by CreateOneRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateOneRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOneRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOneRequestMultiError) AllErrors() []error { return m }

// CreateOneRequestValidationError is the validation error returned by
// CreateOneRequest.Validate if the designated constraints aren't met.
type CreateOneRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOneRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOneRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOneRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOneRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOneRequestValidationError) ErrorName() string { return "CreateOneRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateOneRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOneRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOneRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOneRequestValidationError{}

// Validate checks the field values on CreateOneReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateOneReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOneReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateOneReplyMultiError,
// or nil if none found.
func (m *CreateOneReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOneReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOneReplyValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOneReplyValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOneReplyValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOneReplyMultiError(errors)
	}

	return nil
}

// CreateOneReplyMultiError is an error wrapping multiple validation errors
// returned by CreateOneReply.ValidateAll() if the designated constraints
// aren't met.
type CreateOneReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOneReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOneReplyMultiError) AllErrors() []error { return m }

// CreateOneReplyValidationError is the validation error returned by
// CreateOneReply.Validate if the designated constraints aren't met.
type CreateOneReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOneReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOneReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOneReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOneReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOneReplyValidationError) ErrorName() string { return "CreateOneReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateOneReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOneReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOneReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOneReplyValidationError{}

// Validate checks the field values on FetchStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FetchStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FetchStatusRequestMultiError, or nil if none found.
func (m *FetchStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if len(errors) > 0 {
		return FetchStatusRequestMultiError(errors)
	}

	return nil
}

// FetchStatusRequestMultiError is an error wrapping multiple validation errors
// returned by FetchStatusRequest.ValidateAll() if the designated constraints
// aren't met.
type FetchStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchStatusRequestMultiError) AllErrors() []error { return m }

// FetchStatusRequestValidationError is the validation error returned by
// FetchStatusRequest.Validate if the designated constraints aren't met.
type FetchStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchStatusRequestValidationError) ErrorName() string {
	return "FetchStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FetchStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchStatusRequestValidationError{}

// Validate checks the field values on FetchStatusReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FetchStatusReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchStatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FetchStatusReplyMultiError, or nil if none found.
func (m *FetchStatusReply) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchStatusReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FetchStatusReplyValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FetchStatusReplyValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FetchStatusReplyValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FetchStatusReplyMultiError(errors)
	}

	return nil
}

// FetchStatusReplyMultiError is an error wrapping multiple validation errors
// returned by FetchStatusReply.ValidateAll() if the designated constraints
// aren't met.
type FetchStatusReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchStatusReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchStatusReplyMultiError) AllErrors() []error { return m }

// FetchStatusReplyValidationError is the validation error returned by
// FetchStatusReply.Validate if the designated constraints aren't met.
type FetchStatusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchStatusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchStatusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchStatusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchStatusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchStatusReplyValidationError) ErrorName() string { return "FetchStatusReplyValidationError" }

// Error satisfies the builtin error interface
func (e FetchStatusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchStatusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchStatusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchStatusReplyValidationError{}

// Validate checks the field values on ModifyConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ModifyConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModifyConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModifyConfigRequestMultiError, or nil if none found.
func (m *ModifyConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifyConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModifyConfigRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModifyConfigRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModifyConfigRequestValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ModifyConfigRequestMultiError(errors)
	}

	return nil
}

// ModifyConfigRequestMultiError is an error wrapping multiple validation
// errors returned by ModifyConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type ModifyConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifyConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifyConfigRequestMultiError) AllErrors() []error { return m }

// ModifyConfigRequestValidationError is the validation error returned by
// ModifyConfigRequest.Validate if the designated constraints aren't met.
type ModifyConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyConfigRequestValidationError) ErrorName() string {
	return "ModifyConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyConfigRequestValidationError{}

// Validate checks the field values on ModifyConfigReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ModifyConfigReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModifyConfigReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModifyConfigReplyMultiError, or nil if none found.
func (m *ModifyConfigReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifyConfigReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModifyConfigReplyValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModifyConfigReplyValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModifyConfigReplyValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ModifyConfigReplyMultiError(errors)
	}

	return nil
}

// ModifyConfigReplyMultiError is an error wrapping multiple validation errors
// returned by ModifyConfigReply.ValidateAll() if the designated constraints
// aren't met.
type ModifyConfigReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifyConfigReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifyConfigReplyMultiError) AllErrors() []error { return m }

// ModifyConfigReplyValidationError is the validation error returned by
// ModifyConfigReply.Validate if the designated constraints aren't met.
type ModifyConfigReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyConfigReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyConfigReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyConfigReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyConfigReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyConfigReplyValidationError) ErrorName() string {
	return "ModifyConfigReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyConfigReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyConfigReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyConfigReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyConfigReplyValidationError{}

// Validate checks the field values on DeleteOneRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteOneRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOneRequestMultiError, or nil if none found.
func (m *DeleteOneRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOneRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if len(errors) > 0 {
		return DeleteOneRequestMultiError(errors)
	}

	return nil
}

// DeleteOneRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteOneRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteOneRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOneRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOneRequestMultiError) AllErrors() []error { return m }

// DeleteOneRequestValidationError is the validation error returned by
// DeleteOneRequest.Validate if the designated constraints aren't met.
type DeleteOneRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOneRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOneRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOneRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOneRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOneRequestValidationError) ErrorName() string { return "DeleteOneRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteOneRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOneRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOneRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOneRequestValidationError{}

// Validate checks the field values on DeleteOneReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteOneReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOneReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteOneReplyMultiError,
// or nil if none found.
func (m *DeleteOneReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOneReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteOneReplyMultiError(errors)
	}

	return nil
}

// DeleteOneReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteOneReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteOneReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOneReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOneReplyMultiError) AllErrors() []error { return m }

// DeleteOneReplyValidationError is the validation error returned by
// DeleteOneReply.Validate if the designated constraints aren't met.
type DeleteOneReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOneReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOneReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOneReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOneReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOneReplyValidationError) ErrorName() string { return "DeleteOneReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteOneReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOneReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOneReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOneReplyValidationError{}

// Validate checks the field values on ListAllRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListAllRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAllRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListAllRequestMultiError,
// or nil if none found.
func (m *ListAllRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAllRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListAllRequestMultiError(errors)
	}

	return nil
}

// ListAllRequestMultiError is an error wrapping multiple validation errors
// returned by ListAllRequest.ValidateAll() if the designated constraints
// aren't met.
type ListAllRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAllRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAllRequestMultiError) AllErrors() []error { return m }

// ListAllRequestValidationError is the validation error returned by
// ListAllRequest.Validate if the designated constraints aren't met.
type ListAllRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAllRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAllRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAllRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAllRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAllRequestValidationError) ErrorName() string { return "ListAllRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListAllRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAllRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAllRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAllRequestValidationError{}

// Validate checks the field values on ListAllReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListAllReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAllReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListAllReplyMultiError, or
// nil if none found.
func (m *ListAllReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAllReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStatus() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAllReplyValidationError{
						field:  fmt.Sprintf("Status[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAllReplyValidationError{
						field:  fmt.Sprintf("Status[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAllReplyValidationError{
					field:  fmt.Sprintf("Status[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAllReplyMultiError(errors)
	}

	return nil
}

// ListAllReplyMultiError is an error wrapping multiple validation errors
// returned by ListAllReply.ValidateAll() if the designated constraints aren't met.
type ListAllReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAllReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAllReplyMultiError) AllErrors() []error { return m }

// ListAllReplyValidationError is the validation error returned by
// ListAllReply.Validate if the designated constraints aren't met.
type ListAllReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAllReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAllReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAllReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAllReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAllReplyValidationError) ErrorName() string { return "ListAllReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListAllReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAllReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAllReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAllReplyValidationError{}

// Validate checks the field values on Config with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Config) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Config with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ConfigMultiError, or nil if none found.
func (m *Config) ValidateAll() error {
	return m.validate(true)
}

func (m *Config) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Topic

	// no validation rules for Endpoint

	if len(errors) > 0 {
		return ConfigMultiError(errors)
	}

	return nil
}

// ConfigMultiError is an error wrapping multiple validation errors returned by
// Config.ValidateAll() if the designated constraints aren't met.
type ConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigMultiError) AllErrors() []error { return m }

// ConfigValidationError is the validation error returned by Config.Validate if
// the designated constraints aren't met.
type ConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigValidationError) ErrorName() string { return "ConfigValidationError" }

// Error satisfies the builtin error interface
func (e ConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigValidationError{}

// Validate checks the field values on Status with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Status) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Status with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StatusMultiError, or nil if none found.
func (m *Status) ValidateAll() error {
	return m.validate(true)
}

func (m *Status) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatusValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatusValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatusValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StatusMultiError(errors)
	}

	return nil
}

// StatusMultiError is an error wrapping multiple validation errors returned by
// Status.ValidateAll() if the designated constraints aren't met.
type StatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatusMultiError) AllErrors() []error { return m }

// StatusValidationError is the validation error returned by Status.Validate if
// the designated constraints aren't met.
type StatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusValidationError) ErrorName() string { return "StatusValidationError" }

// Error satisfies the builtin error interface
func (e StatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusValidationError{}
