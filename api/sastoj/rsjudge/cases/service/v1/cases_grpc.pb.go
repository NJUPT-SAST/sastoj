// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: api/sastoj/rsjudge/cases/service/v1/cases.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CasesService_FetchCases_FullMethodName = "/cases.v1.CasesService/FetchCases"
)

// CasesServiceClient is the client API for CasesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CasesServiceClient interface {
	// Fetch cases from the backend server.
	//
	// Server should return cases in chunks. Each chunk should be around 1kiB.
	//
	// Server should return all chunks in order, or correctly cancel the stream.
	//
	// Server should also put a `cases_id` item in metadata.
	FetchCases(ctx context.Context, in *FetchCasesRequest, opts ...grpc.CallOption) (CasesService_FetchCasesClient, error)
}

type casesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCasesServiceClient(cc grpc.ClientConnInterface) CasesServiceClient {
	return &casesServiceClient{cc}
}

func (c *casesServiceClient) FetchCases(ctx context.Context, in *FetchCasesRequest, opts ...grpc.CallOption) (CasesService_FetchCasesClient, error) {
	stream, err := c.cc.NewStream(ctx, &CasesService_ServiceDesc.Streams[0], CasesService_FetchCases_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &casesServiceFetchCasesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CasesService_FetchCasesClient interface {
	Recv() (*FetchCasesResponse, error)
	grpc.ClientStream
}

type casesServiceFetchCasesClient struct {
	grpc.ClientStream
}

func (x *casesServiceFetchCasesClient) Recv() (*FetchCasesResponse, error) {
	m := new(FetchCasesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CasesServiceServer is the server API for CasesService service.
// All implementations must embed UnimplementedCasesServiceServer
// for forward compatibility
type CasesServiceServer interface {
	// Fetch cases from the backend server.
	//
	// Server should return cases in chunks. Each chunk should be around 1kiB.
	//
	// Server should return all chunks in order, or correctly cancel the stream.
	//
	// Server should also put a `cases_id` item in metadata.
	FetchCases(*FetchCasesRequest, CasesService_FetchCasesServer) error
	mustEmbedUnimplementedCasesServiceServer()
}

// UnimplementedCasesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCasesServiceServer struct {
}

func (UnimplementedCasesServiceServer) FetchCases(*FetchCasesRequest, CasesService_FetchCasesServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchCases not implemented")
}
func (UnimplementedCasesServiceServer) mustEmbedUnimplementedCasesServiceServer() {}

// UnsafeCasesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CasesServiceServer will
// result in compilation errors.
type UnsafeCasesServiceServer interface {
	mustEmbedUnimplementedCasesServiceServer()
}

func RegisterCasesServiceServer(s grpc.ServiceRegistrar, srv CasesServiceServer) {
	s.RegisterService(&CasesService_ServiceDesc, srv)
}

func _CasesService_FetchCases_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchCasesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CasesServiceServer).FetchCases(m, &casesServiceFetchCasesServer{stream})
}

type CasesService_FetchCasesServer interface {
	Send(*FetchCasesResponse) error
	grpc.ServerStream
}

type casesServiceFetchCasesServer struct {
	grpc.ServerStream
}

func (x *casesServiceFetchCasesServer) Send(m *FetchCasesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// CasesService_ServiceDesc is the grpc.ServiceDesc for CasesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CasesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cases.v1.CasesService",
	HandlerType: (*CasesServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchCases",
			Handler:       _CasesService_FetchCases_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/sastoj/rsjudge/cases/service/v1/cases.proto",
}
