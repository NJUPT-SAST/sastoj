// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: sastoj/user/contest/service/v1/contest.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Contest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	State       int32                  `protobuf:"varint,4,opt,name=state,proto3" json:"state,omitempty"`
	Type        int32                  `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
	StartTime   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Language    string                 `protobuf:"bytes,8,opt,name=language,proto3" json:"language,omitempty"`
	ExtraTime   int32                  `protobuf:"varint,9,opt,name=extra_time,json=extraTime,proto3" json:"extra_time,omitempty"`
}

func (x *Contest) Reset() {
	*x = Contest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contest) ProtoMessage() {}

func (x *Contest) ProtoReflect() protoreflect.Message {
	mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contest.ProtoReflect.Descriptor instead.
func (*Contest) Descriptor() ([]byte, []int) {
	return file_sastoj_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{0}
}

func (x *Contest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Contest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Contest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Contest) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *Contest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Contest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Contest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *Contest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Contest) GetExtraTime() int32 {
	if x != nil {
		return x.ExtraTime
	}
	return 0
}

type ListContestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListContestRequest) Reset() {
	*x = ListContestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContestRequest) ProtoMessage() {}

func (x *ListContestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContestRequest.ProtoReflect.Descriptor instead.
func (*ListContestRequest) Descriptor() ([]byte, []int) {
	return file_sastoj_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{1}
}

type ListContestReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contests []*Contest `protobuf:"bytes,1,rep,name=contests,proto3" json:"contests,omitempty"`
}

func (x *ListContestReply) Reset() {
	*x = ListContestReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContestReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContestReply) ProtoMessage() {}

func (x *ListContestReply) ProtoReflect() protoreflect.Message {
	mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContestReply.ProtoReflect.Descriptor instead.
func (*ListContestReply) Descriptor() ([]byte, []int) {
	return file_sastoj_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{2}
}

func (x *ListContestReply) GetContests() []*Contest {
	if x != nil {
		return x.Contests
	}
	return nil
}

type JoinContestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestId       int64            `protobuf:"varint,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	JoinContestBody *JoinContestBody `protobuf:"bytes,2,opt,name=joinContestBody,proto3" json:"joinContestBody,omitempty"`
}

func (x *JoinContestRequest) Reset() {
	*x = JoinContestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinContestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinContestRequest) ProtoMessage() {}

func (x *JoinContestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinContestRequest.ProtoReflect.Descriptor instead.
func (*JoinContestRequest) Descriptor() ([]byte, []int) {
	return file_sastoj_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{3}
}

func (x *JoinContestRequest) GetContestId() int64 {
	if x != nil {
		return x.ContestId
	}
	return 0
}

func (x *JoinContestRequest) GetJoinContestBody() *JoinContestBody {
	if x != nil {
		return x.JoinContestBody
	}
	return nil
}

type JoinContestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsJoin bool `protobuf:"varint,1,opt,name=is_join,json=isJoin,proto3" json:"is_join,omitempty"`
}

func (x *JoinContestBody) Reset() {
	*x = JoinContestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinContestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinContestBody) ProtoMessage() {}

func (x *JoinContestBody) ProtoReflect() protoreflect.Message {
	mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinContestBody.ProtoReflect.Descriptor instead.
func (*JoinContestBody) Descriptor() ([]byte, []int) {
	return file_sastoj_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{4}
}

func (x *JoinContestBody) GetIsJoin() bool {
	if x != nil {
		return x.IsJoin
	}
	return false
}

type JoinContestReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsJoin bool `protobuf:"varint,1,opt,name=is_join,json=isJoin,proto3" json:"is_join,omitempty"`
}

func (x *JoinContestReply) Reset() {
	*x = JoinContestReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinContestReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinContestReply) ProtoMessage() {}

func (x *JoinContestReply) ProtoReflect() protoreflect.Message {
	mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinContestReply.ProtoReflect.Descriptor instead.
func (*JoinContestReply) Descriptor() ([]byte, []int) {
	return file_sastoj_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{5}
}

func (x *JoinContestReply) GetIsJoin() bool {
	if x != nil {
		return x.IsJoin
	}
	return false
}

type GetProblemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestId int64 `protobuf:"varint,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	ProblemId int64 `protobuf:"varint,2,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
}

func (x *GetProblemRequest) Reset() {
	*x = GetProblemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemRequest) ProtoMessage() {}

func (x *GetProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemRequest.ProtoReflect.Descriptor instead.
func (*GetProblemRequest) Descriptor() ([]byte, []int) {
	return file_sastoj_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{6}
}

func (x *GetProblemRequest) GetContestId() int64 {
	if x != nil {
		return x.ContestId
	}
	return 0
}

func (x *GetProblemRequest) GetProblemId() int64 {
	if x != nil {
		return x.ProblemId
	}
	return 0
}

type GetProblemReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title   string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Point   int32  `protobuf:"varint,4,opt,name=point,proto3" json:"point,omitempty"`
}

func (x *GetProblemReply) Reset() {
	*x = GetProblemReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProblemReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemReply) ProtoMessage() {}

func (x *GetProblemReply) ProtoReflect() protoreflect.Message {
	mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemReply.ProtoReflect.Descriptor instead.
func (*GetProblemReply) Descriptor() ([]byte, []int) {
	return file_sastoj_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{7}
}

func (x *GetProblemReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetProblemReply) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetProblemReply) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *GetProblemReply) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

type GetProblemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestId int64 `protobuf:"varint,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
}

func (x *GetProblemsRequest) Reset() {
	*x = GetProblemsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProblemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemsRequest) ProtoMessage() {}

func (x *GetProblemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemsRequest.ProtoReflect.Descriptor instead.
func (*GetProblemsRequest) Descriptor() ([]byte, []int) {
	return file_sastoj_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{8}
}

func (x *GetProblemsRequest) GetContestId() int64 {
	if x != nil {
		return x.ContestId
	}
	return 0
}

type GetProblemsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Problems []*GetProblemsReply_Problem `protobuf:"bytes,1,rep,name=problems,proto3" json:"problems,omitempty"`
}

func (x *GetProblemsReply) Reset() {
	*x = GetProblemsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProblemsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemsReply) ProtoMessage() {}

func (x *GetProblemsReply) ProtoReflect() protoreflect.Message {
	mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemsReply.ProtoReflect.Descriptor instead.
func (*GetProblemsReply) Descriptor() ([]byte, []int) {
	return file_sastoj_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{9}
}

func (x *GetProblemsReply) GetProblems() []*GetProblemsReply_Problem {
	if x != nil {
		return x.Problems
	}
	return nil
}

type SubmitProblemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestId int64  `protobuf:"varint,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	ProblemId int64  `protobuf:"varint,2,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Code      string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Language  string `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *SubmitProblemRequest) Reset() {
	*x = SubmitProblemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitProblemRequest) ProtoMessage() {}

func (x *SubmitProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitProblemRequest.ProtoReflect.Descriptor instead.
func (*SubmitProblemRequest) Descriptor() ([]byte, []int) {
	return file_sastoj_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{10}
}

func (x *SubmitProblemRequest) GetContestId() int64 {
	if x != nil {
		return x.ContestId
	}
	return 0
}

func (x *SubmitProblemRequest) GetProblemId() int64 {
	if x != nil {
		return x.ProblemId
	}
	return 0
}

func (x *SubmitProblemRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SubmitProblemRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type SubmitProblemReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubmitId int64 `protobuf:"varint,1,opt,name=submit_id,json=submitId,proto3" json:"submit_id,omitempty"`
}

func (x *SubmitProblemReply) Reset() {
	*x = SubmitProblemReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitProblemReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitProblemReply) ProtoMessage() {}

func (x *SubmitProblemReply) ProtoReflect() protoreflect.Message {
	mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitProblemReply.ProtoReflect.Descriptor instead.
func (*SubmitProblemReply) Descriptor() ([]byte, []int) {
	return file_sastoj_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{11}
}

func (x *SubmitProblemReply) GetSubmitId() int64 {
	if x != nil {
		return x.SubmitId
	}
	return 0
}

type PretestProblemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestId int64  `protobuf:"varint,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	ProblemId int64  `protobuf:"varint,2,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Code      string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Language  string `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	Input     string `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *PretestProblemRequest) Reset() {
	*x = PretestProblemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PretestProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PretestProblemRequest) ProtoMessage() {}

func (x *PretestProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PretestProblemRequest.ProtoReflect.Descriptor instead.
func (*PretestProblemRequest) Descriptor() ([]byte, []int) {
	return file_sastoj_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{12}
}

func (x *PretestProblemRequest) GetContestId() int64 {
	if x != nil {
		return x.ContestId
	}
	return 0
}

func (x *PretestProblemRequest) GetProblemId() int64 {
	if x != nil {
		return x.ProblemId
	}
	return 0
}

func (x *PretestProblemRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *PretestProblemRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *PretestProblemRequest) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

type PretestProblemReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PretestId string `protobuf:"bytes,1,opt,name=pretest_id,json=pretestId,proto3" json:"pretest_id,omitempty"`
}

func (x *PretestProblemReply) Reset() {
	*x = PretestProblemReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PretestProblemReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PretestProblemReply) ProtoMessage() {}

func (x *PretestProblemReply) ProtoReflect() protoreflect.Message {
	mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PretestProblemReply.ProtoReflect.Descriptor instead.
func (*PretestProblemReply) Descriptor() ([]byte, []int) {
	return file_sastoj_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{13}
}

func (x *PretestProblemReply) GetPretestId() string {
	if x != nil {
		return x.PretestId
	}
	return ""
}

type GetSubmissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestId int64 `protobuf:"varint,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	ProblemId int64 `protobuf:"varint,2,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	SubmitId  int64 `protobuf:"varint,3,opt,name=submit_id,json=submitId,proto3" json:"submit_id,omitempty"`
}

func (x *GetSubmissionRequest) Reset() {
	*x = GetSubmissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubmissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubmissionRequest) ProtoMessage() {}

func (x *GetSubmissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubmissionRequest.ProtoReflect.Descriptor instead.
func (*GetSubmissionRequest) Descriptor() ([]byte, []int) {
	return file_sastoj_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{14}
}

func (x *GetSubmissionRequest) GetContestId() int64 {
	if x != nil {
		return x.ContestId
	}
	return 0
}

func (x *GetSubmissionRequest) GetProblemId() int64 {
	if x != nil {
		return x.ProblemId
	}
	return 0
}

func (x *GetSubmissionRequest) GetSubmitId() int64 {
	if x != nil {
		return x.SubmitId
	}
	return 0
}

type GetSubmissionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code      string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Language  string                 `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
	Point     int32                  `protobuf:"varint,4,opt,name=point,proto3" json:"point,omitempty"`
	Status    int32                  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	TotalTime int32                  `protobuf:"varint,8,opt,name=total_time,json=totalTime,proto3" json:"total_time,omitempty"`
	MaxMemory int32                  `protobuf:"varint,9,opt,name=max_memory,json=maxMemory,proto3" json:"max_memory,omitempty"`
}

func (x *GetSubmissionReply) Reset() {
	*x = GetSubmissionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubmissionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubmissionReply) ProtoMessage() {}

func (x *GetSubmissionReply) ProtoReflect() protoreflect.Message {
	mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubmissionReply.ProtoReflect.Descriptor instead.
func (*GetSubmissionReply) Descriptor() ([]byte, []int) {
	return file_sastoj_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{15}
}

func (x *GetSubmissionReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetSubmissionReply) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetSubmissionReply) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *GetSubmissionReply) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *GetSubmissionReply) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetSubmissionReply) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GetSubmissionReply) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *GetSubmissionReply) GetTotalTime() int32 {
	if x != nil {
		return x.TotalTime
	}
	return 0
}

func (x *GetSubmissionReply) GetMaxMemory() int32 {
	if x != nil {
		return x.MaxMemory
	}
	return 0
}

type GetRankingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestId int64 `protobuf:"varint,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
}

func (x *GetRankingRequest) Reset() {
	*x = GetRankingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRankingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRankingRequest) ProtoMessage() {}

func (x *GetRankingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRankingRequest.ProtoReflect.Descriptor instead.
func (*GetRankingRequest) Descriptor() ([]byte, []int) {
	return file_sastoj_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{16}
}

func (x *GetRankingRequest) GetContestId() int64 {
	if x != nil {
		return x.ContestId
	}
	return 0
}

type GetRankingReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*GetRankingReply_User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *GetRankingReply) Reset() {
	*x = GetRankingReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRankingReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRankingReply) ProtoMessage() {}

func (x *GetRankingReply) ProtoReflect() protoreflect.Message {
	mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRankingReply.ProtoReflect.Descriptor instead.
func (*GetRankingReply) Descriptor() ([]byte, []int) {
	return file_sastoj_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{17}
}

func (x *GetRankingReply) GetUsers() []*GetRankingReply_User {
	if x != nil {
		return x.Users
	}
	return nil
}

type GetProblemsReply_Problem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Point int32  `protobuf:"varint,3,opt,name=point,proto3" json:"point,omitempty"`
	Index int32  `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *GetProblemsReply_Problem) Reset() {
	*x = GetProblemsReply_Problem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProblemsReply_Problem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemsReply_Problem) ProtoMessage() {}

func (x *GetProblemsReply_Problem) ProtoReflect() protoreflect.Message {
	mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemsReply_Problem.ProtoReflect.Descriptor instead.
func (*GetProblemsReply_Problem) Descriptor() ([]byte, []int) {
	return file_sastoj_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{9, 0}
}

func (x *GetProblemsReply_Problem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetProblemsReply_Problem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetProblemsReply_Problem) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *GetProblemsReply_Problem) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type GetRankingReply_User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Score    int32  `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
	Rank     int32  `protobuf:"varint,4,opt,name=rank,proto3" json:"rank,omitempty"`
}

func (x *GetRankingReply_User) Reset() {
	*x = GetRankingReply_User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRankingReply_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRankingReply_User) ProtoMessage() {}

func (x *GetRankingReply_User) ProtoReflect() protoreflect.Message {
	mi := &file_sastoj_user_contest_service_v1_contest_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRankingReply_User.ProtoReflect.Descriptor instead.
func (*GetRankingReply_User) Descriptor() ([]byte, []int) {
	return file_sastoj_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{17, 0}
}

func (x *GetRankingReply_User) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetRankingReply_User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GetRankingReply_User) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *GetRankingReply_User) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

var File_sastoj_user_contest_service_v1_contest_proto protoreflect.FileDescriptor

var file_sastoj_user_contest_service_v1_contest_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xa8, 0x02, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x14, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x5b, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x47, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x22,
	0x92, 0x01, 0x0a, 0x12, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x5d, 0x0a, 0x0f, 0x6a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x42,
	0x6f, 0x64, 0x79, 0x52, 0x0f, 0x6a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x42, 0x6f, 0x64, 0x79, 0x22, 0x2a, 0x0a, 0x0f, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6a, 0x6f,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4a, 0x6f, 0x69, 0x6e,
	0x22, 0x2b, 0x0a, 0x10, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4a, 0x6f, 0x69, 0x6e, 0x22, 0x51, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64,
	0x22, 0x67, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x33, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xc9,
	0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x58, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74,
	0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x1a, 0x5b, 0x0a,
	0x07, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x84, 0x01, 0x0a, 0x14, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x22, 0x31, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x49, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x65, 0x74, 0x65, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x22, 0x34, 0x0a, 0x13, 0x50, 0x72, 0x65, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x65, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x71, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x22, 0xb6, 0x02, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x22, 0x32, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xbf, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4e, 0x0a, 0x05,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x1a, 0x5c, 0x0a, 0x04,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x32, 0xb9, 0x0b, 0x0a, 0x0e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x92, 0x01,
	0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x36, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74,
	0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x15, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x12, 0xb0, 0x01, 0x0a, 0x0b, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x12, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x0f, 0x6a, 0x6f, 0x69, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x1a, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xa8, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x73, 0x12, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74,
	0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73,
	0x12, 0xb1, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12,
	0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73,
	0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x37, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x7d, 0x12, 0xbd, 0x01, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x38, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73,
	0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34,
	0x3a, 0x01, 0x2a, 0x22, 0x2f, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x7d, 0x12, 0xc8, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x74, 0x65, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x39, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61,
	0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65,
	0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x74, 0x65, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x42, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x3c, 0x3a, 0x01, 0x2a, 0x22, 0x37, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x65, 0x74, 0x65, 0x73, 0x74, 0x12,
	0xcd, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x12, 0x42, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x2f, 0x7b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12,
	0xa4, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x35,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74,
	0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x24, 0x12, 0x22, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x54, 0x0a, 0x22, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61,
	0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x2c,
	0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x61, 0x73, 0x74, 0x6f,
	0x6a, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sastoj_user_contest_service_v1_contest_proto_rawDescOnce sync.Once
	file_sastoj_user_contest_service_v1_contest_proto_rawDescData = file_sastoj_user_contest_service_v1_contest_proto_rawDesc
)

func file_sastoj_user_contest_service_v1_contest_proto_rawDescGZIP() []byte {
	file_sastoj_user_contest_service_v1_contest_proto_rawDescOnce.Do(func() {
		file_sastoj_user_contest_service_v1_contest_proto_rawDescData = protoimpl.X.CompressGZIP(file_sastoj_user_contest_service_v1_contest_proto_rawDescData)
	})
	return file_sastoj_user_contest_service_v1_contest_proto_rawDescData
}

var file_sastoj_user_contest_service_v1_contest_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_sastoj_user_contest_service_v1_contest_proto_goTypes = []interface{}{
	(*Contest)(nil),                  // 0: api.sastoj.user.contest.service.v1.Contest
	(*ListContestRequest)(nil),       // 1: api.sastoj.user.contest.service.v1.ListContestRequest
	(*ListContestReply)(nil),         // 2: api.sastoj.user.contest.service.v1.ListContestReply
	(*JoinContestRequest)(nil),       // 3: api.sastoj.user.contest.service.v1.JoinContestRequest
	(*JoinContestBody)(nil),          // 4: api.sastoj.user.contest.service.v1.JoinContestBody
	(*JoinContestReply)(nil),         // 5: api.sastoj.user.contest.service.v1.JoinContestReply
	(*GetProblemRequest)(nil),        // 6: api.sastoj.user.contest.service.v1.GetProblemRequest
	(*GetProblemReply)(nil),          // 7: api.sastoj.user.contest.service.v1.GetProblemReply
	(*GetProblemsRequest)(nil),       // 8: api.sastoj.user.contest.service.v1.GetProblemsRequest
	(*GetProblemsReply)(nil),         // 9: api.sastoj.user.contest.service.v1.GetProblemsReply
	(*SubmitProblemRequest)(nil),     // 10: api.sastoj.user.contest.service.v1.SubmitProblemRequest
	(*SubmitProblemReply)(nil),       // 11: api.sastoj.user.contest.service.v1.SubmitProblemReply
	(*PretestProblemRequest)(nil),    // 12: api.sastoj.user.contest.service.v1.PretestProblemRequest
	(*PretestProblemReply)(nil),      // 13: api.sastoj.user.contest.service.v1.PretestProblemReply
	(*GetSubmissionRequest)(nil),     // 14: api.sastoj.user.contest.service.v1.GetSubmissionRequest
	(*GetSubmissionReply)(nil),       // 15: api.sastoj.user.contest.service.v1.GetSubmissionReply
	(*GetRankingRequest)(nil),        // 16: api.sastoj.user.contest.service.v1.GetRankingRequest
	(*GetRankingReply)(nil),          // 17: api.sastoj.user.contest.service.v1.GetRankingReply
	(*GetProblemsReply_Problem)(nil), // 18: api.sastoj.user.contest.service.v1.GetProblemsReply.Problem
	(*GetRankingReply_User)(nil),     // 19: api.sastoj.user.contest.service.v1.GetRankingReply.User
	(*timestamppb.Timestamp)(nil),    // 20: google.protobuf.Timestamp
}
var file_sastoj_user_contest_service_v1_contest_proto_depIdxs = []int32{
	20, // 0: api.sastoj.user.contest.service.v1.Contest.start_time:type_name -> google.protobuf.Timestamp
	20, // 1: api.sastoj.user.contest.service.v1.Contest.end_time:type_name -> google.protobuf.Timestamp
	0,  // 2: api.sastoj.user.contest.service.v1.ListContestReply.contests:type_name -> api.sastoj.user.contest.service.v1.Contest
	4,  // 3: api.sastoj.user.contest.service.v1.JoinContestRequest.joinContestBody:type_name -> api.sastoj.user.contest.service.v1.JoinContestBody
	18, // 4: api.sastoj.user.contest.service.v1.GetProblemsReply.problems:type_name -> api.sastoj.user.contest.service.v1.GetProblemsReply.Problem
	20, // 5: api.sastoj.user.contest.service.v1.GetSubmissionReply.created_at:type_name -> google.protobuf.Timestamp
	20, // 6: api.sastoj.user.contest.service.v1.GetSubmissionReply.updated_at:type_name -> google.protobuf.Timestamp
	19, // 7: api.sastoj.user.contest.service.v1.GetRankingReply.users:type_name -> api.sastoj.user.contest.service.v1.GetRankingReply.User
	1,  // 8: api.sastoj.user.contest.service.v1.ContestService.ListContest:input_type -> api.sastoj.user.contest.service.v1.ListContestRequest
	3,  // 9: api.sastoj.user.contest.service.v1.ContestService.JoinContest:input_type -> api.sastoj.user.contest.service.v1.JoinContestRequest
	8,  // 10: api.sastoj.user.contest.service.v1.ContestService.GetProblems:input_type -> api.sastoj.user.contest.service.v1.GetProblemsRequest
	6,  // 11: api.sastoj.user.contest.service.v1.ContestService.GetProblem:input_type -> api.sastoj.user.contest.service.v1.GetProblemRequest
	10, // 12: api.sastoj.user.contest.service.v1.ContestService.SubmitProblem:input_type -> api.sastoj.user.contest.service.v1.SubmitProblemRequest
	12, // 13: api.sastoj.user.contest.service.v1.ContestService.PretestProblem:input_type -> api.sastoj.user.contest.service.v1.PretestProblemRequest
	14, // 14: api.sastoj.user.contest.service.v1.ContestService.GetSubmission:input_type -> api.sastoj.user.contest.service.v1.GetSubmissionRequest
	16, // 15: api.sastoj.user.contest.service.v1.ContestService.GetRanking:input_type -> api.sastoj.user.contest.service.v1.GetRankingRequest
	2,  // 16: api.sastoj.user.contest.service.v1.ContestService.ListContest:output_type -> api.sastoj.user.contest.service.v1.ListContestReply
	5,  // 17: api.sastoj.user.contest.service.v1.ContestService.JoinContest:output_type -> api.sastoj.user.contest.service.v1.JoinContestReply
	9,  // 18: api.sastoj.user.contest.service.v1.ContestService.GetProblems:output_type -> api.sastoj.user.contest.service.v1.GetProblemsReply
	7,  // 19: api.sastoj.user.contest.service.v1.ContestService.GetProblem:output_type -> api.sastoj.user.contest.service.v1.GetProblemReply
	11, // 20: api.sastoj.user.contest.service.v1.ContestService.SubmitProblem:output_type -> api.sastoj.user.contest.service.v1.SubmitProblemReply
	13, // 21: api.sastoj.user.contest.service.v1.ContestService.PretestProblem:output_type -> api.sastoj.user.contest.service.v1.PretestProblemReply
	15, // 22: api.sastoj.user.contest.service.v1.ContestService.GetSubmission:output_type -> api.sastoj.user.contest.service.v1.GetSubmissionReply
	17, // 23: api.sastoj.user.contest.service.v1.ContestService.GetRanking:output_type -> api.sastoj.user.contest.service.v1.GetRankingReply
	16, // [16:24] is the sub-list for method output_type
	8,  // [8:16] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_sastoj_user_contest_service_v1_contest_proto_init() }
func file_sastoj_user_contest_service_v1_contest_proto_init() {
	if File_sastoj_user_contest_service_v1_contest_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sastoj_user_contest_service_v1_contest_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sastoj_user_contest_service_v1_contest_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sastoj_user_contest_service_v1_contest_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContestReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sastoj_user_contest_service_v1_contest_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinContestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sastoj_user_contest_service_v1_contest_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinContestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sastoj_user_contest_service_v1_contest_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinContestReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sastoj_user_contest_service_v1_contest_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProblemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sastoj_user_contest_service_v1_contest_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProblemReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sastoj_user_contest_service_v1_contest_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProblemsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sastoj_user_contest_service_v1_contest_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProblemsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sastoj_user_contest_service_v1_contest_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitProblemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sastoj_user_contest_service_v1_contest_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitProblemReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sastoj_user_contest_service_v1_contest_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PretestProblemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sastoj_user_contest_service_v1_contest_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PretestProblemReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sastoj_user_contest_service_v1_contest_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubmissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sastoj_user_contest_service_v1_contest_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubmissionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sastoj_user_contest_service_v1_contest_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRankingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sastoj_user_contest_service_v1_contest_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRankingReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sastoj_user_contest_service_v1_contest_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProblemsReply_Problem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sastoj_user_contest_service_v1_contest_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRankingReply_User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sastoj_user_contest_service_v1_contest_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sastoj_user_contest_service_v1_contest_proto_goTypes,
		DependencyIndexes: file_sastoj_user_contest_service_v1_contest_proto_depIdxs,
		MessageInfos:      file_sastoj_user_contest_service_v1_contest_proto_msgTypes,
	}.Build()
	File_sastoj_user_contest_service_v1_contest_proto = out.File
	file_sastoj_user_contest_service_v1_contest_proto_rawDesc = nil
	file_sastoj_user_contest_service_v1_contest_proto_goTypes = nil
	file_sastoj_user_contest_service_v1_contest_proto_depIdxs = nil
}
