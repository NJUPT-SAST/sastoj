// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: sastoj/user/contest/service/v1/contest.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetContestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetContestsRequest) Reset() {
	*x = GetContestsRequest{}
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetContestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContestsRequest) ProtoMessage() {}

func (x *GetContestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContestsRequest.ProtoReflect.Descriptor instead.
func (*GetContestsRequest) Descriptor() ([]byte, []int) {
	return file_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{0}
}

type GetContestsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contests []*GetContestsReply_Contest `protobuf:"bytes,1,rep,name=contests,proto3" json:"contests,omitempty"`
}

func (x *GetContestsReply) Reset() {
	*x = GetContestsReply{}
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetContestsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContestsReply) ProtoMessage() {}

func (x *GetContestsReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContestsReply.ProtoReflect.Descriptor instead.
func (*GetContestsReply) Descriptor() ([]byte, []int) {
	return file_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{1}
}

func (x *GetContestsReply) GetContests() []*GetContestsReply_Contest {
	if x != nil {
		return x.Contests
	}
	return nil
}

type JoinContestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestId int64                               `protobuf:"varint,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	Body      *JoinContestRequest_JoinContestBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *JoinContestRequest) Reset() {
	*x = JoinContestRequest{}
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinContestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinContestRequest) ProtoMessage() {}

func (x *JoinContestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinContestRequest.ProtoReflect.Descriptor instead.
func (*JoinContestRequest) Descriptor() ([]byte, []int) {
	return file_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{2}
}

func (x *JoinContestRequest) GetContestId() int64 {
	if x != nil {
		return x.ContestId
	}
	return 0
}

func (x *JoinContestRequest) GetBody() *JoinContestRequest_JoinContestBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type JoinContestReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsJoin bool `protobuf:"varint,1,opt,name=is_join,json=isJoin,proto3" json:"is_join,omitempty"`
}

func (x *JoinContestReply) Reset() {
	*x = JoinContestReply{}
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinContestReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinContestReply) ProtoMessage() {}

func (x *JoinContestReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinContestReply.ProtoReflect.Descriptor instead.
func (*JoinContestReply) Descriptor() ([]byte, []int) {
	return file_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{3}
}

func (x *JoinContestReply) GetIsJoin() bool {
	if x != nil {
		return x.IsJoin
	}
	return false
}

type GetProblemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestId int64 `protobuf:"varint,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
}

func (x *GetProblemsRequest) Reset() {
	*x = GetProblemsRequest{}
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProblemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemsRequest) ProtoMessage() {}

func (x *GetProblemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemsRequest.ProtoReflect.Descriptor instead.
func (*GetProblemsRequest) Descriptor() ([]byte, []int) {
	return file_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{4}
}

func (x *GetProblemsRequest) GetContestId() int64 {
	if x != nil {
		return x.ContestId
	}
	return 0
}

type GetProblemsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Problems []*GetProblemsReply_Problem `protobuf:"bytes,1,rep,name=problems,proto3" json:"problems,omitempty"`
}

func (x *GetProblemsReply) Reset() {
	*x = GetProblemsReply{}
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProblemsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemsReply) ProtoMessage() {}

func (x *GetProblemsReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemsReply.ProtoReflect.Descriptor instead.
func (*GetProblemsReply) Descriptor() ([]byte, []int) {
	return file_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{5}
}

func (x *GetProblemsReply) GetProblems() []*GetProblemsReply_Problem {
	if x != nil {
		return x.Problems
	}
	return nil
}

type GetProblemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestId int64 `protobuf:"varint,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	ProblemId int64 `protobuf:"varint,2,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
}

func (x *GetProblemRequest) Reset() {
	*x = GetProblemRequest{}
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemRequest) ProtoMessage() {}

func (x *GetProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemRequest.ProtoReflect.Descriptor instead.
func (*GetProblemRequest) Descriptor() ([]byte, []int) {
	return file_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{6}
}

func (x *GetProblemRequest) GetContestId() int64 {
	if x != nil {
		return x.ContestId
	}
	return 0
}

func (x *GetProblemRequest) GetProblemId() int64 {
	if x != nil {
		return x.ProblemId
	}
	return 0
}

type GetProblemReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type     string            `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Title    string            `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Content  string            `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Score    int32             `protobuf:"varint,5,opt,name=score,proto3" json:"score,omitempty"`
	Metadata map[string]string `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetProblemReply) Reset() {
	*x = GetProblemReply{}
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProblemReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemReply) ProtoMessage() {}

func (x *GetProblemReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemReply.ProtoReflect.Descriptor instead.
func (*GetProblemReply) Descriptor() ([]byte, []int) {
	return file_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{7}
}

func (x *GetProblemReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetProblemReply) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetProblemReply) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetProblemReply) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *GetProblemReply) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *GetProblemReply) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type SubmitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestId int64  `protobuf:"varint,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	ProblemId int64  `protobuf:"varint,2,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Code      string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Language  string `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *SubmitRequest) Reset() {
	*x = SubmitRequest{}
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitRequest) ProtoMessage() {}

func (x *SubmitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitRequest.ProtoReflect.Descriptor instead.
func (*SubmitRequest) Descriptor() ([]byte, []int) {
	return file_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{8}
}

func (x *SubmitRequest) GetContestId() int64 {
	if x != nil {
		return x.ContestId
	}
	return 0
}

func (x *SubmitRequest) GetProblemId() int64 {
	if x != nil {
		return x.ProblemId
	}
	return 0
}

func (x *SubmitRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SubmitRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type SubmitReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *SubmitReply) Reset() {
	*x = SubmitReply{}
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitReply) ProtoMessage() {}

func (x *SubmitReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitReply.ProtoReflect.Descriptor instead.
func (*SubmitReply) Descriptor() ([]byte, []int) {
	return file_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{9}
}

func (x *SubmitReply) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type SelfTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestId int64  `protobuf:"varint,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	ProblemId int64  `protobuf:"varint,2,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Code      string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Language  string `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	Input     string `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *SelfTestRequest) Reset() {
	*x = SelfTestRequest{}
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SelfTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfTestRequest) ProtoMessage() {}

func (x *SelfTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfTestRequest.ProtoReflect.Descriptor instead.
func (*SelfTestRequest) Descriptor() ([]byte, []int) {
	return file_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{10}
}

func (x *SelfTestRequest) GetContestId() int64 {
	if x != nil {
		return x.ContestId
	}
	return 0
}

func (x *SelfTestRequest) GetProblemId() int64 {
	if x != nil {
		return x.ProblemId
	}
	return 0
}

func (x *SelfTestRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SelfTestRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *SelfTestRequest) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

type SelfTestReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *SelfTestReply) Reset() {
	*x = SelfTestReply{}
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SelfTestReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfTestReply) ProtoMessage() {}

func (x *SelfTestReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfTestReply.ProtoReflect.Descriptor instead.
func (*SelfTestReply) Descriptor() ([]byte, []int) {
	return file_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{11}
}

func (x *SelfTestReply) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type GetSubmissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestId    int64  `protobuf:"varint,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	SubmissionId string `protobuf:"bytes,2,opt,name=submission_id,json=submissionId,proto3" json:"submission_id,omitempty"`
}

func (x *GetSubmissionRequest) Reset() {
	*x = GetSubmissionRequest{}
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubmissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubmissionRequest) ProtoMessage() {}

func (x *GetSubmissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubmissionRequest.ProtoReflect.Descriptor instead.
func (*GetSubmissionRequest) Descriptor() ([]byte, []int) {
	return file_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{12}
}

func (x *GetSubmissionRequest) GetContestId() int64 {
	if x != nil {
		return x.ContestId
	}
	return 0
}

func (x *GetSubmissionRequest) GetSubmissionId() string {
	if x != nil {
		return x.SubmissionId
	}
	return ""
}

type GetSubmissionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Code      string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Language  string                 `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
	Point     int32                  `protobuf:"varint,4,opt,name=point,proto3" json:"point,omitempty"`
	State     int32                  `protobuf:"varint,5,opt,name=state,proto3" json:"state,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Stderr    string                 `protobuf:"bytes,7,opt,name=stderr,proto3" json:"stderr,omitempty"`
	TotalTime uint64                 `protobuf:"varint,8,opt,name=total_time,json=totalTime,proto3" json:"total_time,omitempty"`
	MaxMemory uint64                 `protobuf:"varint,9,opt,name=max_memory,json=maxMemory,proto3" json:"max_memory,omitempty"`
}

func (x *GetSubmissionReply) Reset() {
	*x = GetSubmissionReply{}
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubmissionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubmissionReply) ProtoMessage() {}

func (x *GetSubmissionReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubmissionReply.ProtoReflect.Descriptor instead.
func (*GetSubmissionReply) Descriptor() ([]byte, []int) {
	return file_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{13}
}

func (x *GetSubmissionReply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetSubmissionReply) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetSubmissionReply) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *GetSubmissionReply) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *GetSubmissionReply) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *GetSubmissionReply) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GetSubmissionReply) GetStderr() string {
	if x != nil {
		return x.Stderr
	}
	return ""
}

func (x *GetSubmissionReply) GetTotalTime() uint64 {
	if x != nil {
		return x.TotalTime
	}
	return 0
}

func (x *GetSubmissionReply) GetMaxMemory() uint64 {
	if x != nil {
		return x.MaxMemory
	}
	return 0
}

type GetSubmissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestId int64 `protobuf:"varint,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	ProblemId int64 `protobuf:"varint,2,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
}

func (x *GetSubmissionsRequest) Reset() {
	*x = GetSubmissionsRequest{}
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubmissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubmissionsRequest) ProtoMessage() {}

func (x *GetSubmissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubmissionsRequest.ProtoReflect.Descriptor instead.
func (*GetSubmissionsRequest) Descriptor() ([]byte, []int) {
	return file_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{14}
}

func (x *GetSubmissionsRequest) GetContestId() int64 {
	if x != nil {
		return x.ContestId
	}
	return 0
}

func (x *GetSubmissionsRequest) GetProblemId() int64 {
	if x != nil {
		return x.ProblemId
	}
	return 0
}

type GetSubmissionsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Submissions []*GetSubmissionsReply_Submission `protobuf:"bytes,1,rep,name=submissions,proto3" json:"submissions,omitempty"`
}

func (x *GetSubmissionsReply) Reset() {
	*x = GetSubmissionsReply{}
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubmissionsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubmissionsReply) ProtoMessage() {}

func (x *GetSubmissionsReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubmissionsReply.ProtoReflect.Descriptor instead.
func (*GetSubmissionsReply) Descriptor() ([]byte, []int) {
	return file_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{15}
}

func (x *GetSubmissionsReply) GetSubmissions() []*GetSubmissionsReply_Submission {
	if x != nil {
		return x.Submissions
	}
	return nil
}

type GetSelfTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestId  int64  `protobuf:"varint,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	SelfTestId string `protobuf:"bytes,2,opt,name=self_test_id,json=selfTestId,proto3" json:"self_test_id,omitempty"`
}

func (x *GetSelfTestRequest) Reset() {
	*x = GetSelfTestRequest{}
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSelfTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSelfTestRequest) ProtoMessage() {}

func (x *GetSelfTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSelfTestRequest.ProtoReflect.Descriptor instead.
func (*GetSelfTestRequest) Descriptor() ([]byte, []int) {
	return file_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{16}
}

func (x *GetSelfTestRequest) GetContestId() int64 {
	if x != nil {
		return x.ContestId
	}
	return 0
}

func (x *GetSelfTestRequest) GetSelfTestId() string {
	if x != nil {
		return x.SelfTestId
	}
	return ""
}

type GetSelfTestReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsCompiled bool   `protobuf:"varint,1,opt,name=is_compiled,json=isCompiled,proto3" json:"is_compiled,omitempty"`
	CompileMsg string `protobuf:"bytes,2,opt,name=compile_msg,json=compileMsg,proto3" json:"compile_msg,omitempty"`
	Stdout     string `protobuf:"bytes,3,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr     string `protobuf:"bytes,4,opt,name=stderr,proto3" json:"stderr,omitempty"`
	Time       uint64 `protobuf:"varint,5,opt,name=time,proto3" json:"time,omitempty"`
	Memory     uint64 `protobuf:"varint,6,opt,name=memory,proto3" json:"memory,omitempty"`
}

func (x *GetSelfTestReply) Reset() {
	*x = GetSelfTestReply{}
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSelfTestReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSelfTestReply) ProtoMessage() {}

func (x *GetSelfTestReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSelfTestReply.ProtoReflect.Descriptor instead.
func (*GetSelfTestReply) Descriptor() ([]byte, []int) {
	return file_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{17}
}

func (x *GetSelfTestReply) GetIsCompiled() bool {
	if x != nil {
		return x.IsCompiled
	}
	return false
}

func (x *GetSelfTestReply) GetCompileMsg() string {
	if x != nil {
		return x.CompileMsg
	}
	return ""
}

func (x *GetSelfTestReply) GetStdout() string {
	if x != nil {
		return x.Stdout
	}
	return ""
}

func (x *GetSelfTestReply) GetStderr() string {
	if x != nil {
		return x.Stderr
	}
	return ""
}

func (x *GetSelfTestReply) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *GetSelfTestReply) GetMemory() uint64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

type GetCasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestId    int64  `protobuf:"varint,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	SubmissionId string `protobuf:"bytes,2,opt,name=submission_id,json=submissionId,proto3" json:"submission_id,omitempty"`
}

func (x *GetCasesRequest) Reset() {
	*x = GetCasesRequest{}
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCasesRequest) ProtoMessage() {}

func (x *GetCasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCasesRequest.ProtoReflect.Descriptor instead.
func (*GetCasesRequest) Descriptor() ([]byte, []int) {
	return file_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{18}
}

func (x *GetCasesRequest) GetContestId() int64 {
	if x != nil {
		return x.ContestId
	}
	return 0
}

func (x *GetCasesRequest) GetSubmissionId() string {
	if x != nil {
		return x.SubmissionId
	}
	return ""
}

type GetCasesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cases []*GetCasesReply_Case `protobuf:"bytes,1,rep,name=cases,proto3" json:"cases,omitempty"`
}

func (x *GetCasesReply) Reset() {
	*x = GetCasesReply{}
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCasesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCasesReply) ProtoMessage() {}

func (x *GetCasesReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCasesReply.ProtoReflect.Descriptor instead.
func (*GetCasesReply) Descriptor() ([]byte, []int) {
	return file_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{19}
}

func (x *GetCasesReply) GetCases() []*GetCasesReply_Case {
	if x != nil {
		return x.Cases
	}
	return nil
}

type ListRankingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestId int64 `protobuf:"varint,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
}

func (x *ListRankingRequest) Reset() {
	*x = ListRankingRequest{}
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRankingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRankingRequest) ProtoMessage() {}

func (x *ListRankingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRankingRequest.ProtoReflect.Descriptor instead.
func (*ListRankingRequest) Descriptor() ([]byte, []int) {
	return file_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{20}
}

func (x *ListRankingRequest) GetContestId() int64 {
	if x != nil {
		return x.ContestId
	}
	return 0
}

type ListRankingReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*ListRankingReply_UserResult `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *ListRankingReply) Reset() {
	*x = ListRankingReply{}
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRankingReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRankingReply) ProtoMessage() {}

func (x *ListRankingReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRankingReply.ProtoReflect.Descriptor instead.
func (*ListRankingReply) Descriptor() ([]byte, []int) {
	return file_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{21}
}

func (x *ListRankingReply) GetUsers() []*ListRankingReply_UserResult {
	if x != nil {
		return x.Users
	}
	return nil
}

type UpdateSubmissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubmissionId string `protobuf:"bytes,1,opt,name=submission_id,json=submissionId,proto3" json:"submission_id,omitempty"`
	Status       int32  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Point        *int32 `protobuf:"varint,3,opt,name=point,proto3,oneof" json:"point,omitempty"`
	TotalTime    *int32 `protobuf:"varint,4,opt,name=total_time,json=totalTime,proto3,oneof" json:"total_time,omitempty"`
	MaxMemory    *int32 `protobuf:"varint,5,opt,name=max_memory,json=maxMemory,proto3,oneof" json:"max_memory,omitempty"`
}

func (x *UpdateSubmissionRequest) Reset() {
	*x = UpdateSubmissionRequest{}
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSubmissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubmissionRequest) ProtoMessage() {}

func (x *UpdateSubmissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubmissionRequest.ProtoReflect.Descriptor instead.
func (*UpdateSubmissionRequest) Descriptor() ([]byte, []int) {
	return file_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateSubmissionRequest) GetSubmissionId() string {
	if x != nil {
		return x.SubmissionId
	}
	return ""
}

func (x *UpdateSubmissionRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateSubmissionRequest) GetPoint() int32 {
	if x != nil && x.Point != nil {
		return *x.Point
	}
	return 0
}

func (x *UpdateSubmissionRequest) GetTotalTime() int32 {
	if x != nil && x.TotalTime != nil {
		return *x.TotalTime
	}
	return 0
}

func (x *UpdateSubmissionRequest) GetMaxMemory() int32 {
	if x != nil && x.MaxMemory != nil {
		return *x.MaxMemory
	}
	return 0
}

type UpdateSubmissionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *UpdateSubmissionReply) Reset() {
	*x = UpdateSubmissionReply{}
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSubmissionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubmissionReply) ProtoMessage() {}

func (x *UpdateSubmissionReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubmissionReply.ProtoReflect.Descriptor instead.
func (*UpdateSubmissionReply) Descriptor() ([]byte, []int) {
	return file_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateSubmissionReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type UpdateSelfTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfTestId string `protobuf:"bytes,1,opt,name=self_test_id,json=selfTestId,proto3" json:"self_test_id,omitempty"`
	Output     string `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *UpdateSelfTestRequest) Reset() {
	*x = UpdateSelfTestRequest{}
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSelfTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSelfTestRequest) ProtoMessage() {}

func (x *UpdateSelfTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSelfTestRequest.ProtoReflect.Descriptor instead.
func (*UpdateSelfTestRequest) Descriptor() ([]byte, []int) {
	return file_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateSelfTestRequest) GetSelfTestId() string {
	if x != nil {
		return x.SelfTestId
	}
	return ""
}

func (x *UpdateSelfTestRequest) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

type UpdateSelfTestReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *UpdateSelfTestReply) Reset() {
	*x = UpdateSelfTestReply{}
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSelfTestReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSelfTestReply) ProtoMessage() {}

func (x *UpdateSelfTestReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSelfTestReply.ProtoReflect.Descriptor instead.
func (*UpdateSelfTestReply) Descriptor() ([]byte, []int) {
	return file_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateSelfTestReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type RegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Secret   string `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{26}
}

func (x *RegisterRequest) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *RegisterRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

type RegisterReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *RegisterReply) Reset() {
	*x = RegisterReply{}
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterReply) ProtoMessage() {}

func (x *RegisterReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterReply.ProtoReflect.Descriptor instead.
func (*RegisterReply) Descriptor() ([]byte, []int) {
	return file_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{27}
}

func (x *RegisterReply) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetContestsReply_Contest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	State       int32                  `protobuf:"varint,4,opt,name=state,proto3" json:"state,omitempty"`
	Type        int32                  `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
	StartTime   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Language    string                 `protobuf:"bytes,8,opt,name=language,proto3" json:"language,omitempty"`
	ExtraTime   int32                  `protobuf:"varint,9,opt,name=extra_time,json=extraTime,proto3" json:"extra_time,omitempty"`
	Contestants []int64                `protobuf:"varint,10,rep,packed,name=contestants,proto3" json:"contestants,omitempty"`
}

func (x *GetContestsReply_Contest) Reset() {
	*x = GetContestsReply_Contest{}
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetContestsReply_Contest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContestsReply_Contest) ProtoMessage() {}

func (x *GetContestsReply_Contest) ProtoReflect() protoreflect.Message {
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContestsReply_Contest.ProtoReflect.Descriptor instead.
func (*GetContestsReply_Contest) Descriptor() ([]byte, []int) {
	return file_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{1, 0}
}

func (x *GetContestsReply_Contest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetContestsReply_Contest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetContestsReply_Contest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetContestsReply_Contest) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *GetContestsReply_Contest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *GetContestsReply_Contest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetContestsReply_Contest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *GetContestsReply_Contest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *GetContestsReply_Contest) GetExtraTime() int32 {
	if x != nil {
		return x.ExtraTime
	}
	return 0
}

func (x *GetContestsReply_Contest) GetContestants() []int64 {
	if x != nil {
		return x.Contestants
	}
	return nil
}

type JoinContestRequest_JoinContestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsJoin bool `protobuf:"varint,1,opt,name=is_join,json=isJoin,proto3" json:"is_join,omitempty"`
}

func (x *JoinContestRequest_JoinContestBody) Reset() {
	*x = JoinContestRequest_JoinContestBody{}
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinContestRequest_JoinContestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinContestRequest_JoinContestBody) ProtoMessage() {}

func (x *JoinContestRequest_JoinContestBody) ProtoReflect() protoreflect.Message {
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinContestRequest_JoinContestBody.ProtoReflect.Descriptor instead.
func (*JoinContestRequest_JoinContestBody) Descriptor() ([]byte, []int) {
	return file_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{2, 0}
}

func (x *JoinContestRequest_JoinContestBody) GetIsJoin() bool {
	if x != nil {
		return x.IsJoin
	}
	return false
}

type GetProblemsReply_Problem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type     string            `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Title    string            `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Score    int32             `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`
	Index    int32             `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
	Metadata map[string]string `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetProblemsReply_Problem) Reset() {
	*x = GetProblemsReply_Problem{}
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProblemsReply_Problem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemsReply_Problem) ProtoMessage() {}

func (x *GetProblemsReply_Problem) ProtoReflect() protoreflect.Message {
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemsReply_Problem.ProtoReflect.Descriptor instead.
func (*GetProblemsReply_Problem) Descriptor() ([]byte, []int) {
	return file_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{5, 0}
}

func (x *GetProblemsReply_Problem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetProblemsReply_Problem) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetProblemsReply_Problem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetProblemsReply_Problem) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *GetProblemsReply_Problem) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *GetProblemsReply_Problem) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type GetSubmissionsReply_Submission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Language  string                 `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	Point     int32                  `protobuf:"varint,3,opt,name=point,proto3" json:"point,omitempty"`
	Status    int32                  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *GetSubmissionsReply_Submission) Reset() {
	*x = GetSubmissionsReply_Submission{}
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubmissionsReply_Submission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubmissionsReply_Submission) ProtoMessage() {}

func (x *GetSubmissionsReply_Submission) ProtoReflect() protoreflect.Message {
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubmissionsReply_Submission.ProtoReflect.Descriptor instead.
func (*GetSubmissionsReply_Submission) Descriptor() ([]byte, []int) {
	return file_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{15, 0}
}

func (x *GetSubmissionsReply_Submission) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetSubmissionsReply_Submission) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *GetSubmissionsReply_Submission) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *GetSubmissionsReply_Submission) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetSubmissionsReply_Submission) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type GetCasesReply_Case struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index  int32  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Point  int32  `protobuf:"varint,2,opt,name=point,proto3" json:"point,omitempty"`
	State  int32  `protobuf:"varint,3,opt,name=state,proto3" json:"state,omitempty"`
	Time   uint64 `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	Memory uint64 `protobuf:"varint,5,opt,name=memory,proto3" json:"memory,omitempty"`
}

func (x *GetCasesReply_Case) Reset() {
	*x = GetCasesReply_Case{}
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCasesReply_Case) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCasesReply_Case) ProtoMessage() {}

func (x *GetCasesReply_Case) ProtoReflect() protoreflect.Message {
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCasesReply_Case.ProtoReflect.Descriptor instead.
func (*GetCasesReply_Case) Descriptor() ([]byte, []int) {
	return file_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{19, 0}
}

func (x *GetCasesReply_Case) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *GetCasesReply_Case) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *GetCasesReply_Case) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *GetCasesReply_Case) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *GetCasesReply_Case) GetMemory() uint64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

type ListRankingReply_UserResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Problems   []*ListRankingReply_UserResult_ProblemResult `protobuf:"bytes,1,rep,name=problems,proto3" json:"problems,omitempty"`
	Username   string                                       `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	TotalScore int32                                        `protobuf:"varint,3,opt,name=total_score,json=totalScore,proto3" json:"total_score,omitempty"`
	Rank       int32                                        `protobuf:"varint,4,opt,name=rank,proto3" json:"rank,omitempty"`
	Penalty    int32                                        `protobuf:"varint,5,opt,name=penalty,proto3" json:"penalty,omitempty"`
}

func (x *ListRankingReply_UserResult) Reset() {
	*x = ListRankingReply_UserResult{}
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRankingReply_UserResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRankingReply_UserResult) ProtoMessage() {}

func (x *ListRankingReply_UserResult) ProtoReflect() protoreflect.Message {
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRankingReply_UserResult.ProtoReflect.Descriptor instead.
func (*ListRankingReply_UserResult) Descriptor() ([]byte, []int) {
	return file_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{21, 0}
}

func (x *ListRankingReply_UserResult) GetProblems() []*ListRankingReply_UserResult_ProblemResult {
	if x != nil {
		return x.Problems
	}
	return nil
}

func (x *ListRankingReply_UserResult) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ListRankingReply_UserResult) GetTotalScore() int32 {
	if x != nil {
		return x.TotalScore
	}
	return 0
}

func (x *ListRankingReply_UserResult) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *ListRankingReply_UserResult) GetPenalty() int32 {
	if x != nil {
		return x.Penalty
	}
	return 0
}

type ListRankingReply_UserResult_ProblemResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId         int64                  `protobuf:"varint,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	State             int32                  `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	Point             int32                  `protobuf:"varint,3,opt,name=point,proto3" json:"point,omitempty"`
	TriedTimes        int32                  `protobuf:"varint,4,opt,name=tried_times,json=triedTimes,proto3" json:"tried_times,omitempty"`
	ScoreAchievedTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=score_achieved_time,json=scoreAchievedTime,proto3" json:"score_achieved_time,omitempty"`
}

func (x *ListRankingReply_UserResult_ProblemResult) Reset() {
	*x = ListRankingReply_UserResult_ProblemResult{}
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRankingReply_UserResult_ProblemResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRankingReply_UserResult_ProblemResult) ProtoMessage() {}

func (x *ListRankingReply_UserResult_ProblemResult) ProtoReflect() protoreflect.Message {
	mi := &file_user_contest_service_v1_contest_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRankingReply_UserResult_ProblemResult.ProtoReflect.Descriptor instead.
func (*ListRankingReply_UserResult_ProblemResult) Descriptor() ([]byte, []int) {
	return file_user_contest_service_v1_contest_proto_rawDescGZIP(), []int{21, 0, 0}
}

func (x *ListRankingReply_UserResult_ProblemResult) GetProblemId() int64 {
	if x != nil {
		return x.ProblemId
	}
	return 0
}

func (x *ListRankingReply_UserResult_ProblemResult) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *ListRankingReply_UserResult_ProblemResult) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *ListRankingReply_UserResult_ProblemResult) GetTriedTimes() int32 {
	if x != nil {
		return x.TriedTimes
	}
	return 0
}

func (x *ListRankingReply_UserResult_ProblemResult) GetScoreAchievedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScoreAchievedTime
	}
	return nil
}

var File_user_contest_service_v1_contest_proto protoreflect.FileDescriptor

var file_user_contest_service_v1_contest_proto_rawDesc = []byte{
	0x0a, 0x25, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73,
	0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x14, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xb9, 0x03, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x58, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61,
	0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x1a,
	0xca, 0x02, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x22, 0xbb, 0x01, 0x0a,
	0x12, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x5a, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x46, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x1a, 0x2a,
	0x0a, 0x0f, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4a, 0x6f, 0x69, 0x6e, 0x22, 0x2b, 0x0a, 0x10, 0x4a, 0x6f,
	0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x69, 0x73, 0x4a, 0x6f, 0x69, 0x6e, 0x22, 0x33, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x83, 0x03, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x58, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x1a, 0x94, 0x02, 0x0a, 0x07,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x66, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x4a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x51, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x97, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x5d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74,
	0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x7d, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x21,
	0x0a, 0x0b, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x22, 0x95, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x6c, 0x66, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x23, 0x0a, 0x0d, 0x53, 0x65, 0x6c,
	0x66, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x5a,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x91, 0x02, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x65,
	0x72, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x22, 0x55,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x9f, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x64, 0x0a,
	0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x42, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0xa1, 0x01, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x55, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x6c, 0x66, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c,
	0x73, 0x65, 0x6c, 0x66, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x66, 0x54, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xb0,
	0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70,
	0x69, 0x6c, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x5f,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x69,
	0x6c, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x64, 0x65, 0x72, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x22, 0x55, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xd3, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4c, 0x0a, 0x05, 0x63, 0x61,
	0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x61, 0x73,
	0x65, 0x52, 0x05, 0x63, 0x61, 0x73, 0x65, 0x73, 0x1a, 0x74, 0x0a, 0x04, 0x43, 0x61, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x22, 0x33,
	0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x22, 0x98, 0x04, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x55, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61,
	0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x1a,
	0xac, 0x03, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x69,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x4d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x6e,
	0x61, 0x6c, 0x74, 0x79, 0x1a, 0xc7, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x72, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x12, 0x4a, 0x0a, 0x13, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xe1,
	0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x09, 0x6d, 0x61,
	0x78, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x22, 0x31, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x51, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x6c, 0x66, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x66, 0x54, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x2f, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x45, 0x0a, 0x0f, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x22, 0x25, 0x0a, 0x0d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0xd6, 0x12, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x12, 0x93, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x12, 0xa3, 0x01, 0x0a, 0x0b, 0x4a, 0x6f,
	0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4a,
	0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a,
	0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12,
	0xa9, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x12,
	0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61,
	0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x12, 0xb3, 0x01, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x35, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x12, 0x31,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x7d, 0x12, 0xb5, 0x01, 0x0a, 0x06, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x12, 0x31, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x3a, 0x01, 0x2a, 0x22, 0x3c, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0xb5, 0x01, 0x0a, 0x08, 0x53, 0x65,
	0x6c, 0x66, 0x54, 0x65, 0x73, 0x74, 0x12, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73,
	0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x66,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x6c, 0x66, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x41,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x3a, 0x01, 0x2a, 0x22, 0x36, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x12, 0xc2, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x12, 0x37, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xcb, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f,
	0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x45, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x12, 0x3d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0xba, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x66,
	0x54, 0x65, 0x73, 0x74, 0x12, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f,
	0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c,
	0x66, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12, 0x35, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x6c, 0x66, 0x2d, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x7d, 0x12, 0xb9, 0x01, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x12, 0x33,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x12, 0x3d,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x12, 0xa8, 0x01,
	0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74,
	0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x72, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f,
	0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x8a, 0x01, 0x0a,
	0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x3b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x84, 0x01, 0x0a, 0x0e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x54, 0x65, 0x73, 0x74, 0x12, 0x39, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61,
	0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x42, 0x93, 0x02, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x73,
	0x74, 0x6f, 0x6a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2c, 0x73, 0x61, 0x73,
	0x74, 0x6f, 0x6a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0xa2, 0x02, 0x05, 0x41, 0x53, 0x55, 0x43,
	0x53, 0xaa, 0x02, 0x22, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x22, 0x41, 0x70, 0x69, 0x5c, 0x53, 0x61, 0x73,
	0x74, 0x6f, 0x6a, 0x5c, 0x55, 0x73, 0x65, 0x72, 0x5c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x2e, 0x41, 0x70,
	0x69, 0x5c, 0x53, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x5c, 0x55, 0x73, 0x65, 0x72, 0x5c, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x31,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x27, 0x41,
	0x70, 0x69, 0x3a, 0x3a, 0x53, 0x61, 0x73, 0x74, 0x6f, 0x6a, 0x3a, 0x3a, 0x55, 0x73, 0x65, 0x72,
	0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x3a, 0x3a, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_user_contest_service_v1_contest_proto_rawDescOnce sync.Once
	file_user_contest_service_v1_contest_proto_rawDescData = file_user_contest_service_v1_contest_proto_rawDesc
)

func file_user_contest_service_v1_contest_proto_rawDescGZIP() []byte {
	file_user_contest_service_v1_contest_proto_rawDescOnce.Do(func() {
		file_user_contest_service_v1_contest_proto_rawDescData = protoimpl.X.CompressGZIP(file_user_contest_service_v1_contest_proto_rawDescData)
	})
	return file_user_contest_service_v1_contest_proto_rawDescData
}

var file_user_contest_service_v1_contest_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_user_contest_service_v1_contest_proto_goTypes = []any{
	(*GetContestsRequest)(nil),                        // 0: api.sastoj.user.contest.service.v1.GetContestsRequest
	(*GetContestsReply)(nil),                          // 1: api.sastoj.user.contest.service.v1.GetContestsReply
	(*JoinContestRequest)(nil),                        // 2: api.sastoj.user.contest.service.v1.JoinContestRequest
	(*JoinContestReply)(nil),                          // 3: api.sastoj.user.contest.service.v1.JoinContestReply
	(*GetProblemsRequest)(nil),                        // 4: api.sastoj.user.contest.service.v1.GetProblemsRequest
	(*GetProblemsReply)(nil),                          // 5: api.sastoj.user.contest.service.v1.GetProblemsReply
	(*GetProblemRequest)(nil),                         // 6: api.sastoj.user.contest.service.v1.GetProblemRequest
	(*GetProblemReply)(nil),                           // 7: api.sastoj.user.contest.service.v1.GetProblemReply
	(*SubmitRequest)(nil),                             // 8: api.sastoj.user.contest.service.v1.SubmitRequest
	(*SubmitReply)(nil),                               // 9: api.sastoj.user.contest.service.v1.SubmitReply
	(*SelfTestRequest)(nil),                           // 10: api.sastoj.user.contest.service.v1.SelfTestRequest
	(*SelfTestReply)(nil),                             // 11: api.sastoj.user.contest.service.v1.SelfTestReply
	(*GetSubmissionRequest)(nil),                      // 12: api.sastoj.user.contest.service.v1.GetSubmissionRequest
	(*GetSubmissionReply)(nil),                        // 13: api.sastoj.user.contest.service.v1.GetSubmissionReply
	(*GetSubmissionsRequest)(nil),                     // 14: api.sastoj.user.contest.service.v1.GetSubmissionsRequest
	(*GetSubmissionsReply)(nil),                       // 15: api.sastoj.user.contest.service.v1.GetSubmissionsReply
	(*GetSelfTestRequest)(nil),                        // 16: api.sastoj.user.contest.service.v1.GetSelfTestRequest
	(*GetSelfTestReply)(nil),                          // 17: api.sastoj.user.contest.service.v1.GetSelfTestReply
	(*GetCasesRequest)(nil),                           // 18: api.sastoj.user.contest.service.v1.GetCasesRequest
	(*GetCasesReply)(nil),                             // 19: api.sastoj.user.contest.service.v1.GetCasesReply
	(*ListRankingRequest)(nil),                        // 20: api.sastoj.user.contest.service.v1.ListRankingRequest
	(*ListRankingReply)(nil),                          // 21: api.sastoj.user.contest.service.v1.ListRankingReply
	(*UpdateSubmissionRequest)(nil),                   // 22: api.sastoj.user.contest.service.v1.UpdateSubmissionRequest
	(*UpdateSubmissionReply)(nil),                     // 23: api.sastoj.user.contest.service.v1.UpdateSubmissionReply
	(*UpdateSelfTestRequest)(nil),                     // 24: api.sastoj.user.contest.service.v1.UpdateSelfTestRequest
	(*UpdateSelfTestReply)(nil),                       // 25: api.sastoj.user.contest.service.v1.UpdateSelfTestReply
	(*RegisterRequest)(nil),                           // 26: api.sastoj.user.contest.service.v1.RegisterRequest
	(*RegisterReply)(nil),                             // 27: api.sastoj.user.contest.service.v1.RegisterReply
	(*GetContestsReply_Contest)(nil),                  // 28: api.sastoj.user.contest.service.v1.GetContestsReply.Contest
	(*JoinContestRequest_JoinContestBody)(nil),        // 29: api.sastoj.user.contest.service.v1.JoinContestRequest.JoinContestBody
	(*GetProblemsReply_Problem)(nil),                  // 30: api.sastoj.user.contest.service.v1.GetProblemsReply.Problem
	nil,                                               // 31: api.sastoj.user.contest.service.v1.GetProblemsReply.Problem.MetadataEntry
	nil,                                               // 32: api.sastoj.user.contest.service.v1.GetProblemReply.MetadataEntry
	(*GetSubmissionsReply_Submission)(nil),            // 33: api.sastoj.user.contest.service.v1.GetSubmissionsReply.Submission
	(*GetCasesReply_Case)(nil),                        // 34: api.sastoj.user.contest.service.v1.GetCasesReply.Case
	(*ListRankingReply_UserResult)(nil),               // 35: api.sastoj.user.contest.service.v1.ListRankingReply.UserResult
	(*ListRankingReply_UserResult_ProblemResult)(nil), // 36: api.sastoj.user.contest.service.v1.ListRankingReply.UserResult.ProblemResult
	(*timestamppb.Timestamp)(nil),                     // 37: google.protobuf.Timestamp
}
var file_user_contest_service_v1_contest_proto_depIdxs = []int32{
	28, // 0: api.sastoj.user.contest.service.v1.GetContestsReply.contests:type_name -> api.sastoj.user.contest.service.v1.GetContestsReply.Contest
	29, // 1: api.sastoj.user.contest.service.v1.JoinContestRequest.body:type_name -> api.sastoj.user.contest.service.v1.JoinContestRequest.JoinContestBody
	30, // 2: api.sastoj.user.contest.service.v1.GetProblemsReply.problems:type_name -> api.sastoj.user.contest.service.v1.GetProblemsReply.Problem
	32, // 3: api.sastoj.user.contest.service.v1.GetProblemReply.metadata:type_name -> api.sastoj.user.contest.service.v1.GetProblemReply.MetadataEntry
	37, // 4: api.sastoj.user.contest.service.v1.GetSubmissionReply.created_at:type_name -> google.protobuf.Timestamp
	33, // 5: api.sastoj.user.contest.service.v1.GetSubmissionsReply.submissions:type_name -> api.sastoj.user.contest.service.v1.GetSubmissionsReply.Submission
	34, // 6: api.sastoj.user.contest.service.v1.GetCasesReply.cases:type_name -> api.sastoj.user.contest.service.v1.GetCasesReply.Case
	35, // 7: api.sastoj.user.contest.service.v1.ListRankingReply.users:type_name -> api.sastoj.user.contest.service.v1.ListRankingReply.UserResult
	37, // 8: api.sastoj.user.contest.service.v1.GetContestsReply.Contest.start_time:type_name -> google.protobuf.Timestamp
	37, // 9: api.sastoj.user.contest.service.v1.GetContestsReply.Contest.end_time:type_name -> google.protobuf.Timestamp
	31, // 10: api.sastoj.user.contest.service.v1.GetProblemsReply.Problem.metadata:type_name -> api.sastoj.user.contest.service.v1.GetProblemsReply.Problem.MetadataEntry
	37, // 11: api.sastoj.user.contest.service.v1.GetSubmissionsReply.Submission.created_at:type_name -> google.protobuf.Timestamp
	36, // 12: api.sastoj.user.contest.service.v1.ListRankingReply.UserResult.problems:type_name -> api.sastoj.user.contest.service.v1.ListRankingReply.UserResult.ProblemResult
	37, // 13: api.sastoj.user.contest.service.v1.ListRankingReply.UserResult.ProblemResult.score_achieved_time:type_name -> google.protobuf.Timestamp
	0,  // 14: api.sastoj.user.contest.service.v1.Contest.GetContests:input_type -> api.sastoj.user.contest.service.v1.GetContestsRequest
	2,  // 15: api.sastoj.user.contest.service.v1.Contest.JoinContest:input_type -> api.sastoj.user.contest.service.v1.JoinContestRequest
	4,  // 16: api.sastoj.user.contest.service.v1.Contest.GetProblems:input_type -> api.sastoj.user.contest.service.v1.GetProblemsRequest
	6,  // 17: api.sastoj.user.contest.service.v1.Contest.GetProblem:input_type -> api.sastoj.user.contest.service.v1.GetProblemRequest
	8,  // 18: api.sastoj.user.contest.service.v1.Contest.Submit:input_type -> api.sastoj.user.contest.service.v1.SubmitRequest
	10, // 19: api.sastoj.user.contest.service.v1.Contest.SelfTest:input_type -> api.sastoj.user.contest.service.v1.SelfTestRequest
	12, // 20: api.sastoj.user.contest.service.v1.Contest.GetSubmission:input_type -> api.sastoj.user.contest.service.v1.GetSubmissionRequest
	14, // 21: api.sastoj.user.contest.service.v1.Contest.GetSubmissions:input_type -> api.sastoj.user.contest.service.v1.GetSubmissionsRequest
	16, // 22: api.sastoj.user.contest.service.v1.Contest.GetSelfTest:input_type -> api.sastoj.user.contest.service.v1.GetSelfTestRequest
	18, // 23: api.sastoj.user.contest.service.v1.Contest.GetCases:input_type -> api.sastoj.user.contest.service.v1.GetCasesRequest
	20, // 24: api.sastoj.user.contest.service.v1.Contest.ListRanking:input_type -> api.sastoj.user.contest.service.v1.ListRankingRequest
	26, // 25: api.sastoj.user.contest.service.v1.Contest.Register:input_type -> api.sastoj.user.contest.service.v1.RegisterRequest
	22, // 26: api.sastoj.user.contest.service.v1.Contest.UpdateSubmission:input_type -> api.sastoj.user.contest.service.v1.UpdateSubmissionRequest
	24, // 27: api.sastoj.user.contest.service.v1.Contest.UpdateSelfTest:input_type -> api.sastoj.user.contest.service.v1.UpdateSelfTestRequest
	1,  // 28: api.sastoj.user.contest.service.v1.Contest.GetContests:output_type -> api.sastoj.user.contest.service.v1.GetContestsReply
	3,  // 29: api.sastoj.user.contest.service.v1.Contest.JoinContest:output_type -> api.sastoj.user.contest.service.v1.JoinContestReply
	5,  // 30: api.sastoj.user.contest.service.v1.Contest.GetProblems:output_type -> api.sastoj.user.contest.service.v1.GetProblemsReply
	7,  // 31: api.sastoj.user.contest.service.v1.Contest.GetProblem:output_type -> api.sastoj.user.contest.service.v1.GetProblemReply
	9,  // 32: api.sastoj.user.contest.service.v1.Contest.Submit:output_type -> api.sastoj.user.contest.service.v1.SubmitReply
	11, // 33: api.sastoj.user.contest.service.v1.Contest.SelfTest:output_type -> api.sastoj.user.contest.service.v1.SelfTestReply
	13, // 34: api.sastoj.user.contest.service.v1.Contest.GetSubmission:output_type -> api.sastoj.user.contest.service.v1.GetSubmissionReply
	15, // 35: api.sastoj.user.contest.service.v1.Contest.GetSubmissions:output_type -> api.sastoj.user.contest.service.v1.GetSubmissionsReply
	17, // 36: api.sastoj.user.contest.service.v1.Contest.GetSelfTest:output_type -> api.sastoj.user.contest.service.v1.GetSelfTestReply
	19, // 37: api.sastoj.user.contest.service.v1.Contest.GetCases:output_type -> api.sastoj.user.contest.service.v1.GetCasesReply
	21, // 38: api.sastoj.user.contest.service.v1.Contest.ListRanking:output_type -> api.sastoj.user.contest.service.v1.ListRankingReply
	27, // 39: api.sastoj.user.contest.service.v1.Contest.Register:output_type -> api.sastoj.user.contest.service.v1.RegisterReply
	23, // 40: api.sastoj.user.contest.service.v1.Contest.UpdateSubmission:output_type -> api.sastoj.user.contest.service.v1.UpdateSubmissionReply
	25, // 41: api.sastoj.user.contest.service.v1.Contest.UpdateSelfTest:output_type -> api.sastoj.user.contest.service.v1.UpdateSelfTestReply
	28, // [28:42] is the sub-list for method output_type
	14, // [14:28] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_user_contest_service_v1_contest_proto_init() }
func file_user_contest_service_v1_contest_proto_init() {
	if File_user_contest_service_v1_contest_proto != nil {
		return
	}
	file_user_contest_service_v1_contest_proto_msgTypes[22].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_user_contest_service_v1_contest_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_user_contest_service_v1_contest_proto_goTypes,
		DependencyIndexes: file_user_contest_service_v1_contest_proto_depIdxs,
		MessageInfos:      file_user_contest_service_v1_contest_proto_msgTypes,
	}.Build()
	File_user_contest_service_v1_contest_proto = out.File
	file_user_contest_service_v1_contest_proto_rawDesc = nil
	file_user_contest_service_v1_contest_proto_goTypes = nil
	file_user_contest_service_v1_contest_proto_depIdxs = nil
}
