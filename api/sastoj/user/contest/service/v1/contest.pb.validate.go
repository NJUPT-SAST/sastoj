// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: sastoj/user/contest/service/v1/contest.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Contest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Contest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Contest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ContestMultiError, or nil if none found.
func (m *Contest) ValidateAll() error {
	return m.validate(true)
}

func (m *Contest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for State

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Language

	// no validation rules for ExtraTime

	if len(errors) > 0 {
		return ContestMultiError(errors)
	}

	return nil
}

// ContestMultiError is an error wrapping multiple validation errors returned
// by Contest.ValidateAll() if the designated constraints aren't met.
type ContestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContestMultiError) AllErrors() []error { return m }

// ContestValidationError is the validation error returned by Contest.Validate
// if the designated constraints aren't met.
type ContestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContestValidationError) ErrorName() string { return "ContestValidationError" }

// Error satisfies the builtin error interface
func (e ContestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContestValidationError{}

// Validate checks the field values on GetContestsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetContestsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetContestsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetContestsRequestMultiError, or nil if none found.
func (m *GetContestsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetContestsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetContestsRequestMultiError(errors)
	}

	return nil
}

// GetContestsRequestMultiError is an error wrapping multiple validation errors
// returned by GetContestsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetContestsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetContestsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetContestsRequestMultiError) AllErrors() []error { return m }

// GetContestsRequestValidationError is the validation error returned by
// GetContestsRequest.Validate if the designated constraints aren't met.
type GetContestsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetContestsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetContestsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetContestsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetContestsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetContestsRequestValidationError) ErrorName() string {
	return "GetContestsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetContestsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetContestsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetContestsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetContestsRequestValidationError{}

// Validate checks the field values on GetContestsReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetContestsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetContestsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetContestsReplyMultiError, or nil if none found.
func (m *GetContestsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetContestsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetContests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetContestsReplyValidationError{
						field:  fmt.Sprintf("Contests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetContestsReplyValidationError{
						field:  fmt.Sprintf("Contests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetContestsReplyValidationError{
					field:  fmt.Sprintf("Contests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetContestsReplyMultiError(errors)
	}

	return nil
}

// GetContestsReplyMultiError is an error wrapping multiple validation errors
// returned by GetContestsReply.ValidateAll() if the designated constraints
// aren't met.
type GetContestsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetContestsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetContestsReplyMultiError) AllErrors() []error { return m }

// GetContestsReplyValidationError is the validation error returned by
// GetContestsReply.Validate if the designated constraints aren't met.
type GetContestsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetContestsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetContestsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetContestsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetContestsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetContestsReplyValidationError) ErrorName() string { return "GetContestsReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetContestsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetContestsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetContestsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetContestsReplyValidationError{}

// Validate checks the field values on JoinContestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *JoinContestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinContestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JoinContestRequestMultiError, or nil if none found.
func (m *JoinContestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinContestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContestId

	if all {
		switch v := interface{}(m.GetJoinContestBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JoinContestRequestValidationError{
					field:  "JoinContestBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JoinContestRequestValidationError{
					field:  "JoinContestBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJoinContestBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JoinContestRequestValidationError{
				field:  "JoinContestBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return JoinContestRequestMultiError(errors)
	}

	return nil
}

// JoinContestRequestMultiError is an error wrapping multiple validation errors
// returned by JoinContestRequest.ValidateAll() if the designated constraints
// aren't met.
type JoinContestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinContestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinContestRequestMultiError) AllErrors() []error { return m }

// JoinContestRequestValidationError is the validation error returned by
// JoinContestRequest.Validate if the designated constraints aren't met.
type JoinContestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinContestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinContestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinContestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinContestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinContestRequestValidationError) ErrorName() string {
	return "JoinContestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e JoinContestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinContestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinContestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinContestRequestValidationError{}

// Validate checks the field values on JoinContestBody with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JoinContestBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinContestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JoinContestBodyMultiError, or nil if none found.
func (m *JoinContestBody) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinContestBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsJoin

	if len(errors) > 0 {
		return JoinContestBodyMultiError(errors)
	}

	return nil
}

// JoinContestBodyMultiError is an error wrapping multiple validation errors
// returned by JoinContestBody.ValidateAll() if the designated constraints
// aren't met.
type JoinContestBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinContestBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinContestBodyMultiError) AllErrors() []error { return m }

// JoinContestBodyValidationError is the validation error returned by
// JoinContestBody.Validate if the designated constraints aren't met.
type JoinContestBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinContestBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinContestBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinContestBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinContestBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinContestBodyValidationError) ErrorName() string { return "JoinContestBodyValidationError" }

// Error satisfies the builtin error interface
func (e JoinContestBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinContestBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinContestBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinContestBodyValidationError{}

// Validate checks the field values on JoinContestReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JoinContestReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinContestReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JoinContestReplyMultiError, or nil if none found.
func (m *JoinContestReply) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinContestReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsJoin

	if len(errors) > 0 {
		return JoinContestReplyMultiError(errors)
	}

	return nil
}

// JoinContestReplyMultiError is an error wrapping multiple validation errors
// returned by JoinContestReply.ValidateAll() if the designated constraints
// aren't met.
type JoinContestReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinContestReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinContestReplyMultiError) AllErrors() []error { return m }

// JoinContestReplyValidationError is the validation error returned by
// JoinContestReply.Validate if the designated constraints aren't met.
type JoinContestReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinContestReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinContestReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinContestReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinContestReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinContestReplyValidationError) ErrorName() string { return "JoinContestReplyValidationError" }

// Error satisfies the builtin error interface
func (e JoinContestReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinContestReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinContestReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinContestReplyValidationError{}

// Validate checks the field values on GetProblemsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProblemsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProblemsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProblemsRequestMultiError, or nil if none found.
func (m *GetProblemsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProblemsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContestId

	if len(errors) > 0 {
		return GetProblemsRequestMultiError(errors)
	}

	return nil
}

// GetProblemsRequestMultiError is an error wrapping multiple validation errors
// returned by GetProblemsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetProblemsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProblemsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProblemsRequestMultiError) AllErrors() []error { return m }

// GetProblemsRequestValidationError is the validation error returned by
// GetProblemsRequest.Validate if the designated constraints aren't met.
type GetProblemsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProblemsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProblemsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProblemsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProblemsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProblemsRequestValidationError) ErrorName() string {
	return "GetProblemsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProblemsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProblemsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProblemsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProblemsRequestValidationError{}

// Validate checks the field values on GetProblemsReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProblemsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProblemsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProblemsReplyMultiError, or nil if none found.
func (m *GetProblemsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProblemsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProblems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetProblemsReplyValidationError{
						field:  fmt.Sprintf("Problems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetProblemsReplyValidationError{
						field:  fmt.Sprintf("Problems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetProblemsReplyValidationError{
					field:  fmt.Sprintf("Problems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetProblemsReplyMultiError(errors)
	}

	return nil
}

// GetProblemsReplyMultiError is an error wrapping multiple validation errors
// returned by GetProblemsReply.ValidateAll() if the designated constraints
// aren't met.
type GetProblemsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProblemsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProblemsReplyMultiError) AllErrors() []error { return m }

// GetProblemsReplyValidationError is the validation error returned by
// GetProblemsReply.Validate if the designated constraints aren't met.
type GetProblemsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProblemsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProblemsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProblemsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProblemsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProblemsReplyValidationError) ErrorName() string { return "GetProblemsReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetProblemsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProblemsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProblemsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProblemsReplyValidationError{}

// Validate checks the field values on GetProblemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProblemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProblemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProblemRequestMultiError, or nil if none found.
func (m *GetProblemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProblemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContestId

	// no validation rules for ProblemId

	if len(errors) > 0 {
		return GetProblemRequestMultiError(errors)
	}

	return nil
}

// GetProblemRequestMultiError is an error wrapping multiple validation errors
// returned by GetProblemRequest.ValidateAll() if the designated constraints
// aren't met.
type GetProblemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProblemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProblemRequestMultiError) AllErrors() []error { return m }

// GetProblemRequestValidationError is the validation error returned by
// GetProblemRequest.Validate if the designated constraints aren't met.
type GetProblemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProblemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProblemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProblemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProblemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProblemRequestValidationError) ErrorName() string {
	return "GetProblemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProblemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProblemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProblemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProblemRequestValidationError{}

// Validate checks the field values on GetProblemReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProblemReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProblemReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProblemReplyMultiError, or nil if none found.
func (m *GetProblemReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProblemReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for Point

	if len(errors) > 0 {
		return GetProblemReplyMultiError(errors)
	}

	return nil
}

// GetProblemReplyMultiError is an error wrapping multiple validation errors
// returned by GetProblemReply.ValidateAll() if the designated constraints
// aren't met.
type GetProblemReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProblemReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProblemReplyMultiError) AllErrors() []error { return m }

// GetProblemReplyValidationError is the validation error returned by
// GetProblemReply.Validate if the designated constraints aren't met.
type GetProblemReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProblemReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProblemReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProblemReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProblemReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProblemReplyValidationError) ErrorName() string { return "GetProblemReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetProblemReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProblemReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProblemReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProblemReplyValidationError{}

// Validate checks the field values on SubmitRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SubmitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubmitRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SubmitRequestMultiError, or
// nil if none found.
func (m *SubmitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContestId

	// no validation rules for ProblemId

	// no validation rules for Code

	// no validation rules for Language

	if len(errors) > 0 {
		return SubmitRequestMultiError(errors)
	}

	return nil
}

// SubmitRequestMultiError is an error wrapping multiple validation errors
// returned by SubmitRequest.ValidateAll() if the designated constraints
// aren't met.
type SubmitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitRequestMultiError) AllErrors() []error { return m }

// SubmitRequestValidationError is the validation error returned by
// SubmitRequest.Validate if the designated constraints aren't met.
type SubmitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitRequestValidationError) ErrorName() string { return "SubmitRequestValidationError" }

// Error satisfies the builtin error interface
func (e SubmitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitRequestValidationError{}

// Validate checks the field values on SubmitReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SubmitReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubmitReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SubmitReplyMultiError, or
// nil if none found.
func (m *SubmitReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SubmitId

	if len(errors) > 0 {
		return SubmitReplyMultiError(errors)
	}

	return nil
}

// SubmitReplyMultiError is an error wrapping multiple validation errors
// returned by SubmitReply.ValidateAll() if the designated constraints aren't met.
type SubmitReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitReplyMultiError) AllErrors() []error { return m }

// SubmitReplyValidationError is the validation error returned by
// SubmitReply.Validate if the designated constraints aren't met.
type SubmitReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitReplyValidationError) ErrorName() string { return "SubmitReplyValidationError" }

// Error satisfies the builtin error interface
func (e SubmitReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitReplyValidationError{}

// Validate checks the field values on SelfTestRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SelfTestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SelfTestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SelfTestRequestMultiError, or nil if none found.
func (m *SelfTestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SelfTestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContestId

	// no validation rules for ProblemId

	// no validation rules for Code

	// no validation rules for Language

	// no validation rules for Input

	if len(errors) > 0 {
		return SelfTestRequestMultiError(errors)
	}

	return nil
}

// SelfTestRequestMultiError is an error wrapping multiple validation errors
// returned by SelfTestRequest.ValidateAll() if the designated constraints
// aren't met.
type SelfTestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SelfTestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SelfTestRequestMultiError) AllErrors() []error { return m }

// SelfTestRequestValidationError is the validation error returned by
// SelfTestRequest.Validate if the designated constraints aren't met.
type SelfTestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SelfTestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SelfTestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SelfTestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SelfTestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SelfTestRequestValidationError) ErrorName() string { return "SelfTestRequestValidationError" }

// Error satisfies the builtin error interface
func (e SelfTestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSelfTestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SelfTestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SelfTestRequestValidationError{}

// Validate checks the field values on SelfTestReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SelfTestReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SelfTestReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SelfTestReplyMultiError, or
// nil if none found.
func (m *SelfTestReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SelfTestReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PretestId

	if len(errors) > 0 {
		return SelfTestReplyMultiError(errors)
	}

	return nil
}

// SelfTestReplyMultiError is an error wrapping multiple validation errors
// returned by SelfTestReply.ValidateAll() if the designated constraints
// aren't met.
type SelfTestReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SelfTestReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SelfTestReplyMultiError) AllErrors() []error { return m }

// SelfTestReplyValidationError is the validation error returned by
// SelfTestReply.Validate if the designated constraints aren't met.
type SelfTestReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SelfTestReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SelfTestReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SelfTestReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SelfTestReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SelfTestReplyValidationError) ErrorName() string { return "SelfTestReplyValidationError" }

// Error satisfies the builtin error interface
func (e SelfTestReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSelfTestReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SelfTestReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SelfTestReplyValidationError{}

// Validate checks the field values on GetSubmissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubmissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubmissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubmissionRequestMultiError, or nil if none found.
func (m *GetSubmissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubmissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContestId

	// no validation rules for ProblemId

	// no validation rules for SubmissionId

	if len(errors) > 0 {
		return GetSubmissionRequestMultiError(errors)
	}

	return nil
}

// GetSubmissionRequestMultiError is an error wrapping multiple validation
// errors returned by GetSubmissionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSubmissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubmissionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubmissionRequestMultiError) AllErrors() []error { return m }

// GetSubmissionRequestValidationError is the validation error returned by
// GetSubmissionRequest.Validate if the designated constraints aren't met.
type GetSubmissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubmissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubmissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubmissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubmissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubmissionRequestValidationError) ErrorName() string {
	return "GetSubmissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubmissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubmissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubmissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubmissionRequestValidationError{}

// Validate checks the field values on GetSubmissionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubmissionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubmissionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubmissionReplyMultiError, or nil if none found.
func (m *GetSubmissionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubmissionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Code

	// no validation rules for Language

	// no validation rules for Point

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSubmissionReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSubmissionReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSubmissionReplyValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSubmissionReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSubmissionReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSubmissionReplyValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TotalTime

	// no validation rules for MaxMemory

	if len(errors) > 0 {
		return GetSubmissionReplyMultiError(errors)
	}

	return nil
}

// GetSubmissionReplyMultiError is an error wrapping multiple validation errors
// returned by GetSubmissionReply.ValidateAll() if the designated constraints
// aren't met.
type GetSubmissionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubmissionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubmissionReplyMultiError) AllErrors() []error { return m }

// GetSubmissionReplyValidationError is the validation error returned by
// GetSubmissionReply.Validate if the designated constraints aren't met.
type GetSubmissionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubmissionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubmissionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubmissionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubmissionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubmissionReplyValidationError) ErrorName() string {
	return "GetSubmissionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubmissionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubmissionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubmissionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubmissionReplyValidationError{}

// Validate checks the field values on GetCasesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCasesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCasesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCasesRequestMultiError, or nil if none found.
func (m *GetCasesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCasesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContestId

	// no validation rules for ProblemId

	// no validation rules for SubmissionId

	if len(errors) > 0 {
		return GetCasesRequestMultiError(errors)
	}

	return nil
}

// GetCasesRequestMultiError is an error wrapping multiple validation errors
// returned by GetCasesRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCasesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCasesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCasesRequestMultiError) AllErrors() []error { return m }

// GetCasesRequestValidationError is the validation error returned by
// GetCasesRequest.Validate if the designated constraints aren't met.
type GetCasesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCasesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCasesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCasesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCasesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCasesRequestValidationError) ErrorName() string { return "GetCasesRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetCasesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCasesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCasesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCasesRequestValidationError{}

// Validate checks the field values on GetCasesReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCasesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCasesReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetCasesReplyMultiError, or
// nil if none found.
func (m *GetCasesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCasesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCases() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCasesReplyValidationError{
						field:  fmt.Sprintf("Cases[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCasesReplyValidationError{
						field:  fmt.Sprintf("Cases[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCasesReplyValidationError{
					field:  fmt.Sprintf("Cases[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCasesReplyMultiError(errors)
	}

	return nil
}

// GetCasesReplyMultiError is an error wrapping multiple validation errors
// returned by GetCasesReply.ValidateAll() if the designated constraints
// aren't met.
type GetCasesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCasesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCasesReplyMultiError) AllErrors() []error { return m }

// GetCasesReplyValidationError is the validation error returned by
// GetCasesReply.Validate if the designated constraints aren't met.
type GetCasesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCasesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCasesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCasesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCasesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCasesReplyValidationError) ErrorName() string { return "GetCasesReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetCasesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCasesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCasesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCasesReplyValidationError{}

// Validate checks the field values on ListRankingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRankingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRankingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRankingRequestMultiError, or nil if none found.
func (m *ListRankingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRankingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContestId

	if len(errors) > 0 {
		return ListRankingRequestMultiError(errors)
	}

	return nil
}

// ListRankingRequestMultiError is an error wrapping multiple validation errors
// returned by ListRankingRequest.ValidateAll() if the designated constraints
// aren't met.
type ListRankingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRankingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRankingRequestMultiError) AllErrors() []error { return m }

// ListRankingRequestValidationError is the validation error returned by
// ListRankingRequest.Validate if the designated constraints aren't met.
type ListRankingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRankingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRankingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRankingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRankingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRankingRequestValidationError) ErrorName() string {
	return "ListRankingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRankingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRankingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRankingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRankingRequestValidationError{}

// Validate checks the field values on ListRankingReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRankingReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRankingReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRankingReplyMultiError, or nil if none found.
func (m *ListRankingReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRankingReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRankingReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRankingReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRankingReplyValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRankingReplyMultiError(errors)
	}

	return nil
}

// ListRankingReplyMultiError is an error wrapping multiple validation errors
// returned by ListRankingReply.ValidateAll() if the designated constraints
// aren't met.
type ListRankingReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRankingReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRankingReplyMultiError) AllErrors() []error { return m }

// ListRankingReplyValidationError is the validation error returned by
// ListRankingReply.Validate if the designated constraints aren't met.
type ListRankingReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRankingReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRankingReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRankingReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRankingReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRankingReplyValidationError) ErrorName() string { return "ListRankingReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListRankingReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRankingReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRankingReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRankingReplyValidationError{}

// Validate checks the field values on RegisterGatewayRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterGatewayRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterGatewayRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterGatewayRequestMultiError, or nil if none found.
func (m *RegisterGatewayRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterGatewayRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Endpoint

	// no validation rules for Secret

	if len(errors) > 0 {
		return RegisterGatewayRequestMultiError(errors)
	}

	return nil
}

// RegisterGatewayRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterGatewayRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterGatewayRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterGatewayRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterGatewayRequestMultiError) AllErrors() []error { return m }

// RegisterGatewayRequestValidationError is the validation error returned by
// RegisterGatewayRequest.Validate if the designated constraints aren't met.
type RegisterGatewayRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterGatewayRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterGatewayRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterGatewayRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterGatewayRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterGatewayRequestValidationError) ErrorName() string {
	return "RegisterGatewayRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterGatewayRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterGatewayRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterGatewayRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterGatewayRequestValidationError{}

// Validate checks the field values on RegisterGatewayReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterGatewayReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterGatewayReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterGatewayReplyMultiError, or nil if none found.
func (m *RegisterGatewayReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterGatewayReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return RegisterGatewayReplyMultiError(errors)
	}

	return nil
}

// RegisterGatewayReplyMultiError is an error wrapping multiple validation
// errors returned by RegisterGatewayReply.ValidateAll() if the designated
// constraints aren't met.
type RegisterGatewayReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterGatewayReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterGatewayReplyMultiError) AllErrors() []error { return m }

// RegisterGatewayReplyValidationError is the validation error returned by
// RegisterGatewayReply.Validate if the designated constraints aren't met.
type RegisterGatewayReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterGatewayReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterGatewayReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterGatewayReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterGatewayReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterGatewayReplyValidationError) ErrorName() string {
	return "RegisterGatewayReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterGatewayReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterGatewayReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterGatewayReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterGatewayReplyValidationError{}

// Validate checks the field values on GetProblemsReply_Problem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProblemsReply_Problem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProblemsReply_Problem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProblemsReply_ProblemMultiError, or nil if none found.
func (m *GetProblemsReply_Problem) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProblemsReply_Problem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Point

	// no validation rules for Index

	if len(errors) > 0 {
		return GetProblemsReply_ProblemMultiError(errors)
	}

	return nil
}

// GetProblemsReply_ProblemMultiError is an error wrapping multiple validation
// errors returned by GetProblemsReply_Problem.ValidateAll() if the designated
// constraints aren't met.
type GetProblemsReply_ProblemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProblemsReply_ProblemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProblemsReply_ProblemMultiError) AllErrors() []error { return m }

// GetProblemsReply_ProblemValidationError is the validation error returned by
// GetProblemsReply_Problem.Validate if the designated constraints aren't met.
type GetProblemsReply_ProblemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProblemsReply_ProblemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProblemsReply_ProblemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProblemsReply_ProblemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProblemsReply_ProblemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProblemsReply_ProblemValidationError) ErrorName() string {
	return "GetProblemsReply_ProblemValidationError"
}

// Error satisfies the builtin error interface
func (e GetProblemsReply_ProblemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProblemsReply_Problem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProblemsReply_ProblemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProblemsReply_ProblemValidationError{}

// Validate checks the field values on GetCasesReply_Case with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCasesReply_Case) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCasesReply_Case with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCasesReply_CaseMultiError, or nil if none found.
func (m *GetCasesReply_Case) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCasesReply_Case) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Index

	// no validation rules for Status

	if len(errors) > 0 {
		return GetCasesReply_CaseMultiError(errors)
	}

	return nil
}

// GetCasesReply_CaseMultiError is an error wrapping multiple validation errors
// returned by GetCasesReply_Case.ValidateAll() if the designated constraints
// aren't met.
type GetCasesReply_CaseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCasesReply_CaseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCasesReply_CaseMultiError) AllErrors() []error { return m }

// GetCasesReply_CaseValidationError is the validation error returned by
// GetCasesReply_Case.Validate if the designated constraints aren't met.
type GetCasesReply_CaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCasesReply_CaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCasesReply_CaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCasesReply_CaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCasesReply_CaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCasesReply_CaseValidationError) ErrorName() string {
	return "GetCasesReply_CaseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCasesReply_CaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCasesReply_Case.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCasesReply_CaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCasesReply_CaseValidationError{}

// Validate checks the field values on ListRankingReply_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRankingReply_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRankingReply_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRankingReply_UserMultiError, or nil if none found.
func (m *ListRankingReply_User) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRankingReply_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Score

	// no validation rules for Rank

	// no validation rules for Penalty

	for idx, item := range m.GetProblems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRankingReply_UserValidationError{
						field:  fmt.Sprintf("Problems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRankingReply_UserValidationError{
						field:  fmt.Sprintf("Problems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRankingReply_UserValidationError{
					field:  fmt.Sprintf("Problems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRankingReply_UserMultiError(errors)
	}

	return nil
}

// ListRankingReply_UserMultiError is an error wrapping multiple validation
// errors returned by ListRankingReply_User.ValidateAll() if the designated
// constraints aren't met.
type ListRankingReply_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRankingReply_UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRankingReply_UserMultiError) AllErrors() []error { return m }

// ListRankingReply_UserValidationError is the validation error returned by
// ListRankingReply_User.Validate if the designated constraints aren't met.
type ListRankingReply_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRankingReply_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRankingReply_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRankingReply_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRankingReply_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRankingReply_UserValidationError) ErrorName() string {
	return "ListRankingReply_UserValidationError"
}

// Error satisfies the builtin error interface
func (e ListRankingReply_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRankingReply_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRankingReply_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRankingReply_UserValidationError{}

// Validate checks the field values on ListRankingReply_User_Problem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRankingReply_User_Problem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRankingReply_User_Problem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListRankingReply_User_ProblemMultiError, or nil if none found.
func (m *ListRankingReply_User_Problem) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRankingReply_User_Problem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProblemId

	// no validation rules for Index

	// no validation rules for Status

	// no validation rules for Point

	// no validation rules for TriedCount

	// no validation rules for AcceptTime

	if len(errors) > 0 {
		return ListRankingReply_User_ProblemMultiError(errors)
	}

	return nil
}

// ListRankingReply_User_ProblemMultiError is an error wrapping multiple
// validation errors returned by ListRankingReply_User_Problem.ValidateAll()
// if the designated constraints aren't met.
type ListRankingReply_User_ProblemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRankingReply_User_ProblemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRankingReply_User_ProblemMultiError) AllErrors() []error { return m }

// ListRankingReply_User_ProblemValidationError is the validation error
// returned by ListRankingReply_User_Problem.Validate if the designated
// constraints aren't met.
type ListRankingReply_User_ProblemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRankingReply_User_ProblemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRankingReply_User_ProblemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRankingReply_User_ProblemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRankingReply_User_ProblemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRankingReply_User_ProblemValidationError) ErrorName() string {
	return "ListRankingReply_User_ProblemValidationError"
}

// Error satisfies the builtin error interface
func (e ListRankingReply_User_ProblemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRankingReply_User_Problem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRankingReply_User_ProblemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRankingReply_User_ProblemValidationError{}
