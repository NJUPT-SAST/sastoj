syntax = "proto3";

package api.sastoj.user.contest.service.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

option go_package = "sastoj/api/sastoj/user/contest/service/v1;v1";
option java_multiple_files = true;
option java_package = "api.sastoj.user.contest.service.v1";

service ContestService {
  rpc ListContest (ListContestRequest) returns (ListContestReply) {
    option (google.api.http) = {
      get: "/user/contest"
    };
  };
  rpc JoinContest (JoinContestRequest) returns (JoinContestReply) {
    option (google.api.http) = {
      post: "/user/contest/{contest_id}",
      body: "joinContestBody"
    };
  };
  rpc GetProblems (GetProblemsRequest) returns (GetProblemsReply) {
    option (google.api.http) = {
      get: "/user/contest/{contest_id}/problems"
    };
  }
  rpc GetProblem (GetProblemRequest) returns (GetProblemReply) {
    option (google.api.http) = {
      get: "/user/contest/{contest_id}/problem/{problem_id}"
    };
  };
  rpc SubmitProblem (SubmitProblemRequest) returns (SubmitProblemReply) {
    option (google.api.http) = {
      post: "/user/contest/{contest_id}/problem/{problem_id}",
      body: "*"
    };
  };
  rpc PretestProblem (PretestProblemRequest) returns (PretestProblemReply) {
    option (google.api.http) = {
      post: "/user/contest/{contest_id}/problem/{problem_id}/pretest",
      body: "*"
    };
  };
  rpc GetSubmission (GetSubmissionRequest) returns (GetSubmissionReply) {
    option (google.api.http) = {
      get: "/user/contest/{contest_id}/problem/{problem_id}/submit/{submit_id}"
    };
  };
  rpc GetRanking (GetRankingRequest) returns (GetRankingReply) {
    option (google.api.http) = {
      get: "/user/contest/{contest_id}/ranking"
    };
  };
}

message Contest {
  int64 id = 1;
  string title = 2;
  string description = 3;
  int32 state = 4;
  int32 type = 5;
  google.protobuf.Timestamp start_time = 6;
  google.protobuf.Timestamp end_time = 7;
  string language = 8;
  int32 extra_time = 9;
}

message ListContestRequest {}
message ListContestReply {
  repeated Contest contests = 1;
}

message JoinContestRequest {
  int64 contest_id = 1;
  JoinContestBody joinContestBody = 2;
}

message JoinContestBody {
  bool is_join = 1;
}

message JoinContestReply {
  bool is_join = 1;
}

message GetProblemRequest {
  int64 contest_id = 1;
  int64 problem_id = 2;
}

message GetProblemReply {
  int64 id = 1;
  string title = 2;
  string content = 3;
  int32 point = 4;
}

message GetProblemsRequest {
  int64 contest_id = 1;
}

message GetProblemsReply {
  message Problem {
    int64 id = 1;
    string title = 2;
    int32 point = 3;
    int32 index = 4 ;
  }
  repeated Problem problems = 1;
}

message SubmitProblemRequest {
  int64 contest_id = 1;
  int64 problem_id = 2;
  string code = 3;
  string language = 4;
}

message SubmitProblemReply {
  int64 submit_id = 1;
}

message PretestProblemRequest {
  int64 contest_id = 1;
  int64 problem_id = 2;
  string code = 3;
  string language = 4;
  string input = 5;
}

message PretestProblemReply {
  string pretest_id = 1;
}

message GetSubmissionRequest {
  int64 contest_id = 1;
  int64 problem_id = 2;
  int64 submit_id = 3;
}

message GetSubmissionReply {
  int64 id = 1;
  string code = 2;
  string language = 3;
  int32 point = 4;
  int32 status = 5;
  google.protobuf.Timestamp created_at = 6;
  google.protobuf.Timestamp updated_at = 7;
  int32 total_time = 8;
  int32 max_memory = 9;
}

message GetRankingRequest {
  int64 contest_id = 1;
}

message GetRankingReply {
  message User {
    int64 id = 1;
    string username = 2;
    int32 score = 3;
    int32 rank = 4;
  }
  repeated User users = 1;
}