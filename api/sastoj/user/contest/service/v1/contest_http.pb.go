// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.26.1
// source: sastoj/user/contest/service/v1/contest.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationContestServiceGetProblem = "/api.sastoj.user.contest.service.v1.ContestService/GetProblem"
const OperationContestServiceGetProblems = "/api.sastoj.user.contest.service.v1.ContestService/GetProblems"
const OperationContestServiceGetRanking = "/api.sastoj.user.contest.service.v1.ContestService/GetRanking"
const OperationContestServiceGetSubmission = "/api.sastoj.user.contest.service.v1.ContestService/GetSubmission"
const OperationContestServiceJoinContest = "/api.sastoj.user.contest.service.v1.ContestService/JoinContest"
const OperationContestServiceListContest = "/api.sastoj.user.contest.service.v1.ContestService/ListContest"
const OperationContestServicePretestProblem = "/api.sastoj.user.contest.service.v1.ContestService/PretestProblem"
const OperationContestServiceSubmitProblem = "/api.sastoj.user.contest.service.v1.ContestService/SubmitProblem"

type ContestServiceHTTPServer interface {
	GetProblem(context.Context, *GetProblemRequest) (*GetProblemReply, error)
	GetProblems(context.Context, *GetProblemsRequest) (*GetProblemsReply, error)
	GetRanking(context.Context, *GetRankingRequest) (*GetRankingReply, error)
	GetSubmission(context.Context, *GetSubmissionRequest) (*GetSubmissionReply, error)
	JoinContest(context.Context, *JoinContestRequest) (*JoinContestReply, error)
	ListContest(context.Context, *ListContestRequest) (*ListContestReply, error)
	PretestProblem(context.Context, *PretestProblemRequest) (*PretestProblemReply, error)
	SubmitProblem(context.Context, *SubmitProblemRequest) (*SubmitProblemReply, error)
}

func RegisterContestServiceHTTPServer(s *http.Server, srv ContestServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/user/contest", _ContestService_ListContest0_HTTP_Handler(srv))
	r.POST("/user/contest/{contest_id}", _ContestService_JoinContest0_HTTP_Handler(srv))
	r.GET("/user/contest/{contest_id}/problems", _ContestService_GetProblems0_HTTP_Handler(srv))
	r.GET("/user/contest/{contest_id}/problem/{problem_id}", _ContestService_GetProblem1_HTTP_Handler(srv))
	r.POST("/user/contest/{contest_id}/problem/{problem_id}", _ContestService_SubmitProblem0_HTTP_Handler(srv))
	r.POST("/user/contest/{contest_id}/problem/{problem_id}/pretest", _ContestService_PretestProblem0_HTTP_Handler(srv))
	r.GET("/user/contest/{contest_id}/problem/{problem_id}/submit/{submit_id}", _ContestService_GetSubmission0_HTTP_Handler(srv))
	r.GET("/user/contest/{contest_id}/ranking", _ContestService_GetRanking0_HTTP_Handler(srv))
}

func _ContestService_ListContest0_HTTP_Handler(srv ContestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListContestRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContestServiceListContest)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListContest(ctx, req.(*ListContestRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListContestReply)
		return ctx.Result(200, reply)
	}
}

func _ContestService_JoinContest0_HTTP_Handler(srv ContestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in JoinContestRequest
		if err := ctx.Bind(&in.JoinContestBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContestServiceJoinContest)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.JoinContest(ctx, req.(*JoinContestRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*JoinContestReply)
		return ctx.Result(200, reply)
	}
}

func _ContestService_GetProblems0_HTTP_Handler(srv ContestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetProblemsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContestServiceGetProblems)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProblems(ctx, req.(*GetProblemsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetProblemsReply)
		return ctx.Result(200, reply)
	}
}

func _ContestService_GetProblem1_HTTP_Handler(srv ContestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetProblemRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContestServiceGetProblem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProblem(ctx, req.(*GetProblemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetProblemReply)
		return ctx.Result(200, reply)
	}
}

func _ContestService_SubmitProblem0_HTTP_Handler(srv ContestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SubmitProblemRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContestServiceSubmitProblem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SubmitProblem(ctx, req.(*SubmitProblemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SubmitProblemReply)
		return ctx.Result(200, reply)
	}
}

func _ContestService_PretestProblem0_HTTP_Handler(srv ContestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PretestProblemRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContestServicePretestProblem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PretestProblem(ctx, req.(*PretestProblemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PretestProblemReply)
		return ctx.Result(200, reply)
	}
}

func _ContestService_GetSubmission0_HTTP_Handler(srv ContestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSubmissionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContestServiceGetSubmission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSubmission(ctx, req.(*GetSubmissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSubmissionReply)
		return ctx.Result(200, reply)
	}
}

func _ContestService_GetRanking0_HTTP_Handler(srv ContestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRankingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContestServiceGetRanking)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRanking(ctx, req.(*GetRankingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRankingReply)
		return ctx.Result(200, reply)
	}
}

type ContestServiceHTTPClient interface {
	GetProblem(ctx context.Context, req *GetProblemRequest, opts ...http.CallOption) (rsp *GetProblemReply, err error)
	GetProblems(ctx context.Context, req *GetProblemsRequest, opts ...http.CallOption) (rsp *GetProblemsReply, err error)
	GetRanking(ctx context.Context, req *GetRankingRequest, opts ...http.CallOption) (rsp *GetRankingReply, err error)
	GetSubmission(ctx context.Context, req *GetSubmissionRequest, opts ...http.CallOption) (rsp *GetSubmissionReply, err error)
	JoinContest(ctx context.Context, req *JoinContestRequest, opts ...http.CallOption) (rsp *JoinContestReply, err error)
	ListContest(ctx context.Context, req *ListContestRequest, opts ...http.CallOption) (rsp *ListContestReply, err error)
	PretestProblem(ctx context.Context, req *PretestProblemRequest, opts ...http.CallOption) (rsp *PretestProblemReply, err error)
	SubmitProblem(ctx context.Context, req *SubmitProblemRequest, opts ...http.CallOption) (rsp *SubmitProblemReply, err error)
}

type ContestServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewContestServiceHTTPClient(client *http.Client) ContestServiceHTTPClient {
	return &ContestServiceHTTPClientImpl{client}
}

func (c *ContestServiceHTTPClientImpl) GetProblem(ctx context.Context, in *GetProblemRequest, opts ...http.CallOption) (*GetProblemReply, error) {
	var out GetProblemReply
	pattern := "/user/contest/{contest_id}/problem/{problem_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationContestServiceGetProblem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContestServiceHTTPClientImpl) GetProblems(ctx context.Context, in *GetProblemsRequest, opts ...http.CallOption) (*GetProblemsReply, error) {
	var out GetProblemsReply
	pattern := "/user/contest/{contest_id}/problems"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationContestServiceGetProblems))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContestServiceHTTPClientImpl) GetRanking(ctx context.Context, in *GetRankingRequest, opts ...http.CallOption) (*GetRankingReply, error) {
	var out GetRankingReply
	pattern := "/user/contest/{contest_id}/ranking"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationContestServiceGetRanking))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContestServiceHTTPClientImpl) GetSubmission(ctx context.Context, in *GetSubmissionRequest, opts ...http.CallOption) (*GetSubmissionReply, error) {
	var out GetSubmissionReply
	pattern := "/user/contest/{contest_id}/problem/{problem_id}/submit/{submit_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationContestServiceGetSubmission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContestServiceHTTPClientImpl) JoinContest(ctx context.Context, in *JoinContestRequest, opts ...http.CallOption) (*JoinContestReply, error) {
	var out JoinContestReply
	pattern := "/user/contest/{contest_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationContestServiceJoinContest))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.JoinContestBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContestServiceHTTPClientImpl) ListContest(ctx context.Context, in *ListContestRequest, opts ...http.CallOption) (*ListContestReply, error) {
	var out ListContestReply
	pattern := "/user/contest"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationContestServiceListContest))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContestServiceHTTPClientImpl) PretestProblem(ctx context.Context, in *PretestProblemRequest, opts ...http.CallOption) (*PretestProblemReply, error) {
	var out PretestProblemReply
	pattern := "/user/contest/{contest_id}/problem/{problem_id}/pretest"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationContestServicePretestProblem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContestServiceHTTPClientImpl) SubmitProblem(ctx context.Context, in *SubmitProblemRequest, opts ...http.CallOption) (*SubmitProblemReply, error) {
	var out SubmitProblemReply
	pattern := "/user/contest/{contest_id}/problem/{problem_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationContestServiceSubmitProblem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
