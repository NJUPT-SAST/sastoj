// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             (unknown)
// source: sastoj/user/contest/service/v1/contest.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationContestGetCases = "/api.sastoj.user.contest.service.v1.Contest/GetCases"
const OperationContestGetContests = "/api.sastoj.user.contest.service.v1.Contest/GetContests"
const OperationContestGetProblem = "/api.sastoj.user.contest.service.v1.Contest/GetProblem"
const OperationContestGetProblems = "/api.sastoj.user.contest.service.v1.Contest/GetProblems"
const OperationContestGetSubmission = "/api.sastoj.user.contest.service.v1.Contest/GetSubmission"
const OperationContestJoinContest = "/api.sastoj.user.contest.service.v1.Contest/JoinContest"
const OperationContestListRanking = "/api.sastoj.user.contest.service.v1.Contest/ListRanking"
const OperationContestSelfTest = "/api.sastoj.user.contest.service.v1.Contest/SelfTest"
const OperationContestSubmit = "/api.sastoj.user.contest.service.v1.Contest/Submit"

type ContestHTTPServer interface {
	GetCases(context.Context, *GetCasesRequest) (*GetCasesReply, error)
	GetContests(context.Context, *GetContestsRequest) (*GetContestsReply, error)
	GetProblem(context.Context, *GetProblemRequest) (*GetProblemReply, error)
	GetProblems(context.Context, *GetProblemsRequest) (*GetProblemsReply, error)
	GetSubmission(context.Context, *GetSubmissionRequest) (*GetSubmissionReply, error)
	JoinContest(context.Context, *JoinContestRequest) (*JoinContestReply, error)
	ListRanking(context.Context, *ListRankingRequest) (*ListRankingReply, error)
	SelfTest(context.Context, *SelfTestRequest) (*SelfTestReply, error)
	Submit(context.Context, *SubmitRequest) (*SubmitReply, error)
}

func RegisterContestHTTPServer(s *http.Server, srv ContestHTTPServer) {
	r := s.Route("/")
	r.GET("/user/contests", _Contest_GetContests0_HTTP_Handler(srv))
	r.POST("/user/contests/{contest_id}", _Contest_JoinContest0_HTTP_Handler(srv))
	r.GET("/user/contests/{contest_id}/problems", _Contest_GetProblems0_HTTP_Handler(srv))
	r.GET("/user/contests/{contest_id}/problems/{problem_id}", _Contest_GetProblem0_HTTP_Handler(srv))
	r.POST("/user/contests/{contest_id}/problems/{problem_id}/submission", _Contest_Submit0_HTTP_Handler(srv))
	r.POST("/user/contests/{contest_id}/problems/{problem_id}/test", _Contest_SelfTest0_HTTP_Handler(srv))
	r.GET("/user/contests/{contest_id}/problems/{problem_id}/submissions/{submission_id}", _Contest_GetSubmission0_HTTP_Handler(srv))
	r.GET("/user/contests/{contest_id}/problems/{problem_id}/submission/{submission_id}/cases", _Contest_GetCases0_HTTP_Handler(srv))
	r.GET("/user/contests/{contest_id}/ranking", _Contest_ListRanking0_HTTP_Handler(srv))
}

func _Contest_GetContests0_HTTP_Handler(srv ContestHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetContestsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContestGetContests)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetContests(ctx, req.(*GetContestsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetContestsReply)
		return ctx.Result(200, reply)
	}
}

func _Contest_JoinContest0_HTTP_Handler(srv ContestHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in JoinContestRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContestJoinContest)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.JoinContest(ctx, req.(*JoinContestRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*JoinContestReply)
		return ctx.Result(200, reply)
	}
}

func _Contest_GetProblems0_HTTP_Handler(srv ContestHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetProblemsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContestGetProblems)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProblems(ctx, req.(*GetProblemsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetProblemsReply)
		return ctx.Result(200, reply)
	}
}

func _Contest_GetProblem0_HTTP_Handler(srv ContestHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetProblemRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContestGetProblem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProblem(ctx, req.(*GetProblemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetProblemReply)
		return ctx.Result(200, reply)
	}
}

func _Contest_Submit0_HTTP_Handler(srv ContestHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SubmitRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContestSubmit)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Submit(ctx, req.(*SubmitRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SubmitReply)
		return ctx.Result(200, reply)
	}
}

func _Contest_SelfTest0_HTTP_Handler(srv ContestHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SelfTestRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContestSelfTest)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SelfTest(ctx, req.(*SelfTestRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SelfTestReply)
		return ctx.Result(200, reply)
	}
}

func _Contest_GetSubmission0_HTTP_Handler(srv ContestHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSubmissionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContestGetSubmission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSubmission(ctx, req.(*GetSubmissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSubmissionReply)
		return ctx.Result(200, reply)
	}
}

func _Contest_GetCases0_HTTP_Handler(srv ContestHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCasesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContestGetCases)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCases(ctx, req.(*GetCasesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCasesReply)
		return ctx.Result(200, reply)
	}
}

func _Contest_ListRanking0_HTTP_Handler(srv ContestHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRankingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContestListRanking)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRanking(ctx, req.(*ListRankingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRankingReply)
		return ctx.Result(200, reply)
	}
}

type ContestHTTPClient interface {
	GetCases(ctx context.Context, req *GetCasesRequest, opts ...http.CallOption) (rsp *GetCasesReply, err error)
	GetContests(ctx context.Context, req *GetContestsRequest, opts ...http.CallOption) (rsp *GetContestsReply, err error)
	GetProblem(ctx context.Context, req *GetProblemRequest, opts ...http.CallOption) (rsp *GetProblemReply, err error)
	GetProblems(ctx context.Context, req *GetProblemsRequest, opts ...http.CallOption) (rsp *GetProblemsReply, err error)
	GetSubmission(ctx context.Context, req *GetSubmissionRequest, opts ...http.CallOption) (rsp *GetSubmissionReply, err error)
	JoinContest(ctx context.Context, req *JoinContestRequest, opts ...http.CallOption) (rsp *JoinContestReply, err error)
	ListRanking(ctx context.Context, req *ListRankingRequest, opts ...http.CallOption) (rsp *ListRankingReply, err error)
	SelfTest(ctx context.Context, req *SelfTestRequest, opts ...http.CallOption) (rsp *SelfTestReply, err error)
	Submit(ctx context.Context, req *SubmitRequest, opts ...http.CallOption) (rsp *SubmitReply, err error)
}

type ContestHTTPClientImpl struct {
	cc *http.Client
}

func NewContestHTTPClient(client *http.Client) ContestHTTPClient {
	return &ContestHTTPClientImpl{client}
}

func (c *ContestHTTPClientImpl) GetCases(ctx context.Context, in *GetCasesRequest, opts ...http.CallOption) (*GetCasesReply, error) {
	var out GetCasesReply
	pattern := "/user/contests/{contest_id}/problems/{problem_id}/submission/{submission_id}/cases"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationContestGetCases))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContestHTTPClientImpl) GetContests(ctx context.Context, in *GetContestsRequest, opts ...http.CallOption) (*GetContestsReply, error) {
	var out GetContestsReply
	pattern := "/user/contests"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationContestGetContests))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContestHTTPClientImpl) GetProblem(ctx context.Context, in *GetProblemRequest, opts ...http.CallOption) (*GetProblemReply, error) {
	var out GetProblemReply
	pattern := "/user/contests/{contest_id}/problems/{problem_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationContestGetProblem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContestHTTPClientImpl) GetProblems(ctx context.Context, in *GetProblemsRequest, opts ...http.CallOption) (*GetProblemsReply, error) {
	var out GetProblemsReply
	pattern := "/user/contests/{contest_id}/problems"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationContestGetProblems))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContestHTTPClientImpl) GetSubmission(ctx context.Context, in *GetSubmissionRequest, opts ...http.CallOption) (*GetSubmissionReply, error) {
	var out GetSubmissionReply
	pattern := "/user/contests/{contest_id}/problems/{problem_id}/submissions/{submission_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationContestGetSubmission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContestHTTPClientImpl) JoinContest(ctx context.Context, in *JoinContestRequest, opts ...http.CallOption) (*JoinContestReply, error) {
	var out JoinContestReply
	pattern := "/user/contests/{contest_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationContestJoinContest))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContestHTTPClientImpl) ListRanking(ctx context.Context, in *ListRankingRequest, opts ...http.CallOption) (*ListRankingReply, error) {
	var out ListRankingReply
	pattern := "/user/contests/{contest_id}/ranking"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationContestListRanking))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContestHTTPClientImpl) SelfTest(ctx context.Context, in *SelfTestRequest, opts ...http.CallOption) (*SelfTestReply, error) {
	var out SelfTestReply
	pattern := "/user/contests/{contest_id}/problems/{problem_id}/test"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationContestSelfTest))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContestHTTPClientImpl) Submit(ctx context.Context, in *SubmitRequest, opts ...http.CallOption) (*SubmitReply, error) {
	var out SubmitReply
	pattern := "/user/contests/{contest_id}/problems/{problem_id}/submission"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationContestSubmit))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
