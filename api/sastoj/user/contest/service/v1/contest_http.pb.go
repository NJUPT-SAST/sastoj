// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             (unknown)
// source: sastoj/user/contest/service/v1/contest.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationContestServiceGetContests = "/api.sastoj.user.contest.service.v1.ContestService/GetContests"
const OperationContestServiceGetProblem = "/api.sastoj.user.contest.service.v1.ContestService/GetProblem"
const OperationContestServiceGetProblems = "/api.sastoj.user.contest.service.v1.ContestService/GetProblems"
const OperationContestServiceGetSubmission = "/api.sastoj.user.contest.service.v1.ContestService/GetSubmission"
const OperationContestServiceJoinContest = "/api.sastoj.user.contest.service.v1.ContestService/JoinContest"
const OperationContestServiceListRanking = "/api.sastoj.user.contest.service.v1.ContestService/ListRanking"
const OperationContestServiceSelfTest = "/api.sastoj.user.contest.service.v1.ContestService/SelfTest"
const OperationContestServiceSubmit = "/api.sastoj.user.contest.service.v1.ContestService/Submit"

type ContestServiceHTTPServer interface {
	GetContests(context.Context, *GetContestsRequest) (*GetContestsReply, error)
	GetProblem(context.Context, *GetProblemRequest) (*GetProblemReply, error)
	GetProblems(context.Context, *GetProblemsRequest) (*GetProblemsReply, error)
	GetSubmission(context.Context, *GetSubmissionRequest) (*GetSubmissionReply, error)
	JoinContest(context.Context, *JoinContestRequest) (*JoinContestReply, error)
	ListRanking(context.Context, *ListRankingRequest) (*ListRankingReply, error)
	SelfTest(context.Context, *SelfTestRequest) (*SelfTestReply, error)
	Submit(context.Context, *SubmitRequest) (*SubmitReply, error)
}

func RegisterContestServiceHTTPServer(s *http.Server, srv ContestServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/user/contests", _ContestService_GetContests0_HTTP_Handler(srv))
	r.POST("/user/contests/{contest_id}", _ContestService_JoinContest0_HTTP_Handler(srv))
	r.GET("/user/contests/{contest_id}/problems", _ContestService_GetProblems0_HTTP_Handler(srv))
	r.GET("/user/contests/{contest_id}/problems/{problem_id}", _ContestService_GetProblem0_HTTP_Handler(srv))
	r.POST("/user/contests/{contest_id}/problems/{problem_id}/submission", _ContestService_Submit0_HTTP_Handler(srv))
	r.POST("/user/contests/{contest_id}/problems/{problem_id}/test", _ContestService_SelfTest0_HTTP_Handler(srv))
	r.GET("/user/contests/{contest_id}/problems/{problem_id}/submission/{submission_id}", _ContestService_GetSubmission0_HTTP_Handler(srv))
	r.GET("/user/contests/{contest_id}/ranking", _ContestService_ListRanking0_HTTP_Handler(srv))
}

func _ContestService_GetContests0_HTTP_Handler(srv ContestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetContestsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContestServiceGetContests)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetContests(ctx, req.(*GetContestsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetContestsReply)
		return ctx.Result(200, reply)
	}
}

func _ContestService_JoinContest0_HTTP_Handler(srv ContestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in JoinContestRequest
		if err := ctx.Bind(&in.JoinContestBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContestServiceJoinContest)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.JoinContest(ctx, req.(*JoinContestRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*JoinContestReply)
		return ctx.Result(200, reply)
	}
}

func _ContestService_GetProblems0_HTTP_Handler(srv ContestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetProblemsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContestServiceGetProblems)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProblems(ctx, req.(*GetProblemsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetProblemsReply)
		return ctx.Result(200, reply)
	}
}

func _ContestService_GetProblem0_HTTP_Handler(srv ContestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetProblemRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContestServiceGetProblem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProblem(ctx, req.(*GetProblemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetProblemReply)
		return ctx.Result(200, reply)
	}
}

func _ContestService_Submit0_HTTP_Handler(srv ContestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SubmitRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContestServiceSubmit)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Submit(ctx, req.(*SubmitRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SubmitReply)
		return ctx.Result(200, reply)
	}
}

func _ContestService_SelfTest0_HTTP_Handler(srv ContestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SelfTestRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContestServiceSelfTest)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SelfTest(ctx, req.(*SelfTestRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SelfTestReply)
		return ctx.Result(200, reply)
	}
}

func _ContestService_GetSubmission0_HTTP_Handler(srv ContestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSubmissionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContestServiceGetSubmission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSubmission(ctx, req.(*GetSubmissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSubmissionReply)
		return ctx.Result(200, reply)
	}
}

func _ContestService_ListRanking0_HTTP_Handler(srv ContestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRankingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContestServiceListRanking)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRanking(ctx, req.(*ListRankingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRankingReply)
		return ctx.Result(200, reply)
	}
}

type ContestServiceHTTPClient interface {
	GetContests(ctx context.Context, req *GetContestsRequest, opts ...http.CallOption) (rsp *GetContestsReply, err error)
	GetProblem(ctx context.Context, req *GetProblemRequest, opts ...http.CallOption) (rsp *GetProblemReply, err error)
	GetProblems(ctx context.Context, req *GetProblemsRequest, opts ...http.CallOption) (rsp *GetProblemsReply, err error)
	GetSubmission(ctx context.Context, req *GetSubmissionRequest, opts ...http.CallOption) (rsp *GetSubmissionReply, err error)
	JoinContest(ctx context.Context, req *JoinContestRequest, opts ...http.CallOption) (rsp *JoinContestReply, err error)
	ListRanking(ctx context.Context, req *ListRankingRequest, opts ...http.CallOption) (rsp *ListRankingReply, err error)
	SelfTest(ctx context.Context, req *SelfTestRequest, opts ...http.CallOption) (rsp *SelfTestReply, err error)
	Submit(ctx context.Context, req *SubmitRequest, opts ...http.CallOption) (rsp *SubmitReply, err error)
}

type ContestServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewContestServiceHTTPClient(client *http.Client) ContestServiceHTTPClient {
	return &ContestServiceHTTPClientImpl{client}
}

func (c *ContestServiceHTTPClientImpl) GetContests(ctx context.Context, in *GetContestsRequest, opts ...http.CallOption) (*GetContestsReply, error) {
	var out GetContestsReply
	pattern := "/user/contests"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationContestServiceGetContests))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ContestServiceHTTPClientImpl) GetProblem(ctx context.Context, in *GetProblemRequest, opts ...http.CallOption) (*GetProblemReply, error) {
	var out GetProblemReply
	pattern := "/user/contests/{contest_id}/problems/{problem_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationContestServiceGetProblem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ContestServiceHTTPClientImpl) GetProblems(ctx context.Context, in *GetProblemsRequest, opts ...http.CallOption) (*GetProblemsReply, error) {
	var out GetProblemsReply
	pattern := "/user/contests/{contest_id}/problems"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationContestServiceGetProblems))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ContestServiceHTTPClientImpl) GetSubmission(ctx context.Context, in *GetSubmissionRequest, opts ...http.CallOption) (*GetSubmissionReply, error) {
	var out GetSubmissionReply
	pattern := "/user/contests/{contest_id}/problems/{problem_id}/submission/{submission_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationContestServiceGetSubmission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ContestServiceHTTPClientImpl) JoinContest(ctx context.Context, in *JoinContestRequest, opts ...http.CallOption) (*JoinContestReply, error) {
	var out JoinContestReply
	pattern := "/user/contests/{contest_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationContestServiceJoinContest))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.JoinContestBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ContestServiceHTTPClientImpl) ListRanking(ctx context.Context, in *ListRankingRequest, opts ...http.CallOption) (*ListRankingReply, error) {
	var out ListRankingReply
	pattern := "/user/contests/{contest_id}/ranking"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationContestServiceListRanking))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ContestServiceHTTPClientImpl) SelfTest(ctx context.Context, in *SelfTestRequest, opts ...http.CallOption) (*SelfTestReply, error) {
	var out SelfTestReply
	pattern := "/user/contests/{contest_id}/problems/{problem_id}/test"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationContestServiceSelfTest))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ContestServiceHTTPClientImpl) Submit(ctx context.Context, in *SubmitRequest, opts ...http.CallOption) (*SubmitReply, error) {
	var out SubmitReply
	pattern := "/user/contests/{contest_id}/problems/{problem_id}/submission"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationContestServiceSubmit))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
