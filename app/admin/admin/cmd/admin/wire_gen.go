// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"sastoj/app/admin/admin/internal/biz"
	"sastoj/app/admin/admin/internal/conf"
	"sastoj/app/admin/admin/internal/data"
	"sastoj/app/admin/admin/internal/job"
	"sastoj/app/admin/admin/internal/server"
	"sastoj/app/admin/admin/internal/service"

	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
	_ "sastoj/ent/runtime"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, confJob *conf.Job, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	caseRepo := data.NewProblemCaseRepo(dataData, logger)
	caseUsecase := biz.NewCaseUsecase(caseRepo, logger)
	contestRepo := data.NewContestRepo(dataData, logger)
	contestUsecase := biz.NewContestUsecase(contestRepo, logger)
	rankRepo := data.NewRankRepo(dataData, logger)
	rankUsecase := biz.NewRankUsecase(rankRepo, logger)
	judgeRepo := data.NewJudgeRepo(dataData, logger)
	judgeUsecase := biz.NewJudgeUsecase(judgeRepo, logger)
	adjudicatorRepo := data.NewAdjudicatorRepo(dataData, logger)
	adjudicatorUsecase := biz.NewAdjudicatorUsecase(adjudicatorRepo, logger)
	userRepo := data.NewUserRepo(dataData, logger)
	userUsecase := biz.NewUserUsecase(userRepo, logger)
	groupRepo := data.NewGroupRepo(dataData, logger)
	groupUsecase := biz.NewGroupUsecase(groupRepo, logger)
	problemRepo := data.NewProblemRepo(dataData, logger)
	problemUsecase := biz.NewProblemUsecase(problemRepo, logger)
	adminService := service.NewAdminService(caseUsecase, contestUsecase, rankUsecase, judgeUsecase, adjudicatorUsecase, userUsecase, groupUsecase, problemUsecase)
	grpcServer := server.NewGRPCServer(confServer, adminService, logger)
	httpServer := server.NewHTTPServer(confServer, adminService, logger)
	contestJob := job.NewContestJob(contestUsecase, rankUsecase)
	cronWorker, err := server.NewCronWorker(confJob, contestJob, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	app := newApp(logger, grpcServer, httpServer, cronWorker)
	return app, func() {
		cleanup()
	}, nil
}
