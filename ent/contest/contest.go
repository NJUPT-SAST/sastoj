// Code generated by ent, DO NOT EDIT.

package contest

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the contest type in the database.
	Label = "contest"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// FieldLanguage holds the string denoting the language field in the database.
	FieldLanguage = "language"
	// FieldExtraTime holds the string denoting the extra_time field in the database.
	FieldExtraTime = "extra_time"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// EdgeContestGroup holds the string denoting the contest_group edge name in mutations.
	EdgeContestGroup = "contest_group"
	// EdgeProblems holds the string denoting the problems edge name in mutations.
	EdgeProblems = "problems"
	// Table holds the table name of the contest in the database.
	Table = "contests"
	// ContestGroupTable is the table that holds the contest_group relation/edge.
	ContestGroupTable = "contest_group"
	// ContestGroupInverseTable is the table name for the ContestGroup entity.
	// It exists in this package in order to avoid circular dependency with the "contestgroup" package.
	ContestGroupInverseTable = "contest_group"
	// ContestGroupColumn is the table column denoting the contest_group relation/edge.
	ContestGroupColumn = "contest_contest_group"
	// ProblemsTable is the table that holds the problems relation/edge.
	ProblemsTable = "problems"
	// ProblemsInverseTable is the table name for the Problem entity.
	// It exists in this package in order to avoid circular dependency with the "problem" package.
	ProblemsInverseTable = "problems"
	// ProblemsColumn is the table column denoting the problems relation/edge.
	ProblemsColumn = "contest_problems"
)

// Columns holds all SQL columns for contest fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldDescription,
	FieldState,
	FieldType,
	FieldStartTime,
	FieldEndTime,
	FieldLanguage,
	FieldExtraTime,
	FieldCreateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// StateValidator is a validator for the "state" field. It is called by the builders before save.
	StateValidator func(int) error
	// TypeValidator is a validator for the "type" field. It is called by the builders before save.
	TypeValidator func(int) error
	// ExtraTimeValidator is a validator for the "extra_time" field. It is called by the builders before save.
	ExtraTimeValidator func(int) error
)

// OrderOption defines the ordering options for the Contest queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// ByLanguage orders the results by the language field.
func ByLanguage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanguage, opts...).ToFunc()
}

// ByExtraTime orders the results by the extra_time field.
func ByExtraTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExtraTime, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByContestGroupCount orders the results by contest_group count.
func ByContestGroupCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newContestGroupStep(), opts...)
	}
}

// ByContestGroup orders the results by contest_group terms.
func ByContestGroup(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContestGroupStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProblemsCount orders the results by problems count.
func ByProblemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProblemsStep(), opts...)
	}
}

// ByProblems orders the results by problems terms.
func ByProblems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProblemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newContestGroupStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContestGroupInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ContestGroupTable, ContestGroupColumn),
	)
}
func newProblemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProblemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProblemsTable, ProblemsColumn),
	)
}
