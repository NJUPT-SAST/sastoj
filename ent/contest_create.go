// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sastoj/ent/contest"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ContestCreate is the builder for creating a Contest entity.
type ContestCreate struct {
	config
	mutation *ContestMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (cc *ContestCreate) SetTitle(s string) *ContestCreate {
	cc.mutation.SetTitle(s)
	return cc
}

// SetDescription sets the "description" field.
func (cc *ContestCreate) SetDescription(s string) *ContestCreate {
	cc.mutation.SetDescription(s)
	return cc
}

// SetState sets the "state" field.
func (cc *ContestCreate) SetState(i int) *ContestCreate {
	cc.mutation.SetState(i)
	return cc
}

// SetType sets the "type" field.
func (cc *ContestCreate) SetType(i int) *ContestCreate {
	cc.mutation.SetType(i)
	return cc
}

// SetStartTime sets the "start_time" field.
func (cc *ContestCreate) SetStartTime(t time.Time) *ContestCreate {
	cc.mutation.SetStartTime(t)
	return cc
}

// SetEndTime sets the "end_time" field.
func (cc *ContestCreate) SetEndTime(t time.Time) *ContestCreate {
	cc.mutation.SetEndTime(t)
	return cc
}

// SetLanguage sets the "language" field.
func (cc *ContestCreate) SetLanguage(s string) *ContestCreate {
	cc.mutation.SetLanguage(s)
	return cc
}

// SetExtraTime sets the "extra_time" field.
func (cc *ContestCreate) SetExtraTime(i int) *ContestCreate {
	cc.mutation.SetExtraTime(i)
	return cc
}

// SetCreateTime sets the "create_time" field.
func (cc *ContestCreate) SetCreateTime(t time.Time) *ContestCreate {
	cc.mutation.SetCreateTime(t)
	return cc
}

// SetID sets the "id" field.
func (cc *ContestCreate) SetID(i int) *ContestCreate {
	cc.mutation.SetID(i)
	return cc
}

// Mutation returns the ContestMutation object of the builder.
func (cc *ContestCreate) Mutation() *ContestMutation {
	return cc.mutation
}

// Save creates the Contest in the database.
func (cc *ContestCreate) Save(ctx context.Context) (*Contest, error) {
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ContestCreate) SaveX(ctx context.Context) *Contest {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ContestCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ContestCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ContestCreate) check() error {
	if _, ok := cc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Contest.title"`)}
	}
	if _, ok := cc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Contest.description"`)}
	}
	if _, ok := cc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "Contest.state"`)}
	}
	if v, ok := cc.mutation.State(); ok {
		if err := contest.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Contest.state": %w`, err)}
		}
	}
	if _, ok := cc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Contest.type"`)}
	}
	if v, ok := cc.mutation.GetType(); ok {
		if err := contest.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Contest.type": %w`, err)}
		}
	}
	if _, ok := cc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "Contest.start_time"`)}
	}
	if _, ok := cc.mutation.EndTime(); !ok {
		return &ValidationError{Name: "end_time", err: errors.New(`ent: missing required field "Contest.end_time"`)}
	}
	if _, ok := cc.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required field "Contest.language"`)}
	}
	if _, ok := cc.mutation.ExtraTime(); !ok {
		return &ValidationError{Name: "extra_time", err: errors.New(`ent: missing required field "Contest.extra_time"`)}
	}
	if v, ok := cc.mutation.ExtraTime(); ok {
		if err := contest.ExtraTimeValidator(v); err != nil {
			return &ValidationError{Name: "extra_time", err: fmt.Errorf(`ent: validator failed for field "Contest.extra_time": %w`, err)}
		}
	}
	if _, ok := cc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Contest.create_time"`)}
	}
	return nil
}

func (cc *ContestCreate) sqlSave(ctx context.Context) (*Contest, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ContestCreate) createSpec() (*Contest, *sqlgraph.CreateSpec) {
	var (
		_node = &Contest{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(contest.Table, sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.Title(); ok {
		_spec.SetField(contest.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := cc.mutation.Description(); ok {
		_spec.SetField(contest.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := cc.mutation.State(); ok {
		_spec.SetField(contest.FieldState, field.TypeInt, value)
		_node.State = value
	}
	if value, ok := cc.mutation.GetType(); ok {
		_spec.SetField(contest.FieldType, field.TypeInt, value)
		_node.Type = value
	}
	if value, ok := cc.mutation.StartTime(); ok {
		_spec.SetField(contest.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := cc.mutation.EndTime(); ok {
		_spec.SetField(contest.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if value, ok := cc.mutation.Language(); ok {
		_spec.SetField(contest.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := cc.mutation.ExtraTime(); ok {
		_spec.SetField(contest.FieldExtraTime, field.TypeInt, value)
		_node.ExtraTime = value
	}
	if value, ok := cc.mutation.CreateTime(); ok {
		_spec.SetField(contest.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	return _node, _spec
}

// ContestCreateBulk is the builder for creating many Contest entities in bulk.
type ContestCreateBulk struct {
	config
	err      error
	builders []*ContestCreate
}

// Save creates the Contest entities in the database.
func (ccb *ContestCreateBulk) Save(ctx context.Context) ([]*Contest, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Contest, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ContestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ContestCreateBulk) SaveX(ctx context.Context) []*Contest {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ContestCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ContestCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
