// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sastoj/ent/contest"
	"sastoj/ent/contestresult"
	"sastoj/ent/group"
	"sastoj/ent/problem"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ContestCreate is the builder for creating a Contest entity.
type ContestCreate struct {
	config
	mutation *ContestMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTitle sets the "title" field.
func (cc *ContestCreate) SetTitle(s string) *ContestCreate {
	cc.mutation.SetTitle(s)
	return cc
}

// SetDescription sets the "description" field.
func (cc *ContestCreate) SetDescription(s string) *ContestCreate {
	cc.mutation.SetDescription(s)
	return cc
}

// SetState sets the "state" field.
func (cc *ContestCreate) SetState(c contest.State) *ContestCreate {
	cc.mutation.SetState(c)
	return cc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (cc *ContestCreate) SetNillableState(c *contest.State) *ContestCreate {
	if c != nil {
		cc.SetState(*c)
	}
	return cc
}

// SetType sets the "type" field.
func (cc *ContestCreate) SetType(i int16) *ContestCreate {
	cc.mutation.SetType(i)
	return cc
}

// SetStartTime sets the "start_time" field.
func (cc *ContestCreate) SetStartTime(t time.Time) *ContestCreate {
	cc.mutation.SetStartTime(t)
	return cc
}

// SetEndTime sets the "end_time" field.
func (cc *ContestCreate) SetEndTime(t time.Time) *ContestCreate {
	cc.mutation.SetEndTime(t)
	return cc
}

// SetLanguage sets the "language" field.
func (cc *ContestCreate) SetLanguage(s string) *ContestCreate {
	cc.mutation.SetLanguage(s)
	return cc
}

// SetExtraTime sets the "extra_time" field.
func (cc *ContestCreate) SetExtraTime(i int16) *ContestCreate {
	cc.mutation.SetExtraTime(i)
	return cc
}

// SetNillableExtraTime sets the "extra_time" field if the given value is not nil.
func (cc *ContestCreate) SetNillableExtraTime(i *int16) *ContestCreate {
	if i != nil {
		cc.SetExtraTime(*i)
	}
	return cc
}

// SetCreateTime sets the "create_time" field.
func (cc *ContestCreate) SetCreateTime(t time.Time) *ContestCreate {
	cc.mutation.SetCreateTime(t)
	return cc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cc *ContestCreate) SetNillableCreateTime(t *time.Time) *ContestCreate {
	if t != nil {
		cc.SetCreateTime(*t)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *ContestCreate) SetID(i int64) *ContestCreate {
	cc.mutation.SetID(i)
	return cc
}

// AddProblemIDs adds the "problems" edge to the Problem entity by IDs.
func (cc *ContestCreate) AddProblemIDs(ids ...int64) *ContestCreate {
	cc.mutation.AddProblemIDs(ids...)
	return cc
}

// AddProblems adds the "problems" edges to the Problem entity.
func (cc *ContestCreate) AddProblems(p ...*Problem) *ContestCreate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cc.AddProblemIDs(ids...)
}

// AddContestantIDs adds the "contestants" edge to the Group entity by IDs.
func (cc *ContestCreate) AddContestantIDs(ids ...int64) *ContestCreate {
	cc.mutation.AddContestantIDs(ids...)
	return cc
}

// AddContestants adds the "contestants" edges to the Group entity.
func (cc *ContestCreate) AddContestants(g ...*Group) *ContestCreate {
	ids := make([]int64, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cc.AddContestantIDs(ids...)
}

// AddManagerIDs adds the "managers" edge to the Group entity by IDs.
func (cc *ContestCreate) AddManagerIDs(ids ...int64) *ContestCreate {
	cc.mutation.AddManagerIDs(ids...)
	return cc
}

// AddManagers adds the "managers" edges to the Group entity.
func (cc *ContestCreate) AddManagers(g ...*Group) *ContestCreate {
	ids := make([]int64, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cc.AddManagerIDs(ids...)
}

// AddContestResultIDs adds the "contest_results" edge to the ContestResult entity by IDs.
func (cc *ContestCreate) AddContestResultIDs(ids ...int) *ContestCreate {
	cc.mutation.AddContestResultIDs(ids...)
	return cc
}

// AddContestResults adds the "contest_results" edges to the ContestResult entity.
func (cc *ContestCreate) AddContestResults(c ...*ContestResult) *ContestCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddContestResultIDs(ids...)
}

// Mutation returns the ContestMutation object of the builder.
func (cc *ContestCreate) Mutation() *ContestMutation {
	return cc.mutation
}

// Save creates the Contest in the database.
func (cc *ContestCreate) Save(ctx context.Context) (*Contest, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ContestCreate) SaveX(ctx context.Context) *Contest {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ContestCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ContestCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ContestCreate) defaults() {
	if _, ok := cc.mutation.State(); !ok {
		v := contest.DefaultState
		cc.mutation.SetState(v)
	}
	if _, ok := cc.mutation.ExtraTime(); !ok {
		v := contest.DefaultExtraTime
		cc.mutation.SetExtraTime(v)
	}
	if _, ok := cc.mutation.CreateTime(); !ok {
		v := contest.DefaultCreateTime
		cc.mutation.SetCreateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ContestCreate) check() error {
	if _, ok := cc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Contest.title"`)}
	}
	if _, ok := cc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Contest.description"`)}
	}
	if _, ok := cc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "Contest.state"`)}
	}
	if v, ok := cc.mutation.State(); ok {
		if err := contest.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Contest.state": %w`, err)}
		}
	}
	if _, ok := cc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Contest.type"`)}
	}
	if v, ok := cc.mutation.GetType(); ok {
		if err := contest.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Contest.type": %w`, err)}
		}
	}
	if _, ok := cc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "Contest.start_time"`)}
	}
	if _, ok := cc.mutation.EndTime(); !ok {
		return &ValidationError{Name: "end_time", err: errors.New(`ent: missing required field "Contest.end_time"`)}
	}
	if _, ok := cc.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required field "Contest.language"`)}
	}
	if _, ok := cc.mutation.ExtraTime(); !ok {
		return &ValidationError{Name: "extra_time", err: errors.New(`ent: missing required field "Contest.extra_time"`)}
	}
	if v, ok := cc.mutation.ExtraTime(); ok {
		if err := contest.ExtraTimeValidator(v); err != nil {
			return &ValidationError{Name: "extra_time", err: fmt.Errorf(`ent: validator failed for field "Contest.extra_time": %w`, err)}
		}
	}
	if _, ok := cc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Contest.create_time"`)}
	}
	return nil
}

func (cc *ContestCreate) sqlSave(ctx context.Context) (*Contest, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ContestCreate) createSpec() (*Contest, *sqlgraph.CreateSpec) {
	var (
		_node = &Contest{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(contest.Table, sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.Title(); ok {
		_spec.SetField(contest.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := cc.mutation.Description(); ok {
		_spec.SetField(contest.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := cc.mutation.State(); ok {
		_spec.SetField(contest.FieldState, field.TypeEnum, value)
		_node.State = value
	}
	if value, ok := cc.mutation.GetType(); ok {
		_spec.SetField(contest.FieldType, field.TypeInt16, value)
		_node.Type = value
	}
	if value, ok := cc.mutation.StartTime(); ok {
		_spec.SetField(contest.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := cc.mutation.EndTime(); ok {
		_spec.SetField(contest.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if value, ok := cc.mutation.Language(); ok {
		_spec.SetField(contest.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := cc.mutation.ExtraTime(); ok {
		_spec.SetField(contest.FieldExtraTime, field.TypeInt16, value)
		_node.ExtraTime = value
	}
	if value, ok := cc.mutation.CreateTime(); ok {
		_spec.SetField(contest.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if nodes := cc.mutation.ProblemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contest.ProblemsTable,
			Columns: []string{contest.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ContestantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   contest.ContestantsTable,
			Columns: contest.ContestantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ManagersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   contest.ManagersTable,
			Columns: contest.ManagersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ContestResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contest.ContestResultsTable,
			Columns: []string{contest.ContestResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contestresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Contest.Create().
//		SetTitle(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ContestUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (cc *ContestCreate) OnConflict(opts ...sql.ConflictOption) *ContestUpsertOne {
	cc.conflict = opts
	return &ContestUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Contest.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *ContestCreate) OnConflictColumns(columns ...string) *ContestUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &ContestUpsertOne{
		create: cc,
	}
}

type (
	// ContestUpsertOne is the builder for "upsert"-ing
	//  one Contest node.
	ContestUpsertOne struct {
		create *ContestCreate
	}

	// ContestUpsert is the "OnConflict" setter.
	ContestUpsert struct {
		*sql.UpdateSet
	}
)

// SetTitle sets the "title" field.
func (u *ContestUpsert) SetTitle(v string) *ContestUpsert {
	u.Set(contest.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ContestUpsert) UpdateTitle() *ContestUpsert {
	u.SetExcluded(contest.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *ContestUpsert) SetDescription(v string) *ContestUpsert {
	u.Set(contest.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ContestUpsert) UpdateDescription() *ContestUpsert {
	u.SetExcluded(contest.FieldDescription)
	return u
}

// SetState sets the "state" field.
func (u *ContestUpsert) SetState(v contest.State) *ContestUpsert {
	u.Set(contest.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *ContestUpsert) UpdateState() *ContestUpsert {
	u.SetExcluded(contest.FieldState)
	return u
}

// SetType sets the "type" field.
func (u *ContestUpsert) SetType(v int16) *ContestUpsert {
	u.Set(contest.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ContestUpsert) UpdateType() *ContestUpsert {
	u.SetExcluded(contest.FieldType)
	return u
}

// AddType adds v to the "type" field.
func (u *ContestUpsert) AddType(v int16) *ContestUpsert {
	u.Add(contest.FieldType, v)
	return u
}

// SetStartTime sets the "start_time" field.
func (u *ContestUpsert) SetStartTime(v time.Time) *ContestUpsert {
	u.Set(contest.FieldStartTime, v)
	return u
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *ContestUpsert) UpdateStartTime() *ContestUpsert {
	u.SetExcluded(contest.FieldStartTime)
	return u
}

// SetEndTime sets the "end_time" field.
func (u *ContestUpsert) SetEndTime(v time.Time) *ContestUpsert {
	u.Set(contest.FieldEndTime, v)
	return u
}

// UpdateEndTime sets the "end_time" field to the value that was provided on create.
func (u *ContestUpsert) UpdateEndTime() *ContestUpsert {
	u.SetExcluded(contest.FieldEndTime)
	return u
}

// SetLanguage sets the "language" field.
func (u *ContestUpsert) SetLanguage(v string) *ContestUpsert {
	u.Set(contest.FieldLanguage, v)
	return u
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *ContestUpsert) UpdateLanguage() *ContestUpsert {
	u.SetExcluded(contest.FieldLanguage)
	return u
}

// SetExtraTime sets the "extra_time" field.
func (u *ContestUpsert) SetExtraTime(v int16) *ContestUpsert {
	u.Set(contest.FieldExtraTime, v)
	return u
}

// UpdateExtraTime sets the "extra_time" field to the value that was provided on create.
func (u *ContestUpsert) UpdateExtraTime() *ContestUpsert {
	u.SetExcluded(contest.FieldExtraTime)
	return u
}

// AddExtraTime adds v to the "extra_time" field.
func (u *ContestUpsert) AddExtraTime(v int16) *ContestUpsert {
	u.Add(contest.FieldExtraTime, v)
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *ContestUpsert) SetCreateTime(v time.Time) *ContestUpsert {
	u.Set(contest.FieldCreateTime, v)
	return u
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *ContestUpsert) UpdateCreateTime() *ContestUpsert {
	u.SetExcluded(contest.FieldCreateTime)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Contest.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(contest.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ContestUpsertOne) UpdateNewValues() *ContestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(contest.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Contest.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ContestUpsertOne) Ignore() *ContestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ContestUpsertOne) DoNothing() *ContestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ContestCreate.OnConflict
// documentation for more info.
func (u *ContestUpsertOne) Update(set func(*ContestUpsert)) *ContestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ContestUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *ContestUpsertOne) SetTitle(v string) *ContestUpsertOne {
	return u.Update(func(s *ContestUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ContestUpsertOne) UpdateTitle() *ContestUpsertOne {
	return u.Update(func(s *ContestUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *ContestUpsertOne) SetDescription(v string) *ContestUpsertOne {
	return u.Update(func(s *ContestUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ContestUpsertOne) UpdateDescription() *ContestUpsertOne {
	return u.Update(func(s *ContestUpsert) {
		s.UpdateDescription()
	})
}

// SetState sets the "state" field.
func (u *ContestUpsertOne) SetState(v contest.State) *ContestUpsertOne {
	return u.Update(func(s *ContestUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *ContestUpsertOne) UpdateState() *ContestUpsertOne {
	return u.Update(func(s *ContestUpsert) {
		s.UpdateState()
	})
}

// SetType sets the "type" field.
func (u *ContestUpsertOne) SetType(v int16) *ContestUpsertOne {
	return u.Update(func(s *ContestUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *ContestUpsertOne) AddType(v int16) *ContestUpsertOne {
	return u.Update(func(s *ContestUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ContestUpsertOne) UpdateType() *ContestUpsertOne {
	return u.Update(func(s *ContestUpsert) {
		s.UpdateType()
	})
}

// SetStartTime sets the "start_time" field.
func (u *ContestUpsertOne) SetStartTime(v time.Time) *ContestUpsertOne {
	return u.Update(func(s *ContestUpsert) {
		s.SetStartTime(v)
	})
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *ContestUpsertOne) UpdateStartTime() *ContestUpsertOne {
	return u.Update(func(s *ContestUpsert) {
		s.UpdateStartTime()
	})
}

// SetEndTime sets the "end_time" field.
func (u *ContestUpsertOne) SetEndTime(v time.Time) *ContestUpsertOne {
	return u.Update(func(s *ContestUpsert) {
		s.SetEndTime(v)
	})
}

// UpdateEndTime sets the "end_time" field to the value that was provided on create.
func (u *ContestUpsertOne) UpdateEndTime() *ContestUpsertOne {
	return u.Update(func(s *ContestUpsert) {
		s.UpdateEndTime()
	})
}

// SetLanguage sets the "language" field.
func (u *ContestUpsertOne) SetLanguage(v string) *ContestUpsertOne {
	return u.Update(func(s *ContestUpsert) {
		s.SetLanguage(v)
	})
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *ContestUpsertOne) UpdateLanguage() *ContestUpsertOne {
	return u.Update(func(s *ContestUpsert) {
		s.UpdateLanguage()
	})
}

// SetExtraTime sets the "extra_time" field.
func (u *ContestUpsertOne) SetExtraTime(v int16) *ContestUpsertOne {
	return u.Update(func(s *ContestUpsert) {
		s.SetExtraTime(v)
	})
}

// AddExtraTime adds v to the "extra_time" field.
func (u *ContestUpsertOne) AddExtraTime(v int16) *ContestUpsertOne {
	return u.Update(func(s *ContestUpsert) {
		s.AddExtraTime(v)
	})
}

// UpdateExtraTime sets the "extra_time" field to the value that was provided on create.
func (u *ContestUpsertOne) UpdateExtraTime() *ContestUpsertOne {
	return u.Update(func(s *ContestUpsert) {
		s.UpdateExtraTime()
	})
}

// SetCreateTime sets the "create_time" field.
func (u *ContestUpsertOne) SetCreateTime(v time.Time) *ContestUpsertOne {
	return u.Update(func(s *ContestUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *ContestUpsertOne) UpdateCreateTime() *ContestUpsertOne {
	return u.Update(func(s *ContestUpsert) {
		s.UpdateCreateTime()
	})
}

// Exec executes the query.
func (u *ContestUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ContestCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ContestUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ContestUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ContestUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ContestCreateBulk is the builder for creating many Contest entities in bulk.
type ContestCreateBulk struct {
	config
	err      error
	builders []*ContestCreate
	conflict []sql.ConflictOption
}

// Save creates the Contest entities in the database.
func (ccb *ContestCreateBulk) Save(ctx context.Context) ([]*Contest, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Contest, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ContestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ContestCreateBulk) SaveX(ctx context.Context) []*Contest {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ContestCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ContestCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Contest.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ContestUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (ccb *ContestCreateBulk) OnConflict(opts ...sql.ConflictOption) *ContestUpsertBulk {
	ccb.conflict = opts
	return &ContestUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Contest.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *ContestCreateBulk) OnConflictColumns(columns ...string) *ContestUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &ContestUpsertBulk{
		create: ccb,
	}
}

// ContestUpsertBulk is the builder for "upsert"-ing
// a bulk of Contest nodes.
type ContestUpsertBulk struct {
	create *ContestCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Contest.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(contest.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ContestUpsertBulk) UpdateNewValues() *ContestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(contest.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Contest.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ContestUpsertBulk) Ignore() *ContestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ContestUpsertBulk) DoNothing() *ContestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ContestCreateBulk.OnConflict
// documentation for more info.
func (u *ContestUpsertBulk) Update(set func(*ContestUpsert)) *ContestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ContestUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *ContestUpsertBulk) SetTitle(v string) *ContestUpsertBulk {
	return u.Update(func(s *ContestUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ContestUpsertBulk) UpdateTitle() *ContestUpsertBulk {
	return u.Update(func(s *ContestUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *ContestUpsertBulk) SetDescription(v string) *ContestUpsertBulk {
	return u.Update(func(s *ContestUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ContestUpsertBulk) UpdateDescription() *ContestUpsertBulk {
	return u.Update(func(s *ContestUpsert) {
		s.UpdateDescription()
	})
}

// SetState sets the "state" field.
func (u *ContestUpsertBulk) SetState(v contest.State) *ContestUpsertBulk {
	return u.Update(func(s *ContestUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *ContestUpsertBulk) UpdateState() *ContestUpsertBulk {
	return u.Update(func(s *ContestUpsert) {
		s.UpdateState()
	})
}

// SetType sets the "type" field.
func (u *ContestUpsertBulk) SetType(v int16) *ContestUpsertBulk {
	return u.Update(func(s *ContestUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *ContestUpsertBulk) AddType(v int16) *ContestUpsertBulk {
	return u.Update(func(s *ContestUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ContestUpsertBulk) UpdateType() *ContestUpsertBulk {
	return u.Update(func(s *ContestUpsert) {
		s.UpdateType()
	})
}

// SetStartTime sets the "start_time" field.
func (u *ContestUpsertBulk) SetStartTime(v time.Time) *ContestUpsertBulk {
	return u.Update(func(s *ContestUpsert) {
		s.SetStartTime(v)
	})
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *ContestUpsertBulk) UpdateStartTime() *ContestUpsertBulk {
	return u.Update(func(s *ContestUpsert) {
		s.UpdateStartTime()
	})
}

// SetEndTime sets the "end_time" field.
func (u *ContestUpsertBulk) SetEndTime(v time.Time) *ContestUpsertBulk {
	return u.Update(func(s *ContestUpsert) {
		s.SetEndTime(v)
	})
}

// UpdateEndTime sets the "end_time" field to the value that was provided on create.
func (u *ContestUpsertBulk) UpdateEndTime() *ContestUpsertBulk {
	return u.Update(func(s *ContestUpsert) {
		s.UpdateEndTime()
	})
}

// SetLanguage sets the "language" field.
func (u *ContestUpsertBulk) SetLanguage(v string) *ContestUpsertBulk {
	return u.Update(func(s *ContestUpsert) {
		s.SetLanguage(v)
	})
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *ContestUpsertBulk) UpdateLanguage() *ContestUpsertBulk {
	return u.Update(func(s *ContestUpsert) {
		s.UpdateLanguage()
	})
}

// SetExtraTime sets the "extra_time" field.
func (u *ContestUpsertBulk) SetExtraTime(v int16) *ContestUpsertBulk {
	return u.Update(func(s *ContestUpsert) {
		s.SetExtraTime(v)
	})
}

// AddExtraTime adds v to the "extra_time" field.
func (u *ContestUpsertBulk) AddExtraTime(v int16) *ContestUpsertBulk {
	return u.Update(func(s *ContestUpsert) {
		s.AddExtraTime(v)
	})
}

// UpdateExtraTime sets the "extra_time" field to the value that was provided on create.
func (u *ContestUpsertBulk) UpdateExtraTime() *ContestUpsertBulk {
	return u.Update(func(s *ContestUpsert) {
		s.UpdateExtraTime()
	})
}

// SetCreateTime sets the "create_time" field.
func (u *ContestUpsertBulk) SetCreateTime(v time.Time) *ContestUpsertBulk {
	return u.Update(func(s *ContestUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *ContestUpsertBulk) UpdateCreateTime() *ContestUpsertBulk {
	return u.Update(func(s *ContestUpsert) {
		s.UpdateCreateTime()
	})
}

// Exec executes the query.
func (u *ContestUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ContestCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ContestCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ContestUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
