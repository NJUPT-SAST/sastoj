// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sastoj/ent/contest"
	"sastoj/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ContestUpdate is the builder for updating Contest entities.
type ContestUpdate struct {
	config
	hooks    []Hook
	mutation *ContestMutation
}

// Where appends a list predicates to the ContestUpdate builder.
func (cu *ContestUpdate) Where(ps ...predicate.Contest) *ContestUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetTitle sets the "title" field.
func (cu *ContestUpdate) SetTitle(s string) *ContestUpdate {
	cu.mutation.SetTitle(s)
	return cu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cu *ContestUpdate) SetNillableTitle(s *string) *ContestUpdate {
	if s != nil {
		cu.SetTitle(*s)
	}
	return cu
}

// SetDescription sets the "description" field.
func (cu *ContestUpdate) SetDescription(s string) *ContestUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *ContestUpdate) SetNillableDescription(s *string) *ContestUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// SetState sets the "state" field.
func (cu *ContestUpdate) SetState(i int) *ContestUpdate {
	cu.mutation.ResetState()
	cu.mutation.SetState(i)
	return cu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (cu *ContestUpdate) SetNillableState(i *int) *ContestUpdate {
	if i != nil {
		cu.SetState(*i)
	}
	return cu
}

// AddState adds i to the "state" field.
func (cu *ContestUpdate) AddState(i int) *ContestUpdate {
	cu.mutation.AddState(i)
	return cu
}

// SetType sets the "type" field.
func (cu *ContestUpdate) SetType(i int) *ContestUpdate {
	cu.mutation.ResetType()
	cu.mutation.SetType(i)
	return cu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cu *ContestUpdate) SetNillableType(i *int) *ContestUpdate {
	if i != nil {
		cu.SetType(*i)
	}
	return cu
}

// AddType adds i to the "type" field.
func (cu *ContestUpdate) AddType(i int) *ContestUpdate {
	cu.mutation.AddType(i)
	return cu
}

// SetStartTime sets the "start_time" field.
func (cu *ContestUpdate) SetStartTime(t time.Time) *ContestUpdate {
	cu.mutation.SetStartTime(t)
	return cu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (cu *ContestUpdate) SetNillableStartTime(t *time.Time) *ContestUpdate {
	if t != nil {
		cu.SetStartTime(*t)
	}
	return cu
}

// SetEndTime sets the "end_time" field.
func (cu *ContestUpdate) SetEndTime(t time.Time) *ContestUpdate {
	cu.mutation.SetEndTime(t)
	return cu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (cu *ContestUpdate) SetNillableEndTime(t *time.Time) *ContestUpdate {
	if t != nil {
		cu.SetEndTime(*t)
	}
	return cu
}

// SetLanguage sets the "language" field.
func (cu *ContestUpdate) SetLanguage(s string) *ContestUpdate {
	cu.mutation.SetLanguage(s)
	return cu
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (cu *ContestUpdate) SetNillableLanguage(s *string) *ContestUpdate {
	if s != nil {
		cu.SetLanguage(*s)
	}
	return cu
}

// SetExtraTime sets the "extra_time" field.
func (cu *ContestUpdate) SetExtraTime(i int) *ContestUpdate {
	cu.mutation.ResetExtraTime()
	cu.mutation.SetExtraTime(i)
	return cu
}

// SetNillableExtraTime sets the "extra_time" field if the given value is not nil.
func (cu *ContestUpdate) SetNillableExtraTime(i *int) *ContestUpdate {
	if i != nil {
		cu.SetExtraTime(*i)
	}
	return cu
}

// AddExtraTime adds i to the "extra_time" field.
func (cu *ContestUpdate) AddExtraTime(i int) *ContestUpdate {
	cu.mutation.AddExtraTime(i)
	return cu
}

// SetCreateTime sets the "create_time" field.
func (cu *ContestUpdate) SetCreateTime(t time.Time) *ContestUpdate {
	cu.mutation.SetCreateTime(t)
	return cu
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cu *ContestUpdate) SetNillableCreateTime(t *time.Time) *ContestUpdate {
	if t != nil {
		cu.SetCreateTime(*t)
	}
	return cu
}

// Mutation returns the ContestMutation object of the builder.
func (cu *ContestUpdate) Mutation() *ContestMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ContestUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ContestUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ContestUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ContestUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ContestUpdate) check() error {
	if v, ok := cu.mutation.State(); ok {
		if err := contest.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Contest.state": %w`, err)}
		}
	}
	if v, ok := cu.mutation.GetType(); ok {
		if err := contest.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Contest.type": %w`, err)}
		}
	}
	if v, ok := cu.mutation.ExtraTime(); ok {
		if err := contest.ExtraTimeValidator(v); err != nil {
			return &ValidationError{Name: "extra_time", err: fmt.Errorf(`ent: validator failed for field "Contest.extra_time": %w`, err)}
		}
	}
	return nil
}

func (cu *ContestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(contest.Table, contest.Columns, sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Title(); ok {
		_spec.SetField(contest.FieldTitle, field.TypeString, value)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(contest.FieldDescription, field.TypeString, value)
	}
	if value, ok := cu.mutation.State(); ok {
		_spec.SetField(contest.FieldState, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedState(); ok {
		_spec.AddField(contest.FieldState, field.TypeInt, value)
	}
	if value, ok := cu.mutation.GetType(); ok {
		_spec.SetField(contest.FieldType, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedType(); ok {
		_spec.AddField(contest.FieldType, field.TypeInt, value)
	}
	if value, ok := cu.mutation.StartTime(); ok {
		_spec.SetField(contest.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := cu.mutation.EndTime(); ok {
		_spec.SetField(contest.FieldEndTime, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Language(); ok {
		_spec.SetField(contest.FieldLanguage, field.TypeString, value)
	}
	if value, ok := cu.mutation.ExtraTime(); ok {
		_spec.SetField(contest.FieldExtraTime, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedExtraTime(); ok {
		_spec.AddField(contest.FieldExtraTime, field.TypeInt, value)
	}
	if value, ok := cu.mutation.CreateTime(); ok {
		_spec.SetField(contest.FieldCreateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ContestUpdateOne is the builder for updating a single Contest entity.
type ContestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ContestMutation
}

// SetTitle sets the "title" field.
func (cuo *ContestUpdateOne) SetTitle(s string) *ContestUpdateOne {
	cuo.mutation.SetTitle(s)
	return cuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cuo *ContestUpdateOne) SetNillableTitle(s *string) *ContestUpdateOne {
	if s != nil {
		cuo.SetTitle(*s)
	}
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *ContestUpdateOne) SetDescription(s string) *ContestUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *ContestUpdateOne) SetNillableDescription(s *string) *ContestUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// SetState sets the "state" field.
func (cuo *ContestUpdateOne) SetState(i int) *ContestUpdateOne {
	cuo.mutation.ResetState()
	cuo.mutation.SetState(i)
	return cuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (cuo *ContestUpdateOne) SetNillableState(i *int) *ContestUpdateOne {
	if i != nil {
		cuo.SetState(*i)
	}
	return cuo
}

// AddState adds i to the "state" field.
func (cuo *ContestUpdateOne) AddState(i int) *ContestUpdateOne {
	cuo.mutation.AddState(i)
	return cuo
}

// SetType sets the "type" field.
func (cuo *ContestUpdateOne) SetType(i int) *ContestUpdateOne {
	cuo.mutation.ResetType()
	cuo.mutation.SetType(i)
	return cuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cuo *ContestUpdateOne) SetNillableType(i *int) *ContestUpdateOne {
	if i != nil {
		cuo.SetType(*i)
	}
	return cuo
}

// AddType adds i to the "type" field.
func (cuo *ContestUpdateOne) AddType(i int) *ContestUpdateOne {
	cuo.mutation.AddType(i)
	return cuo
}

// SetStartTime sets the "start_time" field.
func (cuo *ContestUpdateOne) SetStartTime(t time.Time) *ContestUpdateOne {
	cuo.mutation.SetStartTime(t)
	return cuo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (cuo *ContestUpdateOne) SetNillableStartTime(t *time.Time) *ContestUpdateOne {
	if t != nil {
		cuo.SetStartTime(*t)
	}
	return cuo
}

// SetEndTime sets the "end_time" field.
func (cuo *ContestUpdateOne) SetEndTime(t time.Time) *ContestUpdateOne {
	cuo.mutation.SetEndTime(t)
	return cuo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (cuo *ContestUpdateOne) SetNillableEndTime(t *time.Time) *ContestUpdateOne {
	if t != nil {
		cuo.SetEndTime(*t)
	}
	return cuo
}

// SetLanguage sets the "language" field.
func (cuo *ContestUpdateOne) SetLanguage(s string) *ContestUpdateOne {
	cuo.mutation.SetLanguage(s)
	return cuo
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (cuo *ContestUpdateOne) SetNillableLanguage(s *string) *ContestUpdateOne {
	if s != nil {
		cuo.SetLanguage(*s)
	}
	return cuo
}

// SetExtraTime sets the "extra_time" field.
func (cuo *ContestUpdateOne) SetExtraTime(i int) *ContestUpdateOne {
	cuo.mutation.ResetExtraTime()
	cuo.mutation.SetExtraTime(i)
	return cuo
}

// SetNillableExtraTime sets the "extra_time" field if the given value is not nil.
func (cuo *ContestUpdateOne) SetNillableExtraTime(i *int) *ContestUpdateOne {
	if i != nil {
		cuo.SetExtraTime(*i)
	}
	return cuo
}

// AddExtraTime adds i to the "extra_time" field.
func (cuo *ContestUpdateOne) AddExtraTime(i int) *ContestUpdateOne {
	cuo.mutation.AddExtraTime(i)
	return cuo
}

// SetCreateTime sets the "create_time" field.
func (cuo *ContestUpdateOne) SetCreateTime(t time.Time) *ContestUpdateOne {
	cuo.mutation.SetCreateTime(t)
	return cuo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cuo *ContestUpdateOne) SetNillableCreateTime(t *time.Time) *ContestUpdateOne {
	if t != nil {
		cuo.SetCreateTime(*t)
	}
	return cuo
}

// Mutation returns the ContestMutation object of the builder.
func (cuo *ContestUpdateOne) Mutation() *ContestMutation {
	return cuo.mutation
}

// Where appends a list predicates to the ContestUpdate builder.
func (cuo *ContestUpdateOne) Where(ps ...predicate.Contest) *ContestUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ContestUpdateOne) Select(field string, fields ...string) *ContestUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Contest entity.
func (cuo *ContestUpdateOne) Save(ctx context.Context) (*Contest, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ContestUpdateOne) SaveX(ctx context.Context) *Contest {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ContestUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ContestUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ContestUpdateOne) check() error {
	if v, ok := cuo.mutation.State(); ok {
		if err := contest.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Contest.state": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.GetType(); ok {
		if err := contest.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Contest.type": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.ExtraTime(); ok {
		if err := contest.ExtraTimeValidator(v); err != nil {
			return &ValidationError{Name: "extra_time", err: fmt.Errorf(`ent: validator failed for field "Contest.extra_time": %w`, err)}
		}
	}
	return nil
}

func (cuo *ContestUpdateOne) sqlSave(ctx context.Context) (_node *Contest, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(contest.Table, contest.Columns, sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Contest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contest.FieldID)
		for _, f := range fields {
			if !contest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != contest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Title(); ok {
		_spec.SetField(contest.FieldTitle, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(contest.FieldDescription, field.TypeString, value)
	}
	if value, ok := cuo.mutation.State(); ok {
		_spec.SetField(contest.FieldState, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedState(); ok {
		_spec.AddField(contest.FieldState, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.GetType(); ok {
		_spec.SetField(contest.FieldType, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedType(); ok {
		_spec.AddField(contest.FieldType, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.StartTime(); ok {
		_spec.SetField(contest.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.EndTime(); ok {
		_spec.SetField(contest.FieldEndTime, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Language(); ok {
		_spec.SetField(contest.FieldLanguage, field.TypeString, value)
	}
	if value, ok := cuo.mutation.ExtraTime(); ok {
		_spec.SetField(contest.FieldExtraTime, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedExtraTime(); ok {
		_spec.AddField(contest.FieldExtraTime, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.CreateTime(); ok {
		_spec.SetField(contest.FieldCreateTime, field.TypeTime, value)
	}
	_node = &Contest{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
