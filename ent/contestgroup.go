// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"sastoj/ent/contest"
	"sastoj/ent/contestgroup"
	"sastoj/ent/group"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ContestGroup is the model entity for the ContestGroup schema.
type ContestGroup struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ContestID holds the value of the "contest_id" field.
	ContestID int `json:"contest_id,omitempty"`
	// GroupID holds the value of the "group_id" field.
	GroupID int `json:"group_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ContestGroupQuery when eager-loading is set.
	Edges                 ContestGroupEdges `json:"edges"`
	contest_group_contest *int
	contest_group_group   *int
	selectValues          sql.SelectValues
}

// ContestGroupEdges holds the relations/edges for other nodes in the graph.
type ContestGroupEdges struct {
	// Contest holds the value of the contest edge.
	Contest *Contest `json:"contest,omitempty"`
	// Group holds the value of the group edge.
	Group *Group `json:"group,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ContestOrErr returns the Contest value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContestGroupEdges) ContestOrErr() (*Contest, error) {
	if e.loadedTypes[0] {
		if e.Contest == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: contest.Label}
		}
		return e.Contest, nil
	}
	return nil, &NotLoadedError{edge: "contest"}
}

// GroupOrErr returns the Group value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContestGroupEdges) GroupOrErr() (*Group, error) {
	if e.loadedTypes[1] {
		if e.Group == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: group.Label}
		}
		return e.Group, nil
	}
	return nil, &NotLoadedError{edge: "group"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ContestGroup) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case contestgroup.FieldID, contestgroup.FieldContestID, contestgroup.FieldGroupID:
			values[i] = new(sql.NullInt64)
		case contestgroup.ForeignKeys[0]: // contest_group_contest
			values[i] = new(sql.NullInt64)
		case contestgroup.ForeignKeys[1]: // contest_group_group
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ContestGroup fields.
func (cg *ContestGroup) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case contestgroup.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cg.ID = int(value.Int64)
		case contestgroup.FieldContestID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field contest_id", values[i])
			} else if value.Valid {
				cg.ContestID = int(value.Int64)
			}
		case contestgroup.FieldGroupID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field group_id", values[i])
			} else if value.Valid {
				cg.GroupID = int(value.Int64)
			}
		case contestgroup.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field contest_group_contest", value)
			} else if value.Valid {
				cg.contest_group_contest = new(int)
				*cg.contest_group_contest = int(value.Int64)
			}
		case contestgroup.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field contest_group_group", value)
			} else if value.Valid {
				cg.contest_group_group = new(int)
				*cg.contest_group_group = int(value.Int64)
			}
		default:
			cg.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ContestGroup.
// This includes values selected through modifiers, order, etc.
func (cg *ContestGroup) Value(name string) (ent.Value, error) {
	return cg.selectValues.Get(name)
}

// QueryContest queries the "contest" edge of the ContestGroup entity.
func (cg *ContestGroup) QueryContest() *ContestQuery {
	return NewContestGroupClient(cg.config).QueryContest(cg)
}

// QueryGroup queries the "group" edge of the ContestGroup entity.
func (cg *ContestGroup) QueryGroup() *GroupQuery {
	return NewContestGroupClient(cg.config).QueryGroup(cg)
}

// Update returns a builder for updating this ContestGroup.
// Note that you need to call ContestGroup.Unwrap() before calling this method if this ContestGroup
// was returned from a transaction, and the transaction was committed or rolled back.
func (cg *ContestGroup) Update() *ContestGroupUpdateOne {
	return NewContestGroupClient(cg.config).UpdateOne(cg)
}

// Unwrap unwraps the ContestGroup entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cg *ContestGroup) Unwrap() *ContestGroup {
	_tx, ok := cg.config.driver.(*txDriver)
	if !ok {
		panic("ent: ContestGroup is not a transactional entity")
	}
	cg.config.driver = _tx.drv
	return cg
}

// String implements the fmt.Stringer.
func (cg *ContestGroup) String() string {
	var builder strings.Builder
	builder.WriteString("ContestGroup(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cg.ID))
	builder.WriteString("contest_id=")
	builder.WriteString(fmt.Sprintf("%v", cg.ContestID))
	builder.WriteString(", ")
	builder.WriteString("group_id=")
	builder.WriteString(fmt.Sprintf("%v", cg.GroupID))
	builder.WriteByte(')')
	return builder.String()
}

// ContestGroups is a parsable slice of ContestGroup.
type ContestGroups []*ContestGroup
