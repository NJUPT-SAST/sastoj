// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sastoj/ent/contest"
	"sastoj/ent/contestgroup"
	"sastoj/ent/group"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ContestGroupCreate is the builder for creating a ContestGroup entity.
type ContestGroupCreate struct {
	config
	mutation *ContestGroupMutation
	hooks    []Hook
}

// SetContestID sets the "contest_id" field.
func (cgc *ContestGroupCreate) SetContestID(i int) *ContestGroupCreate {
	cgc.mutation.SetContestID(i)
	return cgc
}

// SetGroupID sets the "group_id" field.
func (cgc *ContestGroupCreate) SetGroupID(i int) *ContestGroupCreate {
	cgc.mutation.SetGroupID(i)
	return cgc
}

// SetID sets the "id" field.
func (cgc *ContestGroupCreate) SetID(i int) *ContestGroupCreate {
	cgc.mutation.SetID(i)
	return cgc
}

// SetContestID sets the "contest" edge to the Contest entity by ID.
func (cgc *ContestGroupCreate) SetContestID(id int) *ContestGroupCreate {
	cgc.mutation.SetContestID(id)
	return cgc
}

// SetNillableContestID sets the "contest" edge to the Contest entity by ID if the given value is not nil.
func (cgc *ContestGroupCreate) SetNillableContestID(id *int) *ContestGroupCreate {
	if id != nil {
		cgc = cgc.SetContestID(*id)
	}
	return cgc
}

// SetContest sets the "contest" edge to the Contest entity.
func (cgc *ContestGroupCreate) SetContest(c *Contest) *ContestGroupCreate {
	return cgc.SetContestID(c.ID)
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (cgc *ContestGroupCreate) SetGroupID(id int) *ContestGroupCreate {
	cgc.mutation.SetGroupID(id)
	return cgc
}

// SetNillableGroupID sets the "group" edge to the Group entity by ID if the given value is not nil.
func (cgc *ContestGroupCreate) SetNillableGroupID(id *int) *ContestGroupCreate {
	if id != nil {
		cgc = cgc.SetGroupID(*id)
	}
	return cgc
}

// SetGroup sets the "group" edge to the Group entity.
func (cgc *ContestGroupCreate) SetGroup(g *Group) *ContestGroupCreate {
	return cgc.SetGroupID(g.ID)
}

// Mutation returns the ContestGroupMutation object of the builder.
func (cgc *ContestGroupCreate) Mutation() *ContestGroupMutation {
	return cgc.mutation
}

// Save creates the ContestGroup in the database.
func (cgc *ContestGroupCreate) Save(ctx context.Context) (*ContestGroup, error) {
	return withHooks(ctx, cgc.sqlSave, cgc.mutation, cgc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cgc *ContestGroupCreate) SaveX(ctx context.Context) *ContestGroup {
	v, err := cgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cgc *ContestGroupCreate) Exec(ctx context.Context) error {
	_, err := cgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cgc *ContestGroupCreate) ExecX(ctx context.Context) {
	if err := cgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cgc *ContestGroupCreate) check() error {
	if _, ok := cgc.mutation.ContestID(); !ok {
		return &ValidationError{Name: "contest_id", err: errors.New(`ent: missing required field "ContestGroup.contest_id"`)}
	}
	if _, ok := cgc.mutation.GroupID(); !ok {
		return &ValidationError{Name: "group_id", err: errors.New(`ent: missing required field "ContestGroup.group_id"`)}
	}
	return nil
}

func (cgc *ContestGroupCreate) sqlSave(ctx context.Context) (*ContestGroup, error) {
	if err := cgc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	cgc.mutation.id = &_node.ID
	cgc.mutation.done = true
	return _node, nil
}

func (cgc *ContestGroupCreate) createSpec() (*ContestGroup, *sqlgraph.CreateSpec) {
	var (
		_node = &ContestGroup{config: cgc.config}
		_spec = sqlgraph.NewCreateSpec(contestgroup.Table, sqlgraph.NewFieldSpec(contestgroup.FieldID, field.TypeInt))
	)
	if id, ok := cgc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cgc.mutation.ContestID(); ok {
		_spec.SetField(contestgroup.FieldContestID, field.TypeInt, value)
		_node.ContestID = value
	}
	if value, ok := cgc.mutation.GroupID(); ok {
		_spec.SetField(contestgroup.FieldGroupID, field.TypeInt, value)
		_node.GroupID = value
	}
	if nodes := cgc.mutation.ContestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contestgroup.ContestTable,
			Columns: []string{contestgroup.ContestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.contest_group_contest = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cgc.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contestgroup.GroupTable,
			Columns: []string{contestgroup.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.contest_group_group = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ContestGroupCreateBulk is the builder for creating many ContestGroup entities in bulk.
type ContestGroupCreateBulk struct {
	config
	err      error
	builders []*ContestGroupCreate
}

// Save creates the ContestGroup entities in the database.
func (cgcb *ContestGroupCreateBulk) Save(ctx context.Context) ([]*ContestGroup, error) {
	if cgcb.err != nil {
		return nil, cgcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cgcb.builders))
	nodes := make([]*ContestGroup, len(cgcb.builders))
	mutators := make([]Mutator, len(cgcb.builders))
	for i := range cgcb.builders {
		func(i int, root context.Context) {
			builder := cgcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ContestGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cgcb *ContestGroupCreateBulk) SaveX(ctx context.Context) []*ContestGroup {
	v, err := cgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cgcb *ContestGroupCreateBulk) Exec(ctx context.Context) error {
	_, err := cgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cgcb *ContestGroupCreateBulk) ExecX(ctx context.Context) {
	if err := cgcb.Exec(ctx); err != nil {
		panic(err)
	}
}
