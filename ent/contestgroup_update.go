// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sastoj/ent/contest"
	"sastoj/ent/contestgroup"
	"sastoj/ent/group"
	"sastoj/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ContestGroupUpdate is the builder for updating ContestGroup entities.
type ContestGroupUpdate struct {
	config
	hooks    []Hook
	mutation *ContestGroupMutation
}

// Where appends a list predicates to the ContestGroupUpdate builder.
func (cgu *ContestGroupUpdate) Where(ps ...predicate.ContestGroup) *ContestGroupUpdate {
	cgu.mutation.Where(ps...)
	return cgu
}

// SetContestID sets the "contest_id" field.
func (cgu *ContestGroupUpdate) SetContestID(i int) *ContestGroupUpdate {
	cgu.mutation.ResetContestID()
	cgu.mutation.SetContestID(i)
	return cgu
}

// SetNillableContestID sets the "contest_id" field if the given value is not nil.
func (cgu *ContestGroupUpdate) SetNillableContestID(i *int) *ContestGroupUpdate {
	if i != nil {
		cgu.SetContestID(*i)
	}
	return cgu
}

// AddContestID adds i to the "contest_id" field.
func (cgu *ContestGroupUpdate) AddContestID(i int) *ContestGroupUpdate {
	cgu.mutation.AddContestID(i)
	return cgu
}

// SetGroupID sets the "group_id" field.
func (cgu *ContestGroupUpdate) SetGroupID(i int) *ContestGroupUpdate {
	cgu.mutation.ResetGroupID()
	cgu.mutation.SetGroupID(i)
	return cgu
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (cgu *ContestGroupUpdate) SetNillableGroupID(i *int) *ContestGroupUpdate {
	if i != nil {
		cgu.SetGroupID(*i)
	}
	return cgu
}

// AddGroupID adds i to the "group_id" field.
func (cgu *ContestGroupUpdate) AddGroupID(i int) *ContestGroupUpdate {
	cgu.mutation.AddGroupID(i)
	return cgu
}

// SetContestID sets the "contest" edge to the Contest entity by ID.
func (cgu *ContestGroupUpdate) SetContestID(id int) *ContestGroupUpdate {
	cgu.mutation.SetContestID(id)
	return cgu
}

// SetNillableContestID sets the "contest" edge to the Contest entity by ID if the given value is not nil.
func (cgu *ContestGroupUpdate) SetNillableContestID(id *int) *ContestGroupUpdate {
	if id != nil {
		cgu = cgu.SetContestID(*id)
	}
	return cgu
}

// SetContest sets the "contest" edge to the Contest entity.
func (cgu *ContestGroupUpdate) SetContest(c *Contest) *ContestGroupUpdate {
	return cgu.SetContestID(c.ID)
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (cgu *ContestGroupUpdate) SetGroupID(id int) *ContestGroupUpdate {
	cgu.mutation.SetGroupID(id)
	return cgu
}

// SetNillableGroupID sets the "group" edge to the Group entity by ID if the given value is not nil.
func (cgu *ContestGroupUpdate) SetNillableGroupID(id *int) *ContestGroupUpdate {
	if id != nil {
		cgu = cgu.SetGroupID(*id)
	}
	return cgu
}

// SetGroup sets the "group" edge to the Group entity.
func (cgu *ContestGroupUpdate) SetGroup(g *Group) *ContestGroupUpdate {
	return cgu.SetGroupID(g.ID)
}

// Mutation returns the ContestGroupMutation object of the builder.
func (cgu *ContestGroupUpdate) Mutation() *ContestGroupMutation {
	return cgu.mutation
}

// ClearContest clears the "contest" edge to the Contest entity.
func (cgu *ContestGroupUpdate) ClearContest() *ContestGroupUpdate {
	cgu.mutation.ClearContest()
	return cgu
}

// ClearGroup clears the "group" edge to the Group entity.
func (cgu *ContestGroupUpdate) ClearGroup() *ContestGroupUpdate {
	cgu.mutation.ClearGroup()
	return cgu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cgu *ContestGroupUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cgu.sqlSave, cgu.mutation, cgu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cgu *ContestGroupUpdate) SaveX(ctx context.Context) int {
	affected, err := cgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cgu *ContestGroupUpdate) Exec(ctx context.Context) error {
	_, err := cgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cgu *ContestGroupUpdate) ExecX(ctx context.Context) {
	if err := cgu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cgu *ContestGroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(contestgroup.Table, contestgroup.Columns, sqlgraph.NewFieldSpec(contestgroup.FieldID, field.TypeInt))
	if ps := cgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cgu.mutation.ContestID(); ok {
		_spec.SetField(contestgroup.FieldContestID, field.TypeInt, value)
	}
	if value, ok := cgu.mutation.AddedContestID(); ok {
		_spec.AddField(contestgroup.FieldContestID, field.TypeInt, value)
	}
	if value, ok := cgu.mutation.GroupID(); ok {
		_spec.SetField(contestgroup.FieldGroupID, field.TypeInt, value)
	}
	if value, ok := cgu.mutation.AddedGroupID(); ok {
		_spec.AddField(contestgroup.FieldGroupID, field.TypeInt, value)
	}
	if cgu.mutation.ContestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contestgroup.ContestTable,
			Columns: []string{contestgroup.ContestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cgu.mutation.ContestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contestgroup.ContestTable,
			Columns: []string{contestgroup.ContestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cgu.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contestgroup.GroupTable,
			Columns: []string{contestgroup.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cgu.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contestgroup.GroupTable,
			Columns: []string{contestgroup.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contestgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cgu.mutation.done = true
	return n, nil
}

// ContestGroupUpdateOne is the builder for updating a single ContestGroup entity.
type ContestGroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ContestGroupMutation
}

// SetContestID sets the "contest_id" field.
func (cguo *ContestGroupUpdateOne) SetContestID(i int) *ContestGroupUpdateOne {
	cguo.mutation.ResetContestID()
	cguo.mutation.SetContestID(i)
	return cguo
}

// SetNillableContestID sets the "contest_id" field if the given value is not nil.
func (cguo *ContestGroupUpdateOne) SetNillableContestID(i *int) *ContestGroupUpdateOne {
	if i != nil {
		cguo.SetContestID(*i)
	}
	return cguo
}

// AddContestID adds i to the "contest_id" field.
func (cguo *ContestGroupUpdateOne) AddContestID(i int) *ContestGroupUpdateOne {
	cguo.mutation.AddContestID(i)
	return cguo
}

// SetGroupID sets the "group_id" field.
func (cguo *ContestGroupUpdateOne) SetGroupID(i int) *ContestGroupUpdateOne {
	cguo.mutation.ResetGroupID()
	cguo.mutation.SetGroupID(i)
	return cguo
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (cguo *ContestGroupUpdateOne) SetNillableGroupID(i *int) *ContestGroupUpdateOne {
	if i != nil {
		cguo.SetGroupID(*i)
	}
	return cguo
}

// AddGroupID adds i to the "group_id" field.
func (cguo *ContestGroupUpdateOne) AddGroupID(i int) *ContestGroupUpdateOne {
	cguo.mutation.AddGroupID(i)
	return cguo
}

// SetContestID sets the "contest" edge to the Contest entity by ID.
func (cguo *ContestGroupUpdateOne) SetContestID(id int) *ContestGroupUpdateOne {
	cguo.mutation.SetContestID(id)
	return cguo
}

// SetNillableContestID sets the "contest" edge to the Contest entity by ID if the given value is not nil.
func (cguo *ContestGroupUpdateOne) SetNillableContestID(id *int) *ContestGroupUpdateOne {
	if id != nil {
		cguo = cguo.SetContestID(*id)
	}
	return cguo
}

// SetContest sets the "contest" edge to the Contest entity.
func (cguo *ContestGroupUpdateOne) SetContest(c *Contest) *ContestGroupUpdateOne {
	return cguo.SetContestID(c.ID)
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (cguo *ContestGroupUpdateOne) SetGroupID(id int) *ContestGroupUpdateOne {
	cguo.mutation.SetGroupID(id)
	return cguo
}

// SetNillableGroupID sets the "group" edge to the Group entity by ID if the given value is not nil.
func (cguo *ContestGroupUpdateOne) SetNillableGroupID(id *int) *ContestGroupUpdateOne {
	if id != nil {
		cguo = cguo.SetGroupID(*id)
	}
	return cguo
}

// SetGroup sets the "group" edge to the Group entity.
func (cguo *ContestGroupUpdateOne) SetGroup(g *Group) *ContestGroupUpdateOne {
	return cguo.SetGroupID(g.ID)
}

// Mutation returns the ContestGroupMutation object of the builder.
func (cguo *ContestGroupUpdateOne) Mutation() *ContestGroupMutation {
	return cguo.mutation
}

// ClearContest clears the "contest" edge to the Contest entity.
func (cguo *ContestGroupUpdateOne) ClearContest() *ContestGroupUpdateOne {
	cguo.mutation.ClearContest()
	return cguo
}

// ClearGroup clears the "group" edge to the Group entity.
func (cguo *ContestGroupUpdateOne) ClearGroup() *ContestGroupUpdateOne {
	cguo.mutation.ClearGroup()
	return cguo
}

// Where appends a list predicates to the ContestGroupUpdate builder.
func (cguo *ContestGroupUpdateOne) Where(ps ...predicate.ContestGroup) *ContestGroupUpdateOne {
	cguo.mutation.Where(ps...)
	return cguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cguo *ContestGroupUpdateOne) Select(field string, fields ...string) *ContestGroupUpdateOne {
	cguo.fields = append([]string{field}, fields...)
	return cguo
}

// Save executes the query and returns the updated ContestGroup entity.
func (cguo *ContestGroupUpdateOne) Save(ctx context.Context) (*ContestGroup, error) {
	return withHooks(ctx, cguo.sqlSave, cguo.mutation, cguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cguo *ContestGroupUpdateOne) SaveX(ctx context.Context) *ContestGroup {
	node, err := cguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cguo *ContestGroupUpdateOne) Exec(ctx context.Context) error {
	_, err := cguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cguo *ContestGroupUpdateOne) ExecX(ctx context.Context) {
	if err := cguo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cguo *ContestGroupUpdateOne) sqlSave(ctx context.Context) (_node *ContestGroup, err error) {
	_spec := sqlgraph.NewUpdateSpec(contestgroup.Table, contestgroup.Columns, sqlgraph.NewFieldSpec(contestgroup.FieldID, field.TypeInt))
	id, ok := cguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ContestGroup.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contestgroup.FieldID)
		for _, f := range fields {
			if !contestgroup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != contestgroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cguo.mutation.ContestID(); ok {
		_spec.SetField(contestgroup.FieldContestID, field.TypeInt, value)
	}
	if value, ok := cguo.mutation.AddedContestID(); ok {
		_spec.AddField(contestgroup.FieldContestID, field.TypeInt, value)
	}
	if value, ok := cguo.mutation.GroupID(); ok {
		_spec.SetField(contestgroup.FieldGroupID, field.TypeInt, value)
	}
	if value, ok := cguo.mutation.AddedGroupID(); ok {
		_spec.AddField(contestgroup.FieldGroupID, field.TypeInt, value)
	}
	if cguo.mutation.ContestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contestgroup.ContestTable,
			Columns: []string{contestgroup.ContestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cguo.mutation.ContestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contestgroup.ContestTable,
			Columns: []string{contestgroup.ContestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cguo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contestgroup.GroupTable,
			Columns: []string{contestgroup.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cguo.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contestgroup.GroupTable,
			Columns: []string{contestgroup.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ContestGroup{config: cguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contestgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cguo.mutation.done = true
	return _node, nil
}
