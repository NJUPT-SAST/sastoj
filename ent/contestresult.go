// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"sastoj/ent/contest"
	"sastoj/ent/contestresult"
	"sastoj/ent/user"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ContestResult is the model entity for the ContestResult schema.
type ContestResult struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Score holds the value of the "score" field.
	Score int32 `json:"score,omitempty"`
	// Rank holds the value of the "rank" field.
	Rank int32 `json:"rank,omitempty"`
	// ScoreTime holds the value of the "score_time" field.
	ScoreTime int32 `json:"score_time,omitempty"`
	// Penalty holds the value of the "penalty" field.
	Penalty int32 `json:"penalty,omitempty"`
	// ContestID holds the value of the "contest_id" field.
	ContestID int64 `json:"contest_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int64 `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ContestResultQuery when eager-loading is set.
	Edges        ContestResultEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ContestResultEdges holds the relations/edges for other nodes in the graph.
type ContestResultEdges struct {
	// Contest holds the value of the contest edge.
	Contest *Contest `json:"contest,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Submissions holds the value of the submissions edge.
	Submissions []*Submission `json:"submissions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ContestOrErr returns the Contest value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContestResultEdges) ContestOrErr() (*Contest, error) {
	if e.Contest != nil {
		return e.Contest, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: contest.Label}
	}
	return nil, &NotLoadedError{edge: "contest"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContestResultEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// SubmissionsOrErr returns the Submissions value or an error if the edge
// was not loaded in eager-loading.
func (e ContestResultEdges) SubmissionsOrErr() ([]*Submission, error) {
	if e.loadedTypes[2] {
		return e.Submissions, nil
	}
	return nil, &NotLoadedError{edge: "submissions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ContestResult) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case contestresult.FieldID, contestresult.FieldScore, contestresult.FieldRank, contestresult.FieldScoreTime, contestresult.FieldPenalty, contestresult.FieldContestID, contestresult.FieldUserID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ContestResult fields.
func (cr *ContestResult) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case contestresult.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cr.ID = int(value.Int64)
		case contestresult.FieldScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field score", values[i])
			} else if value.Valid {
				cr.Score = int32(value.Int64)
			}
		case contestresult.FieldRank:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rank", values[i])
			} else if value.Valid {
				cr.Rank = int32(value.Int64)
			}
		case contestresult.FieldScoreTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field score_time", values[i])
			} else if value.Valid {
				cr.ScoreTime = int32(value.Int64)
			}
		case contestresult.FieldPenalty:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field penalty", values[i])
			} else if value.Valid {
				cr.Penalty = int32(value.Int64)
			}
		case contestresult.FieldContestID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field contest_id", values[i])
			} else if value.Valid {
				cr.ContestID = value.Int64
			}
		case contestresult.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				cr.UserID = value.Int64
			}
		default:
			cr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ContestResult.
// This includes values selected through modifiers, order, etc.
func (cr *ContestResult) Value(name string) (ent.Value, error) {
	return cr.selectValues.Get(name)
}

// QueryContest queries the "contest" edge of the ContestResult entity.
func (cr *ContestResult) QueryContest() *ContestQuery {
	return NewContestResultClient(cr.config).QueryContest(cr)
}

// QueryUser queries the "user" edge of the ContestResult entity.
func (cr *ContestResult) QueryUser() *UserQuery {
	return NewContestResultClient(cr.config).QueryUser(cr)
}

// QuerySubmissions queries the "submissions" edge of the ContestResult entity.
func (cr *ContestResult) QuerySubmissions() *SubmissionQuery {
	return NewContestResultClient(cr.config).QuerySubmissions(cr)
}

// Update returns a builder for updating this ContestResult.
// Note that you need to call ContestResult.Unwrap() before calling this method if this ContestResult
// was returned from a transaction, and the transaction was committed or rolled back.
func (cr *ContestResult) Update() *ContestResultUpdateOne {
	return NewContestResultClient(cr.config).UpdateOne(cr)
}

// Unwrap unwraps the ContestResult entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cr *ContestResult) Unwrap() *ContestResult {
	_tx, ok := cr.config.driver.(*txDriver)
	if !ok {
		panic("ent: ContestResult is not a transactional entity")
	}
	cr.config.driver = _tx.drv
	return cr
}

// String implements the fmt.Stringer.
func (cr *ContestResult) String() string {
	var builder strings.Builder
	builder.WriteString("ContestResult(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cr.ID))
	builder.WriteString("score=")
	builder.WriteString(fmt.Sprintf("%v", cr.Score))
	builder.WriteString(", ")
	builder.WriteString("rank=")
	builder.WriteString(fmt.Sprintf("%v", cr.Rank))
	builder.WriteString(", ")
	builder.WriteString("score_time=")
	builder.WriteString(fmt.Sprintf("%v", cr.ScoreTime))
	builder.WriteString(", ")
	builder.WriteString("penalty=")
	builder.WriteString(fmt.Sprintf("%v", cr.Penalty))
	builder.WriteString(", ")
	builder.WriteString("contest_id=")
	builder.WriteString(fmt.Sprintf("%v", cr.ContestID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", cr.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// ContestResults is a parsable slice of ContestResult.
type ContestResults []*ContestResult
