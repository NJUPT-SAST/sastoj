// Code generated by ent, DO NOT EDIT.

package contestresult

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the contestresult type in the database.
	Label = "contest_result"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldScore holds the string denoting the score field in the database.
	FieldScore = "score"
	// FieldRank holds the string denoting the rank field in the database.
	FieldRank = "rank"
	// FieldScoreTime holds the string denoting the score_time field in the database.
	FieldScoreTime = "score_time"
	// FieldPenalty holds the string denoting the penalty field in the database.
	FieldPenalty = "penalty"
	// FieldContestID holds the string denoting the contest_id field in the database.
	FieldContestID = "contest_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// EdgeContest holds the string denoting the contest edge name in mutations.
	EdgeContest = "contest"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeSubmissions holds the string denoting the submissions edge name in mutations.
	EdgeSubmissions = "submissions"
	// Table holds the table name of the contestresult in the database.
	Table = "contest_results"
	// ContestTable is the table that holds the contest relation/edge.
	ContestTable = "contest_results"
	// ContestInverseTable is the table name for the Contest entity.
	// It exists in this package in order to avoid circular dependency with the "contest" package.
	ContestInverseTable = "contests"
	// ContestColumn is the table column denoting the contest relation/edge.
	ContestColumn = "contest_id"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "contest_results"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// SubmissionsTable is the table that holds the submissions relation/edge. The primary key declared below.
	SubmissionsTable = "submission_contest_results"
	// SubmissionsInverseTable is the table name for the Submission entity.
	// It exists in this package in order to avoid circular dependency with the "submission" package.
	SubmissionsInverseTable = "submissions"
)

// Columns holds all SQL columns for contestresult fields.
var Columns = []string{
	FieldID,
	FieldScore,
	FieldRank,
	FieldScoreTime,
	FieldPenalty,
	FieldContestID,
	FieldUserID,
}

var (
	// SubmissionsPrimaryKey and SubmissionsColumn2 are the table columns denoting the
	// primary key for the submissions relation (M2M).
	SubmissionsPrimaryKey = []string{"submission_id", "contest_result_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the ContestResult queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByScore orders the results by the score field.
func ByScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScore, opts...).ToFunc()
}

// ByRank orders the results by the rank field.
func ByRank(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRank, opts...).ToFunc()
}

// ByScoreTime orders the results by the score_time field.
func ByScoreTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScoreTime, opts...).ToFunc()
}

// ByPenalty orders the results by the penalty field.
func ByPenalty(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPenalty, opts...).ToFunc()
}

// ByContestID orders the results by the contest_id field.
func ByContestID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContestID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByContestField orders the results by contest field.
func ByContestField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContestStep(), sql.OrderByField(field, opts...))
	}
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// BySubmissionsCount orders the results by submissions count.
func BySubmissionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSubmissionsStep(), opts...)
	}
}

// BySubmissions orders the results by submissions terms.
func BySubmissions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubmissionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newContestStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContestInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ContestTable, ContestColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newSubmissionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubmissionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, SubmissionsTable, SubmissionsPrimaryKey...),
	)
}
