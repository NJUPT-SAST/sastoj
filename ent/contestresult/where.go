// Code generated by ent, DO NOT EDIT.

package contestresult

import (
	"sastoj/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldLTE(FieldID, id))
}

// Score applies equality check predicate on the "score" field. It's identical to ScoreEQ.
func Score(v int32) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldEQ(FieldScore, v))
}

// Rank applies equality check predicate on the "rank" field. It's identical to RankEQ.
func Rank(v int32) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldEQ(FieldRank, v))
}

// ScoreTime applies equality check predicate on the "score_time" field. It's identical to ScoreTimeEQ.
func ScoreTime(v int32) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldEQ(FieldScoreTime, v))
}

// Penalty applies equality check predicate on the "penalty" field. It's identical to PenaltyEQ.
func Penalty(v int32) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldEQ(FieldPenalty, v))
}

// ContestID applies equality check predicate on the "contest_id" field. It's identical to ContestIDEQ.
func ContestID(v int64) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldEQ(FieldContestID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int64) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldEQ(FieldUserID, v))
}

// ScoreEQ applies the EQ predicate on the "score" field.
func ScoreEQ(v int32) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldEQ(FieldScore, v))
}

// ScoreNEQ applies the NEQ predicate on the "score" field.
func ScoreNEQ(v int32) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldNEQ(FieldScore, v))
}

// ScoreIn applies the In predicate on the "score" field.
func ScoreIn(vs ...int32) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldIn(FieldScore, vs...))
}

// ScoreNotIn applies the NotIn predicate on the "score" field.
func ScoreNotIn(vs ...int32) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldNotIn(FieldScore, vs...))
}

// ScoreGT applies the GT predicate on the "score" field.
func ScoreGT(v int32) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldGT(FieldScore, v))
}

// ScoreGTE applies the GTE predicate on the "score" field.
func ScoreGTE(v int32) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldGTE(FieldScore, v))
}

// ScoreLT applies the LT predicate on the "score" field.
func ScoreLT(v int32) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldLT(FieldScore, v))
}

// ScoreLTE applies the LTE predicate on the "score" field.
func ScoreLTE(v int32) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldLTE(FieldScore, v))
}

// RankEQ applies the EQ predicate on the "rank" field.
func RankEQ(v int32) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldEQ(FieldRank, v))
}

// RankNEQ applies the NEQ predicate on the "rank" field.
func RankNEQ(v int32) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldNEQ(FieldRank, v))
}

// RankIn applies the In predicate on the "rank" field.
func RankIn(vs ...int32) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldIn(FieldRank, vs...))
}

// RankNotIn applies the NotIn predicate on the "rank" field.
func RankNotIn(vs ...int32) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldNotIn(FieldRank, vs...))
}

// RankGT applies the GT predicate on the "rank" field.
func RankGT(v int32) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldGT(FieldRank, v))
}

// RankGTE applies the GTE predicate on the "rank" field.
func RankGTE(v int32) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldGTE(FieldRank, v))
}

// RankLT applies the LT predicate on the "rank" field.
func RankLT(v int32) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldLT(FieldRank, v))
}

// RankLTE applies the LTE predicate on the "rank" field.
func RankLTE(v int32) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldLTE(FieldRank, v))
}

// ScoreTimeEQ applies the EQ predicate on the "score_time" field.
func ScoreTimeEQ(v int32) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldEQ(FieldScoreTime, v))
}

// ScoreTimeNEQ applies the NEQ predicate on the "score_time" field.
func ScoreTimeNEQ(v int32) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldNEQ(FieldScoreTime, v))
}

// ScoreTimeIn applies the In predicate on the "score_time" field.
func ScoreTimeIn(vs ...int32) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldIn(FieldScoreTime, vs...))
}

// ScoreTimeNotIn applies the NotIn predicate on the "score_time" field.
func ScoreTimeNotIn(vs ...int32) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldNotIn(FieldScoreTime, vs...))
}

// ScoreTimeGT applies the GT predicate on the "score_time" field.
func ScoreTimeGT(v int32) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldGT(FieldScoreTime, v))
}

// ScoreTimeGTE applies the GTE predicate on the "score_time" field.
func ScoreTimeGTE(v int32) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldGTE(FieldScoreTime, v))
}

// ScoreTimeLT applies the LT predicate on the "score_time" field.
func ScoreTimeLT(v int32) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldLT(FieldScoreTime, v))
}

// ScoreTimeLTE applies the LTE predicate on the "score_time" field.
func ScoreTimeLTE(v int32) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldLTE(FieldScoreTime, v))
}

// PenaltyEQ applies the EQ predicate on the "penalty" field.
func PenaltyEQ(v int32) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldEQ(FieldPenalty, v))
}

// PenaltyNEQ applies the NEQ predicate on the "penalty" field.
func PenaltyNEQ(v int32) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldNEQ(FieldPenalty, v))
}

// PenaltyIn applies the In predicate on the "penalty" field.
func PenaltyIn(vs ...int32) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldIn(FieldPenalty, vs...))
}

// PenaltyNotIn applies the NotIn predicate on the "penalty" field.
func PenaltyNotIn(vs ...int32) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldNotIn(FieldPenalty, vs...))
}

// PenaltyGT applies the GT predicate on the "penalty" field.
func PenaltyGT(v int32) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldGT(FieldPenalty, v))
}

// PenaltyGTE applies the GTE predicate on the "penalty" field.
func PenaltyGTE(v int32) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldGTE(FieldPenalty, v))
}

// PenaltyLT applies the LT predicate on the "penalty" field.
func PenaltyLT(v int32) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldLT(FieldPenalty, v))
}

// PenaltyLTE applies the LTE predicate on the "penalty" field.
func PenaltyLTE(v int32) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldLTE(FieldPenalty, v))
}

// ContestIDEQ applies the EQ predicate on the "contest_id" field.
func ContestIDEQ(v int64) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldEQ(FieldContestID, v))
}

// ContestIDNEQ applies the NEQ predicate on the "contest_id" field.
func ContestIDNEQ(v int64) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldNEQ(FieldContestID, v))
}

// ContestIDIn applies the In predicate on the "contest_id" field.
func ContestIDIn(vs ...int64) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldIn(FieldContestID, vs...))
}

// ContestIDNotIn applies the NotIn predicate on the "contest_id" field.
func ContestIDNotIn(vs ...int64) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldNotIn(FieldContestID, vs...))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int64) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int64) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int64) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int64) predicate.ContestResult {
	return predicate.ContestResult(sql.FieldNotIn(FieldUserID, vs...))
}

// HasContest applies the HasEdge predicate on the "contest" edge.
func HasContest() predicate.ContestResult {
	return predicate.ContestResult(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ContestTable, ContestColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContestWith applies the HasEdge predicate on the "contest" edge with a given conditions (other predicates).
func HasContestWith(preds ...predicate.Contest) predicate.ContestResult {
	return predicate.ContestResult(func(s *sql.Selector) {
		step := newContestStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.ContestResult {
	return predicate.ContestResult(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.ContestResult {
	return predicate.ContestResult(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubmissions applies the HasEdge predicate on the "submissions" edge.
func HasSubmissions() predicate.ContestResult {
	return predicate.ContestResult(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, SubmissionsTable, SubmissionsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubmissionsWith applies the HasEdge predicate on the "submissions" edge with a given conditions (other predicates).
func HasSubmissionsWith(preds ...predicate.Submission) predicate.ContestResult {
	return predicate.ContestResult(func(s *sql.Selector) {
		step := newSubmissionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ContestResult) predicate.ContestResult {
	return predicate.ContestResult(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ContestResult) predicate.ContestResult {
	return predicate.ContestResult(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ContestResult) predicate.ContestResult {
	return predicate.ContestResult(sql.NotPredicates(p))
}
