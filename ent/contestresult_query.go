// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"sastoj/ent/contest"
	"sastoj/ent/contestresult"
	"sastoj/ent/predicate"
	"sastoj/ent/submission"
	"sastoj/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ContestResultQuery is the builder for querying ContestResult entities.
type ContestResultQuery struct {
	config
	ctx             *QueryContext
	order           []contestresult.OrderOption
	inters          []Interceptor
	predicates      []predicate.ContestResult
	withContest     *ContestQuery
	withUser        *UserQuery
	withSubmissions *SubmissionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ContestResultQuery builder.
func (crq *ContestResultQuery) Where(ps ...predicate.ContestResult) *ContestResultQuery {
	crq.predicates = append(crq.predicates, ps...)
	return crq
}

// Limit the number of records to be returned by this query.
func (crq *ContestResultQuery) Limit(limit int) *ContestResultQuery {
	crq.ctx.Limit = &limit
	return crq
}

// Offset to start from.
func (crq *ContestResultQuery) Offset(offset int) *ContestResultQuery {
	crq.ctx.Offset = &offset
	return crq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (crq *ContestResultQuery) Unique(unique bool) *ContestResultQuery {
	crq.ctx.Unique = &unique
	return crq
}

// Order specifies how the records should be ordered.
func (crq *ContestResultQuery) Order(o ...contestresult.OrderOption) *ContestResultQuery {
	crq.order = append(crq.order, o...)
	return crq
}

// QueryContest chains the current query on the "contest" edge.
func (crq *ContestResultQuery) QueryContest() *ContestQuery {
	query := (&ContestClient{config: crq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := crq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := crq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(contestresult.Table, contestresult.FieldID, selector),
			sqlgraph.To(contest.Table, contest.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, contestresult.ContestTable, contestresult.ContestColumn),
		)
		fromU = sqlgraph.SetNeighbors(crq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the "user" edge.
func (crq *ContestResultQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: crq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := crq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := crq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(contestresult.Table, contestresult.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, contestresult.UserTable, contestresult.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(crq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubmissions chains the current query on the "submissions" edge.
func (crq *ContestResultQuery) QuerySubmissions() *SubmissionQuery {
	query := (&SubmissionClient{config: crq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := crq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := crq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(contestresult.Table, contestresult.FieldID, selector),
			sqlgraph.To(submission.Table, submission.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, contestresult.SubmissionsTable, contestresult.SubmissionsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(crq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ContestResult entity from the query.
// Returns a *NotFoundError when no ContestResult was found.
func (crq *ContestResultQuery) First(ctx context.Context) (*ContestResult, error) {
	nodes, err := crq.Limit(1).All(setContextOp(ctx, crq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{contestresult.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (crq *ContestResultQuery) FirstX(ctx context.Context) *ContestResult {
	node, err := crq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ContestResult ID from the query.
// Returns a *NotFoundError when no ContestResult ID was found.
func (crq *ContestResultQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = crq.Limit(1).IDs(setContextOp(ctx, crq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{contestresult.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (crq *ContestResultQuery) FirstIDX(ctx context.Context) int {
	id, err := crq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ContestResult entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ContestResult entity is found.
// Returns a *NotFoundError when no ContestResult entities are found.
func (crq *ContestResultQuery) Only(ctx context.Context) (*ContestResult, error) {
	nodes, err := crq.Limit(2).All(setContextOp(ctx, crq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{contestresult.Label}
	default:
		return nil, &NotSingularError{contestresult.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (crq *ContestResultQuery) OnlyX(ctx context.Context) *ContestResult {
	node, err := crq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ContestResult ID in the query.
// Returns a *NotSingularError when more than one ContestResult ID is found.
// Returns a *NotFoundError when no entities are found.
func (crq *ContestResultQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = crq.Limit(2).IDs(setContextOp(ctx, crq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{contestresult.Label}
	default:
		err = &NotSingularError{contestresult.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (crq *ContestResultQuery) OnlyIDX(ctx context.Context) int {
	id, err := crq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ContestResults.
func (crq *ContestResultQuery) All(ctx context.Context) ([]*ContestResult, error) {
	ctx = setContextOp(ctx, crq.ctx, "All")
	if err := crq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ContestResult, *ContestResultQuery]()
	return withInterceptors[[]*ContestResult](ctx, crq, qr, crq.inters)
}

// AllX is like All, but panics if an error occurs.
func (crq *ContestResultQuery) AllX(ctx context.Context) []*ContestResult {
	nodes, err := crq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ContestResult IDs.
func (crq *ContestResultQuery) IDs(ctx context.Context) (ids []int, err error) {
	if crq.ctx.Unique == nil && crq.path != nil {
		crq.Unique(true)
	}
	ctx = setContextOp(ctx, crq.ctx, "IDs")
	if err = crq.Select(contestresult.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (crq *ContestResultQuery) IDsX(ctx context.Context) []int {
	ids, err := crq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (crq *ContestResultQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, crq.ctx, "Count")
	if err := crq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, crq, querierCount[*ContestResultQuery](), crq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (crq *ContestResultQuery) CountX(ctx context.Context) int {
	count, err := crq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (crq *ContestResultQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, crq.ctx, "Exist")
	switch _, err := crq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (crq *ContestResultQuery) ExistX(ctx context.Context) bool {
	exist, err := crq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ContestResultQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (crq *ContestResultQuery) Clone() *ContestResultQuery {
	if crq == nil {
		return nil
	}
	return &ContestResultQuery{
		config:          crq.config,
		ctx:             crq.ctx.Clone(),
		order:           append([]contestresult.OrderOption{}, crq.order...),
		inters:          append([]Interceptor{}, crq.inters...),
		predicates:      append([]predicate.ContestResult{}, crq.predicates...),
		withContest:     crq.withContest.Clone(),
		withUser:        crq.withUser.Clone(),
		withSubmissions: crq.withSubmissions.Clone(),
		// clone intermediate query.
		sql:  crq.sql.Clone(),
		path: crq.path,
	}
}

// WithContest tells the query-builder to eager-load the nodes that are connected to
// the "contest" edge. The optional arguments are used to configure the query builder of the edge.
func (crq *ContestResultQuery) WithContest(opts ...func(*ContestQuery)) *ContestResultQuery {
	query := (&ContestClient{config: crq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	crq.withContest = query
	return crq
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (crq *ContestResultQuery) WithUser(opts ...func(*UserQuery)) *ContestResultQuery {
	query := (&UserClient{config: crq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	crq.withUser = query
	return crq
}

// WithSubmissions tells the query-builder to eager-load the nodes that are connected to
// the "submissions" edge. The optional arguments are used to configure the query builder of the edge.
func (crq *ContestResultQuery) WithSubmissions(opts ...func(*SubmissionQuery)) *ContestResultQuery {
	query := (&SubmissionClient{config: crq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	crq.withSubmissions = query
	return crq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Score int32 `json:"score,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ContestResult.Query().
//		GroupBy(contestresult.FieldScore).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (crq *ContestResultQuery) GroupBy(field string, fields ...string) *ContestResultGroupBy {
	crq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ContestResultGroupBy{build: crq}
	grbuild.flds = &crq.ctx.Fields
	grbuild.label = contestresult.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Score int32 `json:"score,omitempty"`
//	}
//
//	client.ContestResult.Query().
//		Select(contestresult.FieldScore).
//		Scan(ctx, &v)
func (crq *ContestResultQuery) Select(fields ...string) *ContestResultSelect {
	crq.ctx.Fields = append(crq.ctx.Fields, fields...)
	sbuild := &ContestResultSelect{ContestResultQuery: crq}
	sbuild.label = contestresult.Label
	sbuild.flds, sbuild.scan = &crq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ContestResultSelect configured with the given aggregations.
func (crq *ContestResultQuery) Aggregate(fns ...AggregateFunc) *ContestResultSelect {
	return crq.Select().Aggregate(fns...)
}

func (crq *ContestResultQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range crq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, crq); err != nil {
				return err
			}
		}
	}
	for _, f := range crq.ctx.Fields {
		if !contestresult.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if crq.path != nil {
		prev, err := crq.path(ctx)
		if err != nil {
			return err
		}
		crq.sql = prev
	}
	return nil
}

func (crq *ContestResultQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ContestResult, error) {
	var (
		nodes       = []*ContestResult{}
		_spec       = crq.querySpec()
		loadedTypes = [3]bool{
			crq.withContest != nil,
			crq.withUser != nil,
			crq.withSubmissions != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ContestResult).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ContestResult{config: crq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, crq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := crq.withContest; query != nil {
		if err := crq.loadContest(ctx, query, nodes, nil,
			func(n *ContestResult, e *Contest) { n.Edges.Contest = e }); err != nil {
			return nil, err
		}
	}
	if query := crq.withUser; query != nil {
		if err := crq.loadUser(ctx, query, nodes, nil,
			func(n *ContestResult, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := crq.withSubmissions; query != nil {
		if err := crq.loadSubmissions(ctx, query, nodes,
			func(n *ContestResult) { n.Edges.Submissions = []*Submission{} },
			func(n *ContestResult, e *Submission) { n.Edges.Submissions = append(n.Edges.Submissions, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (crq *ContestResultQuery) loadContest(ctx context.Context, query *ContestQuery, nodes []*ContestResult, init func(*ContestResult), assign func(*ContestResult, *Contest)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*ContestResult)
	for i := range nodes {
		fk := nodes[i].ContestID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(contest.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "contest_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (crq *ContestResultQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*ContestResult, init func(*ContestResult), assign func(*ContestResult, *User)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*ContestResult)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (crq *ContestResultQuery) loadSubmissions(ctx context.Context, query *SubmissionQuery, nodes []*ContestResult, init func(*ContestResult), assign func(*ContestResult, *Submission)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*ContestResult)
	nids := make(map[int64]map[*ContestResult]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(contestresult.SubmissionsTable)
		s.Join(joinT).On(s.C(submission.FieldID), joinT.C(contestresult.SubmissionsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(contestresult.SubmissionsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(contestresult.SubmissionsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := values[1].(*sql.NullInt64).Int64
				if nids[inValue] == nil {
					nids[inValue] = map[*ContestResult]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Submission](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "submissions" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (crq *ContestResultQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := crq.querySpec()
	_spec.Node.Columns = crq.ctx.Fields
	if len(crq.ctx.Fields) > 0 {
		_spec.Unique = crq.ctx.Unique != nil && *crq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, crq.driver, _spec)
}

func (crq *ContestResultQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(contestresult.Table, contestresult.Columns, sqlgraph.NewFieldSpec(contestresult.FieldID, field.TypeInt))
	_spec.From = crq.sql
	if unique := crq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if crq.path != nil {
		_spec.Unique = true
	}
	if fields := crq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contestresult.FieldID)
		for i := range fields {
			if fields[i] != contestresult.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if crq.withContest != nil {
			_spec.Node.AddColumnOnce(contestresult.FieldContestID)
		}
		if crq.withUser != nil {
			_spec.Node.AddColumnOnce(contestresult.FieldUserID)
		}
	}
	if ps := crq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := crq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := crq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := crq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (crq *ContestResultQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(crq.driver.Dialect())
	t1 := builder.Table(contestresult.Table)
	columns := crq.ctx.Fields
	if len(columns) == 0 {
		columns = contestresult.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if crq.sql != nil {
		selector = crq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if crq.ctx.Unique != nil && *crq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range crq.predicates {
		p(selector)
	}
	for _, p := range crq.order {
		p(selector)
	}
	if offset := crq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := crq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ContestResultGroupBy is the group-by builder for ContestResult entities.
type ContestResultGroupBy struct {
	selector
	build *ContestResultQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (crgb *ContestResultGroupBy) Aggregate(fns ...AggregateFunc) *ContestResultGroupBy {
	crgb.fns = append(crgb.fns, fns...)
	return crgb
}

// Scan applies the selector query and scans the result into the given value.
func (crgb *ContestResultGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, crgb.build.ctx, "GroupBy")
	if err := crgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ContestResultQuery, *ContestResultGroupBy](ctx, crgb.build, crgb, crgb.build.inters, v)
}

func (crgb *ContestResultGroupBy) sqlScan(ctx context.Context, root *ContestResultQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(crgb.fns))
	for _, fn := range crgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*crgb.flds)+len(crgb.fns))
		for _, f := range *crgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*crgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := crgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ContestResultSelect is the builder for selecting fields of ContestResult entities.
type ContestResultSelect struct {
	*ContestResultQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (crs *ContestResultSelect) Aggregate(fns ...AggregateFunc) *ContestResultSelect {
	crs.fns = append(crs.fns, fns...)
	return crs
}

// Scan applies the selector query and scans the result into the given value.
func (crs *ContestResultSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, crs.ctx, "Select")
	if err := crs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ContestResultQuery, *ContestResultSelect](ctx, crs.ContestResultQuery, crs, crs.inters, v)
}

func (crs *ContestResultSelect) sqlScan(ctx context.Context, root *ContestResultQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(crs.fns))
	for _, fn := range crs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*crs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := crs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
