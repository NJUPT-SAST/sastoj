// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sastoj/ent/contest"
	"sastoj/ent/contestresult"
	"sastoj/ent/predicate"
	"sastoj/ent/submission"
	"sastoj/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ContestResultUpdate is the builder for updating ContestResult entities.
type ContestResultUpdate struct {
	config
	hooks    []Hook
	mutation *ContestResultMutation
}

// Where appends a list predicates to the ContestResultUpdate builder.
func (cru *ContestResultUpdate) Where(ps ...predicate.ContestResult) *ContestResultUpdate {
	cru.mutation.Where(ps...)
	return cru
}

// SetScore sets the "score" field.
func (cru *ContestResultUpdate) SetScore(i int32) *ContestResultUpdate {
	cru.mutation.ResetScore()
	cru.mutation.SetScore(i)
	return cru
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (cru *ContestResultUpdate) SetNillableScore(i *int32) *ContestResultUpdate {
	if i != nil {
		cru.SetScore(*i)
	}
	return cru
}

// AddScore adds i to the "score" field.
func (cru *ContestResultUpdate) AddScore(i int32) *ContestResultUpdate {
	cru.mutation.AddScore(i)
	return cru
}

// SetRank sets the "rank" field.
func (cru *ContestResultUpdate) SetRank(i int32) *ContestResultUpdate {
	cru.mutation.ResetRank()
	cru.mutation.SetRank(i)
	return cru
}

// SetNillableRank sets the "rank" field if the given value is not nil.
func (cru *ContestResultUpdate) SetNillableRank(i *int32) *ContestResultUpdate {
	if i != nil {
		cru.SetRank(*i)
	}
	return cru
}

// AddRank adds i to the "rank" field.
func (cru *ContestResultUpdate) AddRank(i int32) *ContestResultUpdate {
	cru.mutation.AddRank(i)
	return cru
}

// SetScoreTime sets the "score_time" field.
func (cru *ContestResultUpdate) SetScoreTime(i int32) *ContestResultUpdate {
	cru.mutation.ResetScoreTime()
	cru.mutation.SetScoreTime(i)
	return cru
}

// SetNillableScoreTime sets the "score_time" field if the given value is not nil.
func (cru *ContestResultUpdate) SetNillableScoreTime(i *int32) *ContestResultUpdate {
	if i != nil {
		cru.SetScoreTime(*i)
	}
	return cru
}

// AddScoreTime adds i to the "score_time" field.
func (cru *ContestResultUpdate) AddScoreTime(i int32) *ContestResultUpdate {
	cru.mutation.AddScoreTime(i)
	return cru
}

// SetPenalty sets the "penalty" field.
func (cru *ContestResultUpdate) SetPenalty(i int32) *ContestResultUpdate {
	cru.mutation.ResetPenalty()
	cru.mutation.SetPenalty(i)
	return cru
}

// SetNillablePenalty sets the "penalty" field if the given value is not nil.
func (cru *ContestResultUpdate) SetNillablePenalty(i *int32) *ContestResultUpdate {
	if i != nil {
		cru.SetPenalty(*i)
	}
	return cru
}

// AddPenalty adds i to the "penalty" field.
func (cru *ContestResultUpdate) AddPenalty(i int32) *ContestResultUpdate {
	cru.mutation.AddPenalty(i)
	return cru
}

// SetContestID sets the "contest_id" field.
func (cru *ContestResultUpdate) SetContestID(i int64) *ContestResultUpdate {
	cru.mutation.SetContestID(i)
	return cru
}

// SetNillableContestID sets the "contest_id" field if the given value is not nil.
func (cru *ContestResultUpdate) SetNillableContestID(i *int64) *ContestResultUpdate {
	if i != nil {
		cru.SetContestID(*i)
	}
	return cru
}

// SetUserID sets the "user_id" field.
func (cru *ContestResultUpdate) SetUserID(i int64) *ContestResultUpdate {
	cru.mutation.SetUserID(i)
	return cru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cru *ContestResultUpdate) SetNillableUserID(i *int64) *ContestResultUpdate {
	if i != nil {
		cru.SetUserID(*i)
	}
	return cru
}

// SetContest sets the "contest" edge to the Contest entity.
func (cru *ContestResultUpdate) SetContest(c *Contest) *ContestResultUpdate {
	return cru.SetContestID(c.ID)
}

// SetUser sets the "user" edge to the User entity.
func (cru *ContestResultUpdate) SetUser(u *User) *ContestResultUpdate {
	return cru.SetUserID(u.ID)
}

// AddSubmissionIDs adds the "submissions" edge to the Submission entity by IDs.
func (cru *ContestResultUpdate) AddSubmissionIDs(ids ...int64) *ContestResultUpdate {
	cru.mutation.AddSubmissionIDs(ids...)
	return cru
}

// AddSubmissions adds the "submissions" edges to the Submission entity.
func (cru *ContestResultUpdate) AddSubmissions(s ...*Submission) *ContestResultUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cru.AddSubmissionIDs(ids...)
}

// Mutation returns the ContestResultMutation object of the builder.
func (cru *ContestResultUpdate) Mutation() *ContestResultMutation {
	return cru.mutation
}

// ClearContest clears the "contest" edge to the Contest entity.
func (cru *ContestResultUpdate) ClearContest() *ContestResultUpdate {
	cru.mutation.ClearContest()
	return cru
}

// ClearUser clears the "user" edge to the User entity.
func (cru *ContestResultUpdate) ClearUser() *ContestResultUpdate {
	cru.mutation.ClearUser()
	return cru
}

// ClearSubmissions clears all "submissions" edges to the Submission entity.
func (cru *ContestResultUpdate) ClearSubmissions() *ContestResultUpdate {
	cru.mutation.ClearSubmissions()
	return cru
}

// RemoveSubmissionIDs removes the "submissions" edge to Submission entities by IDs.
func (cru *ContestResultUpdate) RemoveSubmissionIDs(ids ...int64) *ContestResultUpdate {
	cru.mutation.RemoveSubmissionIDs(ids...)
	return cru
}

// RemoveSubmissions removes "submissions" edges to Submission entities.
func (cru *ContestResultUpdate) RemoveSubmissions(s ...*Submission) *ContestResultUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cru.RemoveSubmissionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cru *ContestResultUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cru.sqlSave, cru.mutation, cru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cru *ContestResultUpdate) SaveX(ctx context.Context) int {
	affected, err := cru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cru *ContestResultUpdate) Exec(ctx context.Context) error {
	_, err := cru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cru *ContestResultUpdate) ExecX(ctx context.Context) {
	if err := cru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cru *ContestResultUpdate) check() error {
	if _, ok := cru.mutation.ContestID(); cru.mutation.ContestCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ContestResult.contest"`)
	}
	if _, ok := cru.mutation.UserID(); cru.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ContestResult.user"`)
	}
	return nil
}

func (cru *ContestResultUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(contestresult.Table, contestresult.Columns, sqlgraph.NewFieldSpec(contestresult.FieldID, field.TypeInt))
	if ps := cru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cru.mutation.Score(); ok {
		_spec.SetField(contestresult.FieldScore, field.TypeInt32, value)
	}
	if value, ok := cru.mutation.AddedScore(); ok {
		_spec.AddField(contestresult.FieldScore, field.TypeInt32, value)
	}
	if value, ok := cru.mutation.Rank(); ok {
		_spec.SetField(contestresult.FieldRank, field.TypeInt32, value)
	}
	if value, ok := cru.mutation.AddedRank(); ok {
		_spec.AddField(contestresult.FieldRank, field.TypeInt32, value)
	}
	if value, ok := cru.mutation.ScoreTime(); ok {
		_spec.SetField(contestresult.FieldScoreTime, field.TypeInt32, value)
	}
	if value, ok := cru.mutation.AddedScoreTime(); ok {
		_spec.AddField(contestresult.FieldScoreTime, field.TypeInt32, value)
	}
	if value, ok := cru.mutation.Penalty(); ok {
		_spec.SetField(contestresult.FieldPenalty, field.TypeInt32, value)
	}
	if value, ok := cru.mutation.AddedPenalty(); ok {
		_spec.AddField(contestresult.FieldPenalty, field.TypeInt32, value)
	}
	if cru.mutation.ContestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contestresult.ContestTable,
			Columns: []string{contestresult.ContestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.ContestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contestresult.ContestTable,
			Columns: []string{contestresult.ContestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contestresult.UserTable,
			Columns: []string{contestresult.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contestresult.UserTable,
			Columns: []string{contestresult.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cru.mutation.SubmissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contestresult.SubmissionsTable,
			Columns: contestresult.SubmissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submission.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.RemovedSubmissionsIDs(); len(nodes) > 0 && !cru.mutation.SubmissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contestresult.SubmissionsTable,
			Columns: contestresult.SubmissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.SubmissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contestresult.SubmissionsTable,
			Columns: contestresult.SubmissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contestresult.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cru.mutation.done = true
	return n, nil
}

// ContestResultUpdateOne is the builder for updating a single ContestResult entity.
type ContestResultUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ContestResultMutation
}

// SetScore sets the "score" field.
func (cruo *ContestResultUpdateOne) SetScore(i int32) *ContestResultUpdateOne {
	cruo.mutation.ResetScore()
	cruo.mutation.SetScore(i)
	return cruo
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (cruo *ContestResultUpdateOne) SetNillableScore(i *int32) *ContestResultUpdateOne {
	if i != nil {
		cruo.SetScore(*i)
	}
	return cruo
}

// AddScore adds i to the "score" field.
func (cruo *ContestResultUpdateOne) AddScore(i int32) *ContestResultUpdateOne {
	cruo.mutation.AddScore(i)
	return cruo
}

// SetRank sets the "rank" field.
func (cruo *ContestResultUpdateOne) SetRank(i int32) *ContestResultUpdateOne {
	cruo.mutation.ResetRank()
	cruo.mutation.SetRank(i)
	return cruo
}

// SetNillableRank sets the "rank" field if the given value is not nil.
func (cruo *ContestResultUpdateOne) SetNillableRank(i *int32) *ContestResultUpdateOne {
	if i != nil {
		cruo.SetRank(*i)
	}
	return cruo
}

// AddRank adds i to the "rank" field.
func (cruo *ContestResultUpdateOne) AddRank(i int32) *ContestResultUpdateOne {
	cruo.mutation.AddRank(i)
	return cruo
}

// SetScoreTime sets the "score_time" field.
func (cruo *ContestResultUpdateOne) SetScoreTime(i int32) *ContestResultUpdateOne {
	cruo.mutation.ResetScoreTime()
	cruo.mutation.SetScoreTime(i)
	return cruo
}

// SetNillableScoreTime sets the "score_time" field if the given value is not nil.
func (cruo *ContestResultUpdateOne) SetNillableScoreTime(i *int32) *ContestResultUpdateOne {
	if i != nil {
		cruo.SetScoreTime(*i)
	}
	return cruo
}

// AddScoreTime adds i to the "score_time" field.
func (cruo *ContestResultUpdateOne) AddScoreTime(i int32) *ContestResultUpdateOne {
	cruo.mutation.AddScoreTime(i)
	return cruo
}

// SetPenalty sets the "penalty" field.
func (cruo *ContestResultUpdateOne) SetPenalty(i int32) *ContestResultUpdateOne {
	cruo.mutation.ResetPenalty()
	cruo.mutation.SetPenalty(i)
	return cruo
}

// SetNillablePenalty sets the "penalty" field if the given value is not nil.
func (cruo *ContestResultUpdateOne) SetNillablePenalty(i *int32) *ContestResultUpdateOne {
	if i != nil {
		cruo.SetPenalty(*i)
	}
	return cruo
}

// AddPenalty adds i to the "penalty" field.
func (cruo *ContestResultUpdateOne) AddPenalty(i int32) *ContestResultUpdateOne {
	cruo.mutation.AddPenalty(i)
	return cruo
}

// SetContestID sets the "contest_id" field.
func (cruo *ContestResultUpdateOne) SetContestID(i int64) *ContestResultUpdateOne {
	cruo.mutation.SetContestID(i)
	return cruo
}

// SetNillableContestID sets the "contest_id" field if the given value is not nil.
func (cruo *ContestResultUpdateOne) SetNillableContestID(i *int64) *ContestResultUpdateOne {
	if i != nil {
		cruo.SetContestID(*i)
	}
	return cruo
}

// SetUserID sets the "user_id" field.
func (cruo *ContestResultUpdateOne) SetUserID(i int64) *ContestResultUpdateOne {
	cruo.mutation.SetUserID(i)
	return cruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cruo *ContestResultUpdateOne) SetNillableUserID(i *int64) *ContestResultUpdateOne {
	if i != nil {
		cruo.SetUserID(*i)
	}
	return cruo
}

// SetContest sets the "contest" edge to the Contest entity.
func (cruo *ContestResultUpdateOne) SetContest(c *Contest) *ContestResultUpdateOne {
	return cruo.SetContestID(c.ID)
}

// SetUser sets the "user" edge to the User entity.
func (cruo *ContestResultUpdateOne) SetUser(u *User) *ContestResultUpdateOne {
	return cruo.SetUserID(u.ID)
}

// AddSubmissionIDs adds the "submissions" edge to the Submission entity by IDs.
func (cruo *ContestResultUpdateOne) AddSubmissionIDs(ids ...int64) *ContestResultUpdateOne {
	cruo.mutation.AddSubmissionIDs(ids...)
	return cruo
}

// AddSubmissions adds the "submissions" edges to the Submission entity.
func (cruo *ContestResultUpdateOne) AddSubmissions(s ...*Submission) *ContestResultUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cruo.AddSubmissionIDs(ids...)
}

// Mutation returns the ContestResultMutation object of the builder.
func (cruo *ContestResultUpdateOne) Mutation() *ContestResultMutation {
	return cruo.mutation
}

// ClearContest clears the "contest" edge to the Contest entity.
func (cruo *ContestResultUpdateOne) ClearContest() *ContestResultUpdateOne {
	cruo.mutation.ClearContest()
	return cruo
}

// ClearUser clears the "user" edge to the User entity.
func (cruo *ContestResultUpdateOne) ClearUser() *ContestResultUpdateOne {
	cruo.mutation.ClearUser()
	return cruo
}

// ClearSubmissions clears all "submissions" edges to the Submission entity.
func (cruo *ContestResultUpdateOne) ClearSubmissions() *ContestResultUpdateOne {
	cruo.mutation.ClearSubmissions()
	return cruo
}

// RemoveSubmissionIDs removes the "submissions" edge to Submission entities by IDs.
func (cruo *ContestResultUpdateOne) RemoveSubmissionIDs(ids ...int64) *ContestResultUpdateOne {
	cruo.mutation.RemoveSubmissionIDs(ids...)
	return cruo
}

// RemoveSubmissions removes "submissions" edges to Submission entities.
func (cruo *ContestResultUpdateOne) RemoveSubmissions(s ...*Submission) *ContestResultUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cruo.RemoveSubmissionIDs(ids...)
}

// Where appends a list predicates to the ContestResultUpdate builder.
func (cruo *ContestResultUpdateOne) Where(ps ...predicate.ContestResult) *ContestResultUpdateOne {
	cruo.mutation.Where(ps...)
	return cruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cruo *ContestResultUpdateOne) Select(field string, fields ...string) *ContestResultUpdateOne {
	cruo.fields = append([]string{field}, fields...)
	return cruo
}

// Save executes the query and returns the updated ContestResult entity.
func (cruo *ContestResultUpdateOne) Save(ctx context.Context) (*ContestResult, error) {
	return withHooks(ctx, cruo.sqlSave, cruo.mutation, cruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cruo *ContestResultUpdateOne) SaveX(ctx context.Context) *ContestResult {
	node, err := cruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cruo *ContestResultUpdateOne) Exec(ctx context.Context) error {
	_, err := cruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cruo *ContestResultUpdateOne) ExecX(ctx context.Context) {
	if err := cruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cruo *ContestResultUpdateOne) check() error {
	if _, ok := cruo.mutation.ContestID(); cruo.mutation.ContestCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ContestResult.contest"`)
	}
	if _, ok := cruo.mutation.UserID(); cruo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ContestResult.user"`)
	}
	return nil
}

func (cruo *ContestResultUpdateOne) sqlSave(ctx context.Context) (_node *ContestResult, err error) {
	if err := cruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(contestresult.Table, contestresult.Columns, sqlgraph.NewFieldSpec(contestresult.FieldID, field.TypeInt))
	id, ok := cruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ContestResult.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contestresult.FieldID)
		for _, f := range fields {
			if !contestresult.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != contestresult.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cruo.mutation.Score(); ok {
		_spec.SetField(contestresult.FieldScore, field.TypeInt32, value)
	}
	if value, ok := cruo.mutation.AddedScore(); ok {
		_spec.AddField(contestresult.FieldScore, field.TypeInt32, value)
	}
	if value, ok := cruo.mutation.Rank(); ok {
		_spec.SetField(contestresult.FieldRank, field.TypeInt32, value)
	}
	if value, ok := cruo.mutation.AddedRank(); ok {
		_spec.AddField(contestresult.FieldRank, field.TypeInt32, value)
	}
	if value, ok := cruo.mutation.ScoreTime(); ok {
		_spec.SetField(contestresult.FieldScoreTime, field.TypeInt32, value)
	}
	if value, ok := cruo.mutation.AddedScoreTime(); ok {
		_spec.AddField(contestresult.FieldScoreTime, field.TypeInt32, value)
	}
	if value, ok := cruo.mutation.Penalty(); ok {
		_spec.SetField(contestresult.FieldPenalty, field.TypeInt32, value)
	}
	if value, ok := cruo.mutation.AddedPenalty(); ok {
		_spec.AddField(contestresult.FieldPenalty, field.TypeInt32, value)
	}
	if cruo.mutation.ContestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contestresult.ContestTable,
			Columns: []string{contestresult.ContestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.ContestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contestresult.ContestTable,
			Columns: []string{contestresult.ContestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contestresult.UserTable,
			Columns: []string{contestresult.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contestresult.UserTable,
			Columns: []string{contestresult.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cruo.mutation.SubmissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contestresult.SubmissionsTable,
			Columns: contestresult.SubmissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submission.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.RemovedSubmissionsIDs(); len(nodes) > 0 && !cruo.mutation.SubmissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contestresult.SubmissionsTable,
			Columns: contestresult.SubmissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.SubmissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contestresult.SubmissionsTable,
			Columns: contestresult.SubmissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ContestResult{config: cruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contestresult.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cruo.mutation.done = true
	return _node, nil
}
