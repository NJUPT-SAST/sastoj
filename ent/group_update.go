// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sastoj/ent/contest"
	"sastoj/ent/group"
	"sastoj/ent/predicate"
	"sastoj/ent/problem"
	"sastoj/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GroupUpdate is the builder for updating Group entities.
type GroupUpdate struct {
	config
	hooks    []Hook
	mutation *GroupMutation
}

// Where appends a list predicates to the GroupUpdate builder.
func (gu *GroupUpdate) Where(ps ...predicate.Group) *GroupUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetGroupName sets the "group_name" field.
func (gu *GroupUpdate) SetGroupName(s string) *GroupUpdate {
	gu.mutation.SetGroupName(s)
	return gu
}

// SetNillableGroupName sets the "group_name" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableGroupName(s *string) *GroupUpdate {
	if s != nil {
		gu.SetGroupName(*s)
	}
	return gu
}

// SetRootGroupID sets the "root_group_id" field.
func (gu *GroupUpdate) SetRootGroupID(i int) *GroupUpdate {
	gu.mutation.SetRootGroupID(i)
	return gu
}

// SetNillableRootGroupID sets the "root_group_id" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableRootGroupID(i *int) *GroupUpdate {
	if i != nil {
		gu.SetRootGroupID(*i)
	}
	return gu
}

// AddAdminIDs adds the "admins" edge to the Contest entity by IDs.
func (gu *GroupUpdate) AddAdminIDs(ids ...int) *GroupUpdate {
	gu.mutation.AddAdminIDs(ids...)
	return gu
}

// AddAdmins adds the "admins" edges to the Contest entity.
func (gu *GroupUpdate) AddAdmins(c ...*Contest) *GroupUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return gu.AddAdminIDs(ids...)
}

// AddContestantIDs adds the "contestants" edge to the Contest entity by IDs.
func (gu *GroupUpdate) AddContestantIDs(ids ...int) *GroupUpdate {
	gu.mutation.AddContestantIDs(ids...)
	return gu
}

// AddContestants adds the "contestants" edges to the Contest entity.
func (gu *GroupUpdate) AddContestants(c ...*Contest) *GroupUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return gu.AddContestantIDs(ids...)
}

// AddProblemIDs adds the "problems" edge to the Problem entity by IDs.
func (gu *GroupUpdate) AddProblemIDs(ids ...int) *GroupUpdate {
	gu.mutation.AddProblemIDs(ids...)
	return gu
}

// AddProblems adds the "problems" edges to the Problem entity.
func (gu *GroupUpdate) AddProblems(p ...*Problem) *GroupUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gu.AddProblemIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (gu *GroupUpdate) AddUserIDs(ids ...int) *GroupUpdate {
	gu.mutation.AddUserIDs(ids...)
	return gu
}

// AddUsers adds the "users" edges to the User entity.
func (gu *GroupUpdate) AddUsers(u ...*User) *GroupUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gu.AddUserIDs(ids...)
}

// SetRootGroup sets the "root_group" edge to the Group entity.
func (gu *GroupUpdate) SetRootGroup(g *Group) *GroupUpdate {
	return gu.SetRootGroupID(g.ID)
}

// AddSubgroupIDs adds the "subgroups" edge to the Group entity by IDs.
func (gu *GroupUpdate) AddSubgroupIDs(ids ...int) *GroupUpdate {
	gu.mutation.AddSubgroupIDs(ids...)
	return gu
}

// AddSubgroups adds the "subgroups" edges to the Group entity.
func (gu *GroupUpdate) AddSubgroups(g ...*Group) *GroupUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gu.AddSubgroupIDs(ids...)
}

// Mutation returns the GroupMutation object of the builder.
func (gu *GroupUpdate) Mutation() *GroupMutation {
	return gu.mutation
}

// ClearAdmins clears all "admins" edges to the Contest entity.
func (gu *GroupUpdate) ClearAdmins() *GroupUpdate {
	gu.mutation.ClearAdmins()
	return gu
}

// RemoveAdminIDs removes the "admins" edge to Contest entities by IDs.
func (gu *GroupUpdate) RemoveAdminIDs(ids ...int) *GroupUpdate {
	gu.mutation.RemoveAdminIDs(ids...)
	return gu
}

// RemoveAdmins removes "admins" edges to Contest entities.
func (gu *GroupUpdate) RemoveAdmins(c ...*Contest) *GroupUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return gu.RemoveAdminIDs(ids...)
}

// ClearContestants clears all "contestants" edges to the Contest entity.
func (gu *GroupUpdate) ClearContestants() *GroupUpdate {
	gu.mutation.ClearContestants()
	return gu
}

// RemoveContestantIDs removes the "contestants" edge to Contest entities by IDs.
func (gu *GroupUpdate) RemoveContestantIDs(ids ...int) *GroupUpdate {
	gu.mutation.RemoveContestantIDs(ids...)
	return gu
}

// RemoveContestants removes "contestants" edges to Contest entities.
func (gu *GroupUpdate) RemoveContestants(c ...*Contest) *GroupUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return gu.RemoveContestantIDs(ids...)
}

// ClearProblems clears all "problems" edges to the Problem entity.
func (gu *GroupUpdate) ClearProblems() *GroupUpdate {
	gu.mutation.ClearProblems()
	return gu
}

// RemoveProblemIDs removes the "problems" edge to Problem entities by IDs.
func (gu *GroupUpdate) RemoveProblemIDs(ids ...int) *GroupUpdate {
	gu.mutation.RemoveProblemIDs(ids...)
	return gu
}

// RemoveProblems removes "problems" edges to Problem entities.
func (gu *GroupUpdate) RemoveProblems(p ...*Problem) *GroupUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gu.RemoveProblemIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (gu *GroupUpdate) ClearUsers() *GroupUpdate {
	gu.mutation.ClearUsers()
	return gu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (gu *GroupUpdate) RemoveUserIDs(ids ...int) *GroupUpdate {
	gu.mutation.RemoveUserIDs(ids...)
	return gu
}

// RemoveUsers removes "users" edges to User entities.
func (gu *GroupUpdate) RemoveUsers(u ...*User) *GroupUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gu.RemoveUserIDs(ids...)
}

// ClearRootGroup clears the "root_group" edge to the Group entity.
func (gu *GroupUpdate) ClearRootGroup() *GroupUpdate {
	gu.mutation.ClearRootGroup()
	return gu
}

// ClearSubgroups clears all "subgroups" edges to the Group entity.
func (gu *GroupUpdate) ClearSubgroups() *GroupUpdate {
	gu.mutation.ClearSubgroups()
	return gu
}

// RemoveSubgroupIDs removes the "subgroups" edge to Group entities by IDs.
func (gu *GroupUpdate) RemoveSubgroupIDs(ids ...int) *GroupUpdate {
	gu.mutation.RemoveSubgroupIDs(ids...)
	return gu
}

// RemoveSubgroups removes "subgroups" edges to Group entities.
func (gu *GroupUpdate) RemoveSubgroups(g ...*Group) *GroupUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gu.RemoveSubgroupIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GroupUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gu.sqlSave, gu.mutation, gu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GroupUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GroupUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GroupUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gu *GroupUpdate) check() error {
	if _, ok := gu.mutation.RootGroupID(); gu.mutation.RootGroupCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Group.root_group"`)
	}
	return nil
}

func (gu *GroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(group.Table, group.Columns, sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt))
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.GroupName(); ok {
		_spec.SetField(group.FieldGroupName, field.TypeString, value)
	}
	if gu.mutation.AdminsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.AdminsTable,
			Columns: group.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedAdminsIDs(); len(nodes) > 0 && !gu.mutation.AdminsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.AdminsTable,
			Columns: group.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.AdminsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.AdminsTable,
			Columns: group.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.ContestantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.ContestantsTable,
			Columns: group.ContestantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedContestantsIDs(); len(nodes) > 0 && !gu.mutation.ContestantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.ContestantsTable,
			Columns: group.ContestantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.ContestantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.ContestantsTable,
			Columns: group.ContestantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.ProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.ProblemsTable,
			Columns: group.ProblemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedProblemsIDs(); len(nodes) > 0 && !gu.mutation.ProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.ProblemsTable,
			Columns: group.ProblemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.ProblemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.ProblemsTable,
			Columns: group.ProblemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.UsersTable,
			Columns: []string{group.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !gu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.UsersTable,
			Columns: []string{group.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.UsersTable,
			Columns: []string{group.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.RootGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   group.RootGroupTable,
			Columns: []string{group.RootGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RootGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   group.RootGroupTable,
			Columns: []string{group.RootGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.SubgroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.SubgroupsTable,
			Columns: []string{group.SubgroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedSubgroupsIDs(); len(nodes) > 0 && !gu.mutation.SubgroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.SubgroupsTable,
			Columns: []string{group.SubgroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.SubgroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.SubgroupsTable,
			Columns: []string{group.SubgroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{group.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gu.mutation.done = true
	return n, nil
}

// GroupUpdateOne is the builder for updating a single Group entity.
type GroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GroupMutation
}

// SetGroupName sets the "group_name" field.
func (guo *GroupUpdateOne) SetGroupName(s string) *GroupUpdateOne {
	guo.mutation.SetGroupName(s)
	return guo
}

// SetNillableGroupName sets the "group_name" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableGroupName(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetGroupName(*s)
	}
	return guo
}

// SetRootGroupID sets the "root_group_id" field.
func (guo *GroupUpdateOne) SetRootGroupID(i int) *GroupUpdateOne {
	guo.mutation.SetRootGroupID(i)
	return guo
}

// SetNillableRootGroupID sets the "root_group_id" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableRootGroupID(i *int) *GroupUpdateOne {
	if i != nil {
		guo.SetRootGroupID(*i)
	}
	return guo
}

// AddAdminIDs adds the "admins" edge to the Contest entity by IDs.
func (guo *GroupUpdateOne) AddAdminIDs(ids ...int) *GroupUpdateOne {
	guo.mutation.AddAdminIDs(ids...)
	return guo
}

// AddAdmins adds the "admins" edges to the Contest entity.
func (guo *GroupUpdateOne) AddAdmins(c ...*Contest) *GroupUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return guo.AddAdminIDs(ids...)
}

// AddContestantIDs adds the "contestants" edge to the Contest entity by IDs.
func (guo *GroupUpdateOne) AddContestantIDs(ids ...int) *GroupUpdateOne {
	guo.mutation.AddContestantIDs(ids...)
	return guo
}

// AddContestants adds the "contestants" edges to the Contest entity.
func (guo *GroupUpdateOne) AddContestants(c ...*Contest) *GroupUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return guo.AddContestantIDs(ids...)
}

// AddProblemIDs adds the "problems" edge to the Problem entity by IDs.
func (guo *GroupUpdateOne) AddProblemIDs(ids ...int) *GroupUpdateOne {
	guo.mutation.AddProblemIDs(ids...)
	return guo
}

// AddProblems adds the "problems" edges to the Problem entity.
func (guo *GroupUpdateOne) AddProblems(p ...*Problem) *GroupUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return guo.AddProblemIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (guo *GroupUpdateOne) AddUserIDs(ids ...int) *GroupUpdateOne {
	guo.mutation.AddUserIDs(ids...)
	return guo
}

// AddUsers adds the "users" edges to the User entity.
func (guo *GroupUpdateOne) AddUsers(u ...*User) *GroupUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return guo.AddUserIDs(ids...)
}

// SetRootGroup sets the "root_group" edge to the Group entity.
func (guo *GroupUpdateOne) SetRootGroup(g *Group) *GroupUpdateOne {
	return guo.SetRootGroupID(g.ID)
}

// AddSubgroupIDs adds the "subgroups" edge to the Group entity by IDs.
func (guo *GroupUpdateOne) AddSubgroupIDs(ids ...int) *GroupUpdateOne {
	guo.mutation.AddSubgroupIDs(ids...)
	return guo
}

// AddSubgroups adds the "subgroups" edges to the Group entity.
func (guo *GroupUpdateOne) AddSubgroups(g ...*Group) *GroupUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return guo.AddSubgroupIDs(ids...)
}

// Mutation returns the GroupMutation object of the builder.
func (guo *GroupUpdateOne) Mutation() *GroupMutation {
	return guo.mutation
}

// ClearAdmins clears all "admins" edges to the Contest entity.
func (guo *GroupUpdateOne) ClearAdmins() *GroupUpdateOne {
	guo.mutation.ClearAdmins()
	return guo
}

// RemoveAdminIDs removes the "admins" edge to Contest entities by IDs.
func (guo *GroupUpdateOne) RemoveAdminIDs(ids ...int) *GroupUpdateOne {
	guo.mutation.RemoveAdminIDs(ids...)
	return guo
}

// RemoveAdmins removes "admins" edges to Contest entities.
func (guo *GroupUpdateOne) RemoveAdmins(c ...*Contest) *GroupUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return guo.RemoveAdminIDs(ids...)
}

// ClearContestants clears all "contestants" edges to the Contest entity.
func (guo *GroupUpdateOne) ClearContestants() *GroupUpdateOne {
	guo.mutation.ClearContestants()
	return guo
}

// RemoveContestantIDs removes the "contestants" edge to Contest entities by IDs.
func (guo *GroupUpdateOne) RemoveContestantIDs(ids ...int) *GroupUpdateOne {
	guo.mutation.RemoveContestantIDs(ids...)
	return guo
}

// RemoveContestants removes "contestants" edges to Contest entities.
func (guo *GroupUpdateOne) RemoveContestants(c ...*Contest) *GroupUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return guo.RemoveContestantIDs(ids...)
}

// ClearProblems clears all "problems" edges to the Problem entity.
func (guo *GroupUpdateOne) ClearProblems() *GroupUpdateOne {
	guo.mutation.ClearProblems()
	return guo
}

// RemoveProblemIDs removes the "problems" edge to Problem entities by IDs.
func (guo *GroupUpdateOne) RemoveProblemIDs(ids ...int) *GroupUpdateOne {
	guo.mutation.RemoveProblemIDs(ids...)
	return guo
}

// RemoveProblems removes "problems" edges to Problem entities.
func (guo *GroupUpdateOne) RemoveProblems(p ...*Problem) *GroupUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return guo.RemoveProblemIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (guo *GroupUpdateOne) ClearUsers() *GroupUpdateOne {
	guo.mutation.ClearUsers()
	return guo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (guo *GroupUpdateOne) RemoveUserIDs(ids ...int) *GroupUpdateOne {
	guo.mutation.RemoveUserIDs(ids...)
	return guo
}

// RemoveUsers removes "users" edges to User entities.
func (guo *GroupUpdateOne) RemoveUsers(u ...*User) *GroupUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return guo.RemoveUserIDs(ids...)
}

// ClearRootGroup clears the "root_group" edge to the Group entity.
func (guo *GroupUpdateOne) ClearRootGroup() *GroupUpdateOne {
	guo.mutation.ClearRootGroup()
	return guo
}

// ClearSubgroups clears all "subgroups" edges to the Group entity.
func (guo *GroupUpdateOne) ClearSubgroups() *GroupUpdateOne {
	guo.mutation.ClearSubgroups()
	return guo
}

// RemoveSubgroupIDs removes the "subgroups" edge to Group entities by IDs.
func (guo *GroupUpdateOne) RemoveSubgroupIDs(ids ...int) *GroupUpdateOne {
	guo.mutation.RemoveSubgroupIDs(ids...)
	return guo
}

// RemoveSubgroups removes "subgroups" edges to Group entities.
func (guo *GroupUpdateOne) RemoveSubgroups(g ...*Group) *GroupUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return guo.RemoveSubgroupIDs(ids...)
}

// Where appends a list predicates to the GroupUpdate builder.
func (guo *GroupUpdateOne) Where(ps ...predicate.Group) *GroupUpdateOne {
	guo.mutation.Where(ps...)
	return guo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GroupUpdateOne) Select(field string, fields ...string) *GroupUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Group entity.
func (guo *GroupUpdateOne) Save(ctx context.Context) (*Group, error) {
	return withHooks(ctx, guo.sqlSave, guo.mutation, guo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GroupUpdateOne) SaveX(ctx context.Context) *Group {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GroupUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GroupUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (guo *GroupUpdateOne) check() error {
	if _, ok := guo.mutation.RootGroupID(); guo.mutation.RootGroupCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Group.root_group"`)
	}
	return nil
}

func (guo *GroupUpdateOne) sqlSave(ctx context.Context) (_node *Group, err error) {
	if err := guo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(group.Table, group.Columns, sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt))
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Group.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, group.FieldID)
		for _, f := range fields {
			if !group.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != group.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.GroupName(); ok {
		_spec.SetField(group.FieldGroupName, field.TypeString, value)
	}
	if guo.mutation.AdminsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.AdminsTable,
			Columns: group.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedAdminsIDs(); len(nodes) > 0 && !guo.mutation.AdminsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.AdminsTable,
			Columns: group.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.AdminsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.AdminsTable,
			Columns: group.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.ContestantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.ContestantsTable,
			Columns: group.ContestantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedContestantsIDs(); len(nodes) > 0 && !guo.mutation.ContestantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.ContestantsTable,
			Columns: group.ContestantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.ContestantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.ContestantsTable,
			Columns: group.ContestantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.ProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.ProblemsTable,
			Columns: group.ProblemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedProblemsIDs(); len(nodes) > 0 && !guo.mutation.ProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.ProblemsTable,
			Columns: group.ProblemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.ProblemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.ProblemsTable,
			Columns: group.ProblemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.UsersTable,
			Columns: []string{group.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !guo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.UsersTable,
			Columns: []string{group.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.UsersTable,
			Columns: []string{group.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.RootGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   group.RootGroupTable,
			Columns: []string{group.RootGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RootGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   group.RootGroupTable,
			Columns: []string{group.RootGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.SubgroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.SubgroupsTable,
			Columns: []string{group.SubgroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedSubgroupsIDs(); len(nodes) > 0 && !guo.mutation.SubgroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.SubgroupsTable,
			Columns: []string{group.SubgroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.SubgroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.SubgroupsTable,
			Columns: []string{group.SubgroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Group{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{group.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	guo.mutation.done = true
	return _node, nil
}
