// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sastoj/ent/loginsession"
	"sastoj/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LoginSessionCreate is the builder for creating a LoginSession entity.
type LoginSessionCreate struct {
	config
	mutation *LoginSessionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (lsc *LoginSessionCreate) SetCreateTime(t time.Time) *LoginSessionCreate {
	lsc.mutation.SetCreateTime(t)
	return lsc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (lsc *LoginSessionCreate) SetNillableCreateTime(t *time.Time) *LoginSessionCreate {
	if t != nil {
		lsc.SetCreateTime(*t)
	}
	return lsc
}

// SetUserID sets the "user_id" field.
func (lsc *LoginSessionCreate) SetUserID(i int64) *LoginSessionCreate {
	lsc.mutation.SetUserID(i)
	return lsc
}

// SetID sets the "id" field.
func (lsc *LoginSessionCreate) SetID(i int64) *LoginSessionCreate {
	lsc.mutation.SetID(i)
	return lsc
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (lsc *LoginSessionCreate) SetUsersID(id int64) *LoginSessionCreate {
	lsc.mutation.SetUsersID(id)
	return lsc
}

// SetUsers sets the "users" edge to the User entity.
func (lsc *LoginSessionCreate) SetUsers(u *User) *LoginSessionCreate {
	return lsc.SetUsersID(u.ID)
}

// Mutation returns the LoginSessionMutation object of the builder.
func (lsc *LoginSessionCreate) Mutation() *LoginSessionMutation {
	return lsc.mutation
}

// Save creates the LoginSession in the database.
func (lsc *LoginSessionCreate) Save(ctx context.Context) (*LoginSession, error) {
	lsc.defaults()
	return withHooks(ctx, lsc.sqlSave, lsc.mutation, lsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lsc *LoginSessionCreate) SaveX(ctx context.Context) *LoginSession {
	v, err := lsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lsc *LoginSessionCreate) Exec(ctx context.Context) error {
	_, err := lsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lsc *LoginSessionCreate) ExecX(ctx context.Context) {
	if err := lsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lsc *LoginSessionCreate) defaults() {
	if _, ok := lsc.mutation.CreateTime(); !ok {
		v := loginsession.DefaultCreateTime
		lsc.mutation.SetCreateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lsc *LoginSessionCreate) check() error {
	if _, ok := lsc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "LoginSession.create_time"`)}
	}
	if _, ok := lsc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "LoginSession.user_id"`)}
	}
	if _, ok := lsc.mutation.UsersID(); !ok {
		return &ValidationError{Name: "users", err: errors.New(`ent: missing required edge "LoginSession.users"`)}
	}
	return nil
}

func (lsc *LoginSessionCreate) sqlSave(ctx context.Context) (*LoginSession, error) {
	if err := lsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	lsc.mutation.id = &_node.ID
	lsc.mutation.done = true
	return _node, nil
}

func (lsc *LoginSessionCreate) createSpec() (*LoginSession, *sqlgraph.CreateSpec) {
	var (
		_node = &LoginSession{config: lsc.config}
		_spec = sqlgraph.NewCreateSpec(loginsession.Table, sqlgraph.NewFieldSpec(loginsession.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = lsc.conflict
	if id, ok := lsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lsc.mutation.CreateTime(); ok {
		_spec.SetField(loginsession.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if nodes := lsc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loginsession.UsersTable,
			Columns: []string{loginsession.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LoginSession.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LoginSessionUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (lsc *LoginSessionCreate) OnConflict(opts ...sql.ConflictOption) *LoginSessionUpsertOne {
	lsc.conflict = opts
	return &LoginSessionUpsertOne{
		create: lsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LoginSession.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lsc *LoginSessionCreate) OnConflictColumns(columns ...string) *LoginSessionUpsertOne {
	lsc.conflict = append(lsc.conflict, sql.ConflictColumns(columns...))
	return &LoginSessionUpsertOne{
		create: lsc,
	}
}

type (
	// LoginSessionUpsertOne is the builder for "upsert"-ing
	//  one LoginSession node.
	LoginSessionUpsertOne struct {
		create *LoginSessionCreate
	}

	// LoginSessionUpsert is the "OnConflict" setter.
	LoginSessionUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreateTime sets the "create_time" field.
func (u *LoginSessionUpsert) SetCreateTime(v time.Time) *LoginSessionUpsert {
	u.Set(loginsession.FieldCreateTime, v)
	return u
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *LoginSessionUpsert) UpdateCreateTime() *LoginSessionUpsert {
	u.SetExcluded(loginsession.FieldCreateTime)
	return u
}

// SetUserID sets the "user_id" field.
func (u *LoginSessionUpsert) SetUserID(v int64) *LoginSessionUpsert {
	u.Set(loginsession.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *LoginSessionUpsert) UpdateUserID() *LoginSessionUpsert {
	u.SetExcluded(loginsession.FieldUserID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.LoginSession.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(loginsession.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LoginSessionUpsertOne) UpdateNewValues() *LoginSessionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(loginsession.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LoginSession.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *LoginSessionUpsertOne) Ignore() *LoginSessionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LoginSessionUpsertOne) DoNothing() *LoginSessionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LoginSessionCreate.OnConflict
// documentation for more info.
func (u *LoginSessionUpsertOne) Update(set func(*LoginSessionUpsert)) *LoginSessionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LoginSessionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *LoginSessionUpsertOne) SetCreateTime(v time.Time) *LoginSessionUpsertOne {
	return u.Update(func(s *LoginSessionUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *LoginSessionUpsertOne) UpdateCreateTime() *LoginSessionUpsertOne {
	return u.Update(func(s *LoginSessionUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUserID sets the "user_id" field.
func (u *LoginSessionUpsertOne) SetUserID(v int64) *LoginSessionUpsertOne {
	return u.Update(func(s *LoginSessionUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *LoginSessionUpsertOne) UpdateUserID() *LoginSessionUpsertOne {
	return u.Update(func(s *LoginSessionUpsert) {
		s.UpdateUserID()
	})
}

// Exec executes the query.
func (u *LoginSessionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LoginSessionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LoginSessionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LoginSessionUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LoginSessionUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LoginSessionCreateBulk is the builder for creating many LoginSession entities in bulk.
type LoginSessionCreateBulk struct {
	config
	err      error
	builders []*LoginSessionCreate
	conflict []sql.ConflictOption
}

// Save creates the LoginSession entities in the database.
func (lscb *LoginSessionCreateBulk) Save(ctx context.Context) ([]*LoginSession, error) {
	if lscb.err != nil {
		return nil, lscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lscb.builders))
	nodes := make([]*LoginSession, len(lscb.builders))
	mutators := make([]Mutator, len(lscb.builders))
	for i := range lscb.builders {
		func(i int, root context.Context) {
			builder := lscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LoginSessionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = lscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lscb *LoginSessionCreateBulk) SaveX(ctx context.Context) []*LoginSession {
	v, err := lscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lscb *LoginSessionCreateBulk) Exec(ctx context.Context) error {
	_, err := lscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lscb *LoginSessionCreateBulk) ExecX(ctx context.Context) {
	if err := lscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LoginSession.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LoginSessionUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (lscb *LoginSessionCreateBulk) OnConflict(opts ...sql.ConflictOption) *LoginSessionUpsertBulk {
	lscb.conflict = opts
	return &LoginSessionUpsertBulk{
		create: lscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LoginSession.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lscb *LoginSessionCreateBulk) OnConflictColumns(columns ...string) *LoginSessionUpsertBulk {
	lscb.conflict = append(lscb.conflict, sql.ConflictColumns(columns...))
	return &LoginSessionUpsertBulk{
		create: lscb,
	}
}

// LoginSessionUpsertBulk is the builder for "upsert"-ing
// a bulk of LoginSession nodes.
type LoginSessionUpsertBulk struct {
	create *LoginSessionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.LoginSession.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(loginsession.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LoginSessionUpsertBulk) UpdateNewValues() *LoginSessionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(loginsession.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LoginSession.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *LoginSessionUpsertBulk) Ignore() *LoginSessionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LoginSessionUpsertBulk) DoNothing() *LoginSessionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LoginSessionCreateBulk.OnConflict
// documentation for more info.
func (u *LoginSessionUpsertBulk) Update(set func(*LoginSessionUpsert)) *LoginSessionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LoginSessionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *LoginSessionUpsertBulk) SetCreateTime(v time.Time) *LoginSessionUpsertBulk {
	return u.Update(func(s *LoginSessionUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *LoginSessionUpsertBulk) UpdateCreateTime() *LoginSessionUpsertBulk {
	return u.Update(func(s *LoginSessionUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUserID sets the "user_id" field.
func (u *LoginSessionUpsertBulk) SetUserID(v int64) *LoginSessionUpsertBulk {
	return u.Update(func(s *LoginSessionUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *LoginSessionUpsertBulk) UpdateUserID() *LoginSessionUpsertBulk {
	return u.Update(func(s *LoginSessionUpsert) {
		s.UpdateUserID()
	})
}

// Exec executes the query.
func (u *LoginSessionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the LoginSessionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LoginSessionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LoginSessionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
