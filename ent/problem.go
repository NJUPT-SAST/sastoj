// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"sastoj/ent/contest"
	"sastoj/ent/problem"
	"sastoj/ent/problemtype"
	"sastoj/ent/schema"
	"sastoj/ent/user"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Problem is the model entity for the Problem schema.
type Problem struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// ProblemTypeID holds the value of the "problem_type_id" field.
	ProblemTypeID int64 `json:"problem_type_id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Score holds the value of the "score" field.
	Score int16 `json:"score,omitempty"`
	// CaseVersion holds the value of the "case_version" field.
	CaseVersion int16 `json:"case_version,omitempty"`
	// Index holds the value of the "index" field.
	Index int16 `json:"index,omitempty"`
	// LfCompare holds the value of the "lf_compare" field.
	LfCompare schema.LfCompare `json:"lf_compare,omitempty"`
	// IsDeleted holds the value of the "is_deleted" field.
	IsDeleted bool `json:"is_deleted,omitempty"`
	// ContestID holds the value of the "contest_id" field.
	ContestID int64 `json:"contest_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int64 `json:"user_id,omitempty"`
	// Visibility holds the value of the "visibility" field.
	Visibility problem.Visibility `json:"visibility,omitempty"`
	// Metadata like 'allowed languages' of the problem.
	Metadata map[string]string `json:"metadata,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProblemQuery when eager-loading is set.
	Edges        ProblemEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProblemEdges holds the relations/edges for other nodes in the graph.
type ProblemEdges struct {
	// Submission holds the value of the submission edge.
	Submission []*Submission `json:"submission,omitempty"`
	// Contests holds the value of the contests edge.
	Contests *Contest `json:"contests,omitempty"`
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// ProblemTypes holds the value of the problem_types edge.
	ProblemTypes *ProblemType `json:"problem_types,omitempty"`
	// Judgers holds the value of the judgers edge.
	Judgers []*Group `json:"judgers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// SubmissionOrErr returns the Submission value or an error if the edge
// was not loaded in eager-loading.
func (e ProblemEdges) SubmissionOrErr() ([]*Submission, error) {
	if e.loadedTypes[0] {
		return e.Submission, nil
	}
	return nil, &NotLoadedError{edge: "submission"}
}

// ContestsOrErr returns the Contests value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProblemEdges) ContestsOrErr() (*Contest, error) {
	if e.loadedTypes[1] {
		if e.Contests == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: contest.Label}
		}
		return e.Contests, nil
	}
	return nil, &NotLoadedError{edge: "contests"}
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProblemEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[2] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// ProblemTypesOrErr returns the ProblemTypes value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProblemEdges) ProblemTypesOrErr() (*ProblemType, error) {
	if e.loadedTypes[3] {
		if e.ProblemTypes == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: problemtype.Label}
		}
		return e.ProblemTypes, nil
	}
	return nil, &NotLoadedError{edge: "problem_types"}
}

// JudgersOrErr returns the Judgers value or an error if the edge
// was not loaded in eager-loading.
func (e ProblemEdges) JudgersOrErr() ([]*Group, error) {
	if e.loadedTypes[4] {
		return e.Judgers, nil
	}
	return nil, &NotLoadedError{edge: "judgers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Problem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case problem.FieldLfCompare, problem.FieldMetadata:
			values[i] = new([]byte)
		case problem.FieldIsDeleted:
			values[i] = new(sql.NullBool)
		case problem.FieldID, problem.FieldProblemTypeID, problem.FieldScore, problem.FieldCaseVersion, problem.FieldIndex, problem.FieldContestID, problem.FieldUserID:
			values[i] = new(sql.NullInt64)
		case problem.FieldTitle, problem.FieldContent, problem.FieldVisibility:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Problem fields.
func (pr *Problem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case problem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int64(value.Int64)
		case problem.FieldProblemTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field problem_type_id", values[i])
			} else if value.Valid {
				pr.ProblemTypeID = value.Int64
			}
		case problem.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				pr.Title = value.String
			}
		case problem.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				pr.Content = value.String
			}
		case problem.FieldScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field score", values[i])
			} else if value.Valid {
				pr.Score = int16(value.Int64)
			}
		case problem.FieldCaseVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field case_version", values[i])
			} else if value.Valid {
				pr.CaseVersion = int16(value.Int64)
			}
		case problem.FieldIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field index", values[i])
			} else if value.Valid {
				pr.Index = int16(value.Int64)
			}
		case problem.FieldLfCompare:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field lf_compare", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.LfCompare); err != nil {
					return fmt.Errorf("unmarshal field lf_compare: %w", err)
				}
			}
		case problem.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				pr.IsDeleted = value.Bool
			}
		case problem.FieldContestID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field contest_id", values[i])
			} else if value.Valid {
				pr.ContestID = value.Int64
			}
		case problem.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				pr.UserID = value.Int64
			}
		case problem.FieldVisibility:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field visibility", values[i])
			} else if value.Valid {
				pr.Visibility = problem.Visibility(value.String)
			}
		case problem.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Problem.
// This includes values selected through modifiers, order, etc.
func (pr *Problem) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QuerySubmission queries the "submission" edge of the Problem entity.
func (pr *Problem) QuerySubmission() *SubmissionQuery {
	return NewProblemClient(pr.config).QuerySubmission(pr)
}

// QueryContests queries the "contests" edge of the Problem entity.
func (pr *Problem) QueryContests() *ContestQuery {
	return NewProblemClient(pr.config).QueryContests(pr)
}

// QueryOwner queries the "owner" edge of the Problem entity.
func (pr *Problem) QueryOwner() *UserQuery {
	return NewProblemClient(pr.config).QueryOwner(pr)
}

// QueryProblemTypes queries the "problem_types" edge of the Problem entity.
func (pr *Problem) QueryProblemTypes() *ProblemTypeQuery {
	return NewProblemClient(pr.config).QueryProblemTypes(pr)
}

// QueryJudgers queries the "judgers" edge of the Problem entity.
func (pr *Problem) QueryJudgers() *GroupQuery {
	return NewProblemClient(pr.config).QueryJudgers(pr)
}

// Update returns a builder for updating this Problem.
// Note that you need to call Problem.Unwrap() before calling this method if this Problem
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Problem) Update() *ProblemUpdateOne {
	return NewProblemClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Problem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Problem) Unwrap() *Problem {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Problem is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Problem) String() string {
	var builder strings.Builder
	builder.WriteString("Problem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("problem_type_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.ProblemTypeID))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(pr.Title)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(pr.Content)
	builder.WriteString(", ")
	builder.WriteString("score=")
	builder.WriteString(fmt.Sprintf("%v", pr.Score))
	builder.WriteString(", ")
	builder.WriteString("case_version=")
	builder.WriteString(fmt.Sprintf("%v", pr.CaseVersion))
	builder.WriteString(", ")
	builder.WriteString("index=")
	builder.WriteString(fmt.Sprintf("%v", pr.Index))
	builder.WriteString(", ")
	builder.WriteString("lf_compare=")
	builder.WriteString(fmt.Sprintf("%v", pr.LfCompare))
	builder.WriteString(", ")
	builder.WriteString("is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", pr.IsDeleted))
	builder.WriteString(", ")
	builder.WriteString("contest_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.ContestID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.UserID))
	builder.WriteString(", ")
	builder.WriteString("visibility=")
	builder.WriteString(fmt.Sprintf("%v", pr.Visibility))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", pr.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// Problems is a parsable slice of Problem.
type Problems []*Problem
