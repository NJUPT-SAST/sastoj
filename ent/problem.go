// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"sastoj/ent/contest"
	"sastoj/ent/problem"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Problem is the model entity for the Problem schema.
type Problem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Point holds the value of the "point" field.
	Point int `json:"point,omitempty"`
	// ContestID holds the value of the "contest_id" field.
	ContestID int `json:"contest_id,omitempty"`
	// CaseVersion holds the value of the "case_version" field.
	CaseVersion int `json:"case_version,omitempty"`
	// Index holds the value of the "index" field.
	Index int `json:"index,omitempty"`
	// IsDeleted holds the value of the "is_deleted" field.
	IsDeleted bool `json:"is_deleted,omitempty"`
	// Config holds the value of the "config" field.
	Config string `json:"config,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProblemQuery when eager-loading is set.
	Edges           ProblemEdges `json:"edges"`
	problem_contest *int
	selectValues    sql.SelectValues
}

// ProblemEdges holds the relations/edges for other nodes in the graph.
type ProblemEdges struct {
	// Contest holds the value of the contest edge.
	Contest *Contest `json:"contest,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ContestOrErr returns the Contest value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProblemEdges) ContestOrErr() (*Contest, error) {
	if e.loadedTypes[0] {
		if e.Contest == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: contest.Label}
		}
		return e.Contest, nil
	}
	return nil, &NotLoadedError{edge: "contest"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Problem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case problem.FieldIsDeleted:
			values[i] = new(sql.NullBool)
		case problem.FieldID, problem.FieldPoint, problem.FieldContestID, problem.FieldCaseVersion, problem.FieldIndex:
			values[i] = new(sql.NullInt64)
		case problem.FieldTitle, problem.FieldContent, problem.FieldConfig:
			values[i] = new(sql.NullString)
		case problem.ForeignKeys[0]: // problem_contest
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Problem fields.
func (pr *Problem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case problem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case problem.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				pr.Title = value.String
			}
		case problem.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				pr.Content = value.String
			}
		case problem.FieldPoint:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field point", values[i])
			} else if value.Valid {
				pr.Point = int(value.Int64)
			}
		case problem.FieldContestID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field contest_id", values[i])
			} else if value.Valid {
				pr.ContestID = int(value.Int64)
			}
		case problem.FieldCaseVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field case_version", values[i])
			} else if value.Valid {
				pr.CaseVersion = int(value.Int64)
			}
		case problem.FieldIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field index", values[i])
			} else if value.Valid {
				pr.Index = int(value.Int64)
			}
		case problem.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				pr.IsDeleted = value.Bool
			}
		case problem.FieldConfig:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field config", values[i])
			} else if value.Valid {
				pr.Config = value.String
			}
		case problem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field problem_contest", value)
			} else if value.Valid {
				pr.problem_contest = new(int)
				*pr.problem_contest = int(value.Int64)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Problem.
// This includes values selected through modifiers, order, etc.
func (pr *Problem) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryContest queries the "contest" edge of the Problem entity.
func (pr *Problem) QueryContest() *ContestQuery {
	return NewProblemClient(pr.config).QueryContest(pr)
}

// Update returns a builder for updating this Problem.
// Note that you need to call Problem.Unwrap() before calling this method if this Problem
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Problem) Update() *ProblemUpdateOne {
	return NewProblemClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Problem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Problem) Unwrap() *Problem {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Problem is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Problem) String() string {
	var builder strings.Builder
	builder.WriteString("Problem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("title=")
	builder.WriteString(pr.Title)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(pr.Content)
	builder.WriteString(", ")
	builder.WriteString("point=")
	builder.WriteString(fmt.Sprintf("%v", pr.Point))
	builder.WriteString(", ")
	builder.WriteString("contest_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.ContestID))
	builder.WriteString(", ")
	builder.WriteString("case_version=")
	builder.WriteString(fmt.Sprintf("%v", pr.CaseVersion))
	builder.WriteString(", ")
	builder.WriteString("index=")
	builder.WriteString(fmt.Sprintf("%v", pr.Index))
	builder.WriteString(", ")
	builder.WriteString("is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", pr.IsDeleted))
	builder.WriteString(", ")
	builder.WriteString("config=")
	builder.WriteString(pr.Config)
	builder.WriteByte(')')
	return builder.String()
}

// Problems is a parsable slice of Problem.
type Problems []*Problem
