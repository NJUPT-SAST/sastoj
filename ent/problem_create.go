// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sastoj/ent/contest"
	"sastoj/ent/problem"
	"sastoj/ent/problemcase"
	"sastoj/ent/problemjudge"
	"sastoj/ent/submit"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProblemCreate is the builder for creating a Problem entity.
type ProblemCreate struct {
	config
	mutation *ProblemMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (pc *ProblemCreate) SetTitle(s string) *ProblemCreate {
	pc.mutation.SetTitle(s)
	return pc
}

// SetContent sets the "content" field.
func (pc *ProblemCreate) SetContent(s string) *ProblemCreate {
	pc.mutation.SetContent(s)
	return pc
}

// SetPoint sets the "point" field.
func (pc *ProblemCreate) SetPoint(i int) *ProblemCreate {
	pc.mutation.SetPoint(i)
	return pc
}

// SetContestID sets the "contest_id" field.
func (pc *ProblemCreate) SetContestID(i int) *ProblemCreate {
	pc.mutation.SetContestID(i)
	return pc
}

// SetCaseVersion sets the "case_version" field.
func (pc *ProblemCreate) SetCaseVersion(i int) *ProblemCreate {
	pc.mutation.SetCaseVersion(i)
	return pc
}

// SetIndex sets the "index" field.
func (pc *ProblemCreate) SetIndex(i int) *ProblemCreate {
	pc.mutation.SetIndex(i)
	return pc
}

// SetIsDeleted sets the "is_deleted" field.
func (pc *ProblemCreate) SetIsDeleted(b bool) *ProblemCreate {
	pc.mutation.SetIsDeleted(b)
	return pc
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (pc *ProblemCreate) SetNillableIsDeleted(b *bool) *ProblemCreate {
	if b != nil {
		pc.SetIsDeleted(*b)
	}
	return pc
}

// SetConfig sets the "config" field.
func (pc *ProblemCreate) SetConfig(s string) *ProblemCreate {
	pc.mutation.SetConfig(s)
	return pc
}

// SetID sets the "id" field.
func (pc *ProblemCreate) SetID(i int) *ProblemCreate {
	pc.mutation.SetID(i)
	return pc
}

// SetContestsID sets the "contests" edge to the Contest entity by ID.
func (pc *ProblemCreate) SetContestsID(id int) *ProblemCreate {
	pc.mutation.SetContestsID(id)
	return pc
}

// SetNillableContestsID sets the "contests" edge to the Contest entity by ID if the given value is not nil.
func (pc *ProblemCreate) SetNillableContestsID(id *int) *ProblemCreate {
	if id != nil {
		pc = pc.SetContestsID(*id)
	}
	return pc
}

// SetContests sets the "contests" edge to the Contest entity.
func (pc *ProblemCreate) SetContests(c *Contest) *ProblemCreate {
	return pc.SetContestsID(c.ID)
}

// AddProblemCaseIDs adds the "problem_cases" edge to the ProblemCase entity by IDs.
func (pc *ProblemCreate) AddProblemCaseIDs(ids ...int) *ProblemCreate {
	pc.mutation.AddProblemCaseIDs(ids...)
	return pc
}

// AddProblemCases adds the "problem_cases" edges to the ProblemCase entity.
func (pc *ProblemCreate) AddProblemCases(p ...*ProblemCase) *ProblemCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddProblemCaseIDs(ids...)
}

// AddProblemJudgeIDs adds the "problem_judges" edge to the ProblemJudge entity by IDs.
func (pc *ProblemCreate) AddProblemJudgeIDs(ids ...int) *ProblemCreate {
	pc.mutation.AddProblemJudgeIDs(ids...)
	return pc
}

// AddProblemJudges adds the "problem_judges" edges to the ProblemJudge entity.
func (pc *ProblemCreate) AddProblemJudges(p ...*ProblemJudge) *ProblemCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddProblemJudgeIDs(ids...)
}

// AddSubmissionIDs adds the "submission" edge to the Submit entity by IDs.
func (pc *ProblemCreate) AddSubmissionIDs(ids ...int) *ProblemCreate {
	pc.mutation.AddSubmissionIDs(ids...)
	return pc
}

// AddSubmission adds the "submission" edges to the Submit entity.
func (pc *ProblemCreate) AddSubmission(s ...*Submit) *ProblemCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pc.AddSubmissionIDs(ids...)
}

// Mutation returns the ProblemMutation object of the builder.
func (pc *ProblemCreate) Mutation() *ProblemMutation {
	return pc.mutation
}

// Save creates the Problem in the database.
func (pc *ProblemCreate) Save(ctx context.Context) (*Problem, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProblemCreate) SaveX(ctx context.Context) *Problem {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProblemCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProblemCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProblemCreate) defaults() {
	if _, ok := pc.mutation.IsDeleted(); !ok {
		v := problem.DefaultIsDeleted
		pc.mutation.SetIsDeleted(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProblemCreate) check() error {
	if _, ok := pc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Problem.title"`)}
	}
	if _, ok := pc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Problem.content"`)}
	}
	if _, ok := pc.mutation.Point(); !ok {
		return &ValidationError{Name: "point", err: errors.New(`ent: missing required field "Problem.point"`)}
	}
	if _, ok := pc.mutation.ContestID(); !ok {
		return &ValidationError{Name: "contest_id", err: errors.New(`ent: missing required field "Problem.contest_id"`)}
	}
	if _, ok := pc.mutation.CaseVersion(); !ok {
		return &ValidationError{Name: "case_version", err: errors.New(`ent: missing required field "Problem.case_version"`)}
	}
	if _, ok := pc.mutation.Index(); !ok {
		return &ValidationError{Name: "index", err: errors.New(`ent: missing required field "Problem.index"`)}
	}
	if _, ok := pc.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`ent: missing required field "Problem.is_deleted"`)}
	}
	if _, ok := pc.mutation.Config(); !ok {
		return &ValidationError{Name: "config", err: errors.New(`ent: missing required field "Problem.config"`)}
	}
	return nil
}

func (pc *ProblemCreate) sqlSave(ctx context.Context) (*Problem, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProblemCreate) createSpec() (*Problem, *sqlgraph.CreateSpec) {
	var (
		_node = &Problem{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(problem.Table, sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.Title(); ok {
		_spec.SetField(problem.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := pc.mutation.Content(); ok {
		_spec.SetField(problem.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := pc.mutation.Point(); ok {
		_spec.SetField(problem.FieldPoint, field.TypeInt, value)
		_node.Point = value
	}
	if value, ok := pc.mutation.ContestID(); ok {
		_spec.SetField(problem.FieldContestID, field.TypeInt, value)
		_node.ContestID = value
	}
	if value, ok := pc.mutation.CaseVersion(); ok {
		_spec.SetField(problem.FieldCaseVersion, field.TypeInt, value)
		_node.CaseVersion = value
	}
	if value, ok := pc.mutation.Index(); ok {
		_spec.SetField(problem.FieldIndex, field.TypeInt, value)
		_node.Index = value
	}
	if value, ok := pc.mutation.IsDeleted(); ok {
		_spec.SetField(problem.FieldIsDeleted, field.TypeBool, value)
		_node.IsDeleted = value
	}
	if value, ok := pc.mutation.Config(); ok {
		_spec.SetField(problem.FieldConfig, field.TypeString, value)
		_node.Config = value
	}
	if nodes := pc.mutation.ContestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.ContestsTable,
			Columns: []string{problem.ContestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.contest_problems = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ProblemCasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problem.ProblemCasesTable,
			Columns: []string{problem.ProblemCasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problemcase.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ProblemJudgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problem.ProblemJudgesTable,
			Columns: []string{problem.ProblemJudgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problemjudge.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.SubmissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problem.SubmissionTable,
			Columns: []string{problem.SubmissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProblemCreateBulk is the builder for creating many Problem entities in bulk.
type ProblemCreateBulk struct {
	config
	err      error
	builders []*ProblemCreate
}

// Save creates the Problem entities in the database.
func (pcb *ProblemCreateBulk) Save(ctx context.Context) ([]*Problem, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Problem, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProblemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProblemCreateBulk) SaveX(ctx context.Context) []*Problem {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProblemCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProblemCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
