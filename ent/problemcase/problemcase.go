// Code generated by ent, DO NOT EDIT.

package problemcase

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the problemcase type in the database.
	Label = "problem_case"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPoint holds the string denoting the point field in the database.
	FieldPoint = "point"
	// FieldIndex holds the string denoting the index field in the database.
	FieldIndex = "index"
	// FieldIsAuto holds the string denoting the is_auto field in the database.
	FieldIsAuto = "is_auto"
	// FieldIsDeleted holds the string denoting the is_deleted field in the database.
	FieldIsDeleted = "is_deleted"
	// EdgeSubmitCases holds the string denoting the submit_cases edge name in mutations.
	EdgeSubmitCases = "submit_cases"
	// EdgeProblems holds the string denoting the problems edge name in mutations.
	EdgeProblems = "problems"
	// Table holds the table name of the problemcase in the database.
	Table = "problem_cases"
	// SubmitCasesTable is the table that holds the submit_cases relation/edge.
	SubmitCasesTable = "submit_cases"
	// SubmitCasesInverseTable is the table name for the SubmitCase entity.
	// It exists in this package in order to avoid circular dependency with the "submitcase" package.
	SubmitCasesInverseTable = "submit_cases"
	// SubmitCasesColumn is the table column denoting the submit_cases relation/edge.
	SubmitCasesColumn = "problem_case_submit_cases"
	// ProblemsTable is the table that holds the problems relation/edge.
	ProblemsTable = "problem_cases"
	// ProblemsInverseTable is the table name for the Problem entity.
	// It exists in this package in order to avoid circular dependency with the "problem" package.
	ProblemsInverseTable = "problems"
	// ProblemsColumn is the table column denoting the problems relation/edge.
	ProblemsColumn = "problem_problem_cases"
)

// Columns holds all SQL columns for problemcase fields.
var Columns = []string{
	FieldID,
	FieldPoint,
	FieldIndex,
	FieldIsAuto,
	FieldIsDeleted,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "problem_cases"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"problem_problem_cases",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// PointValidator is a validator for the "point" field. It is called by the builders before save.
	PointValidator func(int) error
	// IndexValidator is a validator for the "index" field. It is called by the builders before save.
	IndexValidator func(int) error
	// DefaultIsAuto holds the default value on creation for the "is_auto" field.
	DefaultIsAuto bool
	// DefaultIsDeleted holds the default value on creation for the "is_deleted" field.
	DefaultIsDeleted bool
)

// OrderOption defines the ordering options for the ProblemCase queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPoint orders the results by the point field.
func ByPoint(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPoint, opts...).ToFunc()
}

// ByIndex orders the results by the index field.
func ByIndex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIndex, opts...).ToFunc()
}

// ByIsAuto orders the results by the is_auto field.
func ByIsAuto(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsAuto, opts...).ToFunc()
}

// ByIsDeleted orders the results by the is_deleted field.
func ByIsDeleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDeleted, opts...).ToFunc()
}

// BySubmitCasesCount orders the results by submit_cases count.
func BySubmitCasesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSubmitCasesStep(), opts...)
	}
}

// BySubmitCases orders the results by submit_cases terms.
func BySubmitCases(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubmitCasesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProblemsField orders the results by problems field.
func ByProblemsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProblemsStep(), sql.OrderByField(field, opts...))
	}
}
func newSubmitCasesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubmitCasesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SubmitCasesTable, SubmitCasesColumn),
	)
}
func newProblemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProblemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProblemsTable, ProblemsColumn),
	)
}
