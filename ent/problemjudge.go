// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"sastoj/ent/group"
	"sastoj/ent/problem"
	"sastoj/ent/problemjudge"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ProblemJudge is the model entity for the ProblemJudge schema.
type ProblemJudge struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// GroupID holds the value of the "group_id" field.
	GroupID int `json:"group_id,omitempty"`
	// ProblemID holds the value of the "problem_id" field.
	ProblemID int `json:"problem_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProblemJudgeQuery when eager-loading is set.
	Edges                 ProblemJudgeEdges `json:"edges"`
	problem_judge_group   *int
	problem_judge_problem *int
	selectValues          sql.SelectValues
}

// ProblemJudgeEdges holds the relations/edges for other nodes in the graph.
type ProblemJudgeEdges struct {
	// Group holds the value of the group edge.
	Group *Group `json:"group,omitempty"`
	// Problem holds the value of the problem edge.
	Problem *Problem `json:"problem,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// GroupOrErr returns the Group value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProblemJudgeEdges) GroupOrErr() (*Group, error) {
	if e.loadedTypes[0] {
		if e.Group == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: group.Label}
		}
		return e.Group, nil
	}
	return nil, &NotLoadedError{edge: "group"}
}

// ProblemOrErr returns the Problem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProblemJudgeEdges) ProblemOrErr() (*Problem, error) {
	if e.loadedTypes[1] {
		if e.Problem == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: problem.Label}
		}
		return e.Problem, nil
	}
	return nil, &NotLoadedError{edge: "problem"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProblemJudge) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case problemjudge.FieldID, problemjudge.FieldGroupID, problemjudge.FieldProblemID:
			values[i] = new(sql.NullInt64)
		case problemjudge.ForeignKeys[0]: // problem_judge_group
			values[i] = new(sql.NullInt64)
		case problemjudge.ForeignKeys[1]: // problem_judge_problem
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProblemJudge fields.
func (pj *ProblemJudge) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case problemjudge.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pj.ID = int(value.Int64)
		case problemjudge.FieldGroupID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field group_id", values[i])
			} else if value.Valid {
				pj.GroupID = int(value.Int64)
			}
		case problemjudge.FieldProblemID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field problem_id", values[i])
			} else if value.Valid {
				pj.ProblemID = int(value.Int64)
			}
		case problemjudge.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field problem_judge_group", value)
			} else if value.Valid {
				pj.problem_judge_group = new(int)
				*pj.problem_judge_group = int(value.Int64)
			}
		case problemjudge.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field problem_judge_problem", value)
			} else if value.Valid {
				pj.problem_judge_problem = new(int)
				*pj.problem_judge_problem = int(value.Int64)
			}
		default:
			pj.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProblemJudge.
// This includes values selected through modifiers, order, etc.
func (pj *ProblemJudge) Value(name string) (ent.Value, error) {
	return pj.selectValues.Get(name)
}

// QueryGroup queries the "group" edge of the ProblemJudge entity.
func (pj *ProblemJudge) QueryGroup() *GroupQuery {
	return NewProblemJudgeClient(pj.config).QueryGroup(pj)
}

// QueryProblem queries the "problem" edge of the ProblemJudge entity.
func (pj *ProblemJudge) QueryProblem() *ProblemQuery {
	return NewProblemJudgeClient(pj.config).QueryProblem(pj)
}

// Update returns a builder for updating this ProblemJudge.
// Note that you need to call ProblemJudge.Unwrap() before calling this method if this ProblemJudge
// was returned from a transaction, and the transaction was committed or rolled back.
func (pj *ProblemJudge) Update() *ProblemJudgeUpdateOne {
	return NewProblemJudgeClient(pj.config).UpdateOne(pj)
}

// Unwrap unwraps the ProblemJudge entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pj *ProblemJudge) Unwrap() *ProblemJudge {
	_tx, ok := pj.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProblemJudge is not a transactional entity")
	}
	pj.config.driver = _tx.drv
	return pj
}

// String implements the fmt.Stringer.
func (pj *ProblemJudge) String() string {
	var builder strings.Builder
	builder.WriteString("ProblemJudge(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pj.ID))
	builder.WriteString("group_id=")
	builder.WriteString(fmt.Sprintf("%v", pj.GroupID))
	builder.WriteString(", ")
	builder.WriteString("problem_id=")
	builder.WriteString(fmt.Sprintf("%v", pj.ProblemID))
	builder.WriteByte(')')
	return builder.String()
}

// ProblemJudges is a parsable slice of ProblemJudge.
type ProblemJudges []*ProblemJudge
