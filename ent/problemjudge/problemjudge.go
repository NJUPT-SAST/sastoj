// Code generated by ent, DO NOT EDIT.

package problemjudge

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the problemjudge type in the database.
	Label = "problem_judge"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldGroupID holds the string denoting the group_id field in the database.
	FieldGroupID = "group_id"
	// FieldProblemID holds the string denoting the problem_id field in the database.
	FieldProblemID = "problem_id"
	// EdgeGroup holds the string denoting the group edge name in mutations.
	EdgeGroup = "group"
	// EdgeProblem holds the string denoting the problem edge name in mutations.
	EdgeProblem = "problem"
	// Table holds the table name of the problemjudge in the database.
	Table = "problem_judges"
	// GroupTable is the table that holds the group relation/edge.
	GroupTable = "problem_judges"
	// GroupInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	GroupInverseTable = "groups"
	// GroupColumn is the table column denoting the group relation/edge.
	GroupColumn = "problem_judge_group"
	// ProblemTable is the table that holds the problem relation/edge.
	ProblemTable = "problem_judges"
	// ProblemInverseTable is the table name for the Problem entity.
	// It exists in this package in order to avoid circular dependency with the "problem" package.
	ProblemInverseTable = "problems"
	// ProblemColumn is the table column denoting the problem relation/edge.
	ProblemColumn = "problem_judge_problem"
)

// Columns holds all SQL columns for problemjudge fields.
var Columns = []string{
	FieldID,
	FieldGroupID,
	FieldProblemID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "problem_judges"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"problem_judge_group",
	"problem_judge_problem",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// GroupIDValidator is a validator for the "group_id" field. It is called by the builders before save.
	GroupIDValidator func(int) error
	// ProblemIDValidator is a validator for the "problem_id" field. It is called by the builders before save.
	ProblemIDValidator func(int) error
)

// OrderOption defines the ordering options for the ProblemJudge queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByGroupID orders the results by the group_id field.
func ByGroupID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGroupID, opts...).ToFunc()
}

// ByProblemID orders the results by the problem_id field.
func ByProblemID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProblemID, opts...).ToFunc()
}

// ByGroupField orders the results by group field.
func ByGroupField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroupStep(), sql.OrderByField(field, opts...))
	}
}

// ByProblemField orders the results by problem field.
func ByProblemField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProblemStep(), sql.OrderByField(field, opts...))
	}
}
func newGroupStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroupInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, GroupTable, GroupColumn),
	)
}
func newProblemStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProblemInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ProblemTable, ProblemColumn),
	)
}
