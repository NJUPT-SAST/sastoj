// Code generated by ent, DO NOT EDIT.

package problemjudge

import (
	"sastoj/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ProblemJudge {
	return predicate.ProblemJudge(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ProblemJudge {
	return predicate.ProblemJudge(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ProblemJudge {
	return predicate.ProblemJudge(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ProblemJudge {
	return predicate.ProblemJudge(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ProblemJudge {
	return predicate.ProblemJudge(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ProblemJudge {
	return predicate.ProblemJudge(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ProblemJudge {
	return predicate.ProblemJudge(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ProblemJudge {
	return predicate.ProblemJudge(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ProblemJudge {
	return predicate.ProblemJudge(sql.FieldLTE(FieldID, id))
}

// GroupID applies equality check predicate on the "group_id" field. It's identical to GroupIDEQ.
func GroupID(v int) predicate.ProblemJudge {
	return predicate.ProblemJudge(sql.FieldEQ(FieldGroupID, v))
}

// ProblemID applies equality check predicate on the "problem_id" field. It's identical to ProblemIDEQ.
func ProblemID(v int) predicate.ProblemJudge {
	return predicate.ProblemJudge(sql.FieldEQ(FieldProblemID, v))
}

// GroupIDEQ applies the EQ predicate on the "group_id" field.
func GroupIDEQ(v int) predicate.ProblemJudge {
	return predicate.ProblemJudge(sql.FieldEQ(FieldGroupID, v))
}

// GroupIDNEQ applies the NEQ predicate on the "group_id" field.
func GroupIDNEQ(v int) predicate.ProblemJudge {
	return predicate.ProblemJudge(sql.FieldNEQ(FieldGroupID, v))
}

// GroupIDIn applies the In predicate on the "group_id" field.
func GroupIDIn(vs ...int) predicate.ProblemJudge {
	return predicate.ProblemJudge(sql.FieldIn(FieldGroupID, vs...))
}

// GroupIDNotIn applies the NotIn predicate on the "group_id" field.
func GroupIDNotIn(vs ...int) predicate.ProblemJudge {
	return predicate.ProblemJudge(sql.FieldNotIn(FieldGroupID, vs...))
}

// GroupIDGT applies the GT predicate on the "group_id" field.
func GroupIDGT(v int) predicate.ProblemJudge {
	return predicate.ProblemJudge(sql.FieldGT(FieldGroupID, v))
}

// GroupIDGTE applies the GTE predicate on the "group_id" field.
func GroupIDGTE(v int) predicate.ProblemJudge {
	return predicate.ProblemJudge(sql.FieldGTE(FieldGroupID, v))
}

// GroupIDLT applies the LT predicate on the "group_id" field.
func GroupIDLT(v int) predicate.ProblemJudge {
	return predicate.ProblemJudge(sql.FieldLT(FieldGroupID, v))
}

// GroupIDLTE applies the LTE predicate on the "group_id" field.
func GroupIDLTE(v int) predicate.ProblemJudge {
	return predicate.ProblemJudge(sql.FieldLTE(FieldGroupID, v))
}

// ProblemIDEQ applies the EQ predicate on the "problem_id" field.
func ProblemIDEQ(v int) predicate.ProblemJudge {
	return predicate.ProblemJudge(sql.FieldEQ(FieldProblemID, v))
}

// ProblemIDNEQ applies the NEQ predicate on the "problem_id" field.
func ProblemIDNEQ(v int) predicate.ProblemJudge {
	return predicate.ProblemJudge(sql.FieldNEQ(FieldProblemID, v))
}

// ProblemIDIn applies the In predicate on the "problem_id" field.
func ProblemIDIn(vs ...int) predicate.ProblemJudge {
	return predicate.ProblemJudge(sql.FieldIn(FieldProblemID, vs...))
}

// ProblemIDNotIn applies the NotIn predicate on the "problem_id" field.
func ProblemIDNotIn(vs ...int) predicate.ProblemJudge {
	return predicate.ProblemJudge(sql.FieldNotIn(FieldProblemID, vs...))
}

// ProblemIDGT applies the GT predicate on the "problem_id" field.
func ProblemIDGT(v int) predicate.ProblemJudge {
	return predicate.ProblemJudge(sql.FieldGT(FieldProblemID, v))
}

// ProblemIDGTE applies the GTE predicate on the "problem_id" field.
func ProblemIDGTE(v int) predicate.ProblemJudge {
	return predicate.ProblemJudge(sql.FieldGTE(FieldProblemID, v))
}

// ProblemIDLT applies the LT predicate on the "problem_id" field.
func ProblemIDLT(v int) predicate.ProblemJudge {
	return predicate.ProblemJudge(sql.FieldLT(FieldProblemID, v))
}

// ProblemIDLTE applies the LTE predicate on the "problem_id" field.
func ProblemIDLTE(v int) predicate.ProblemJudge {
	return predicate.ProblemJudge(sql.FieldLTE(FieldProblemID, v))
}

// HasGroup applies the HasEdge predicate on the "group" edge.
func HasGroup() predicate.ProblemJudge {
	return predicate.ProblemJudge(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, GroupTable, GroupColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupWith applies the HasEdge predicate on the "group" edge with a given conditions (other predicates).
func HasGroupWith(preds ...predicate.Group) predicate.ProblemJudge {
	return predicate.ProblemJudge(func(s *sql.Selector) {
		step := newGroupStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProblem applies the HasEdge predicate on the "problem" edge.
func HasProblem() predicate.ProblemJudge {
	return predicate.ProblemJudge(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProblemTable, ProblemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProblemWith applies the HasEdge predicate on the "problem" edge with a given conditions (other predicates).
func HasProblemWith(preds ...predicate.Problem) predicate.ProblemJudge {
	return predicate.ProblemJudge(func(s *sql.Selector) {
		step := newProblemStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProblemJudge) predicate.ProblemJudge {
	return predicate.ProblemJudge(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProblemJudge) predicate.ProblemJudge {
	return predicate.ProblemJudge(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProblemJudge) predicate.ProblemJudge {
	return predicate.ProblemJudge(sql.NotPredicates(p))
}
