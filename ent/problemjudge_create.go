// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sastoj/ent/group"
	"sastoj/ent/problem"
	"sastoj/ent/problemjudge"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProblemJudgeCreate is the builder for creating a ProblemJudge entity.
type ProblemJudgeCreate struct {
	config
	mutation *ProblemJudgeMutation
	hooks    []Hook
}

// SetGroupID sets the "group_id" field.
func (pjc *ProblemJudgeCreate) SetGroupID(i int) *ProblemJudgeCreate {
	pjc.mutation.SetGroupID(i)
	return pjc
}

// SetProblemID sets the "problem_id" field.
func (pjc *ProblemJudgeCreate) SetProblemID(i int) *ProblemJudgeCreate {
	pjc.mutation.SetProblemID(i)
	return pjc
}

// SetID sets the "id" field.
func (pjc *ProblemJudgeCreate) SetID(i int) *ProblemJudgeCreate {
	pjc.mutation.SetID(i)
	return pjc
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (pjc *ProblemJudgeCreate) SetGroupID(id int) *ProblemJudgeCreate {
	pjc.mutation.SetGroupID(id)
	return pjc
}

// SetNillableGroupID sets the "group" edge to the Group entity by ID if the given value is not nil.
func (pjc *ProblemJudgeCreate) SetNillableGroupID(id *int) *ProblemJudgeCreate {
	if id != nil {
		pjc = pjc.SetGroupID(*id)
	}
	return pjc
}

// SetGroup sets the "group" edge to the Group entity.
func (pjc *ProblemJudgeCreate) SetGroup(g *Group) *ProblemJudgeCreate {
	return pjc.SetGroupID(g.ID)
}

// SetProblemID sets the "problem" edge to the Problem entity by ID.
func (pjc *ProblemJudgeCreate) SetProblemID(id int) *ProblemJudgeCreate {
	pjc.mutation.SetProblemID(id)
	return pjc
}

// SetNillableProblemID sets the "problem" edge to the Problem entity by ID if the given value is not nil.
func (pjc *ProblemJudgeCreate) SetNillableProblemID(id *int) *ProblemJudgeCreate {
	if id != nil {
		pjc = pjc.SetProblemID(*id)
	}
	return pjc
}

// SetProblem sets the "problem" edge to the Problem entity.
func (pjc *ProblemJudgeCreate) SetProblem(p *Problem) *ProblemJudgeCreate {
	return pjc.SetProblemID(p.ID)
}

// Mutation returns the ProblemJudgeMutation object of the builder.
func (pjc *ProblemJudgeCreate) Mutation() *ProblemJudgeMutation {
	return pjc.mutation
}

// Save creates the ProblemJudge in the database.
func (pjc *ProblemJudgeCreate) Save(ctx context.Context) (*ProblemJudge, error) {
	return withHooks(ctx, pjc.sqlSave, pjc.mutation, pjc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pjc *ProblemJudgeCreate) SaveX(ctx context.Context) *ProblemJudge {
	v, err := pjc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pjc *ProblemJudgeCreate) Exec(ctx context.Context) error {
	_, err := pjc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pjc *ProblemJudgeCreate) ExecX(ctx context.Context) {
	if err := pjc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pjc *ProblemJudgeCreate) check() error {
	if _, ok := pjc.mutation.GroupID(); !ok {
		return &ValidationError{Name: "group_id", err: errors.New(`ent: missing required field "ProblemJudge.group_id"`)}
	}
	if v, ok := pjc.mutation.GroupID(); ok {
		if err := problemjudge.GroupIDValidator(v); err != nil {
			return &ValidationError{Name: "group_id", err: fmt.Errorf(`ent: validator failed for field "ProblemJudge.group_id": %w`, err)}
		}
	}
	if _, ok := pjc.mutation.ProblemID(); !ok {
		return &ValidationError{Name: "problem_id", err: errors.New(`ent: missing required field "ProblemJudge.problem_id"`)}
	}
	if v, ok := pjc.mutation.ProblemID(); ok {
		if err := problemjudge.ProblemIDValidator(v); err != nil {
			return &ValidationError{Name: "problem_id", err: fmt.Errorf(`ent: validator failed for field "ProblemJudge.problem_id": %w`, err)}
		}
	}
	return nil
}

func (pjc *ProblemJudgeCreate) sqlSave(ctx context.Context) (*ProblemJudge, error) {
	if err := pjc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pjc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pjc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	pjc.mutation.id = &_node.ID
	pjc.mutation.done = true
	return _node, nil
}

func (pjc *ProblemJudgeCreate) createSpec() (*ProblemJudge, *sqlgraph.CreateSpec) {
	var (
		_node = &ProblemJudge{config: pjc.config}
		_spec = sqlgraph.NewCreateSpec(problemjudge.Table, sqlgraph.NewFieldSpec(problemjudge.FieldID, field.TypeInt))
	)
	if id, ok := pjc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pjc.mutation.GroupID(); ok {
		_spec.SetField(problemjudge.FieldGroupID, field.TypeInt, value)
		_node.GroupID = value
	}
	if value, ok := pjc.mutation.ProblemID(); ok {
		_spec.SetField(problemjudge.FieldProblemID, field.TypeInt, value)
		_node.ProblemID = value
	}
	if nodes := pjc.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   problemjudge.GroupTable,
			Columns: []string{problemjudge.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.problem_judge_group = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pjc.mutation.ProblemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   problemjudge.ProblemTable,
			Columns: []string{problemjudge.ProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.problem_judge_problem = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProblemJudgeCreateBulk is the builder for creating many ProblemJudge entities in bulk.
type ProblemJudgeCreateBulk struct {
	config
	err      error
	builders []*ProblemJudgeCreate
}

// Save creates the ProblemJudge entities in the database.
func (pjcb *ProblemJudgeCreateBulk) Save(ctx context.Context) ([]*ProblemJudge, error) {
	if pjcb.err != nil {
		return nil, pjcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pjcb.builders))
	nodes := make([]*ProblemJudge, len(pjcb.builders))
	mutators := make([]Mutator, len(pjcb.builders))
	for i := range pjcb.builders {
		func(i int, root context.Context) {
			builder := pjcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProblemJudgeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pjcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pjcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pjcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pjcb *ProblemJudgeCreateBulk) SaveX(ctx context.Context) []*ProblemJudge {
	v, err := pjcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pjcb *ProblemJudgeCreateBulk) Exec(ctx context.Context) error {
	_, err := pjcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pjcb *ProblemJudgeCreateBulk) ExecX(ctx context.Context) {
	if err := pjcb.Exec(ctx); err != nil {
		panic(err)
	}
}
