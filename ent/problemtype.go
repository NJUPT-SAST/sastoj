// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"sastoj/ent/problemtype"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ProblemType is the model entity for the ProblemType schema.
type ProblemType struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// SlugName holds the value of the "slug_name" field.
	SlugName string `json:"slug_name,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// SubmissionChannelName holds the value of the "submission_channel_name" field.
	SubmissionChannelName string `json:"submission_channel_name,omitempty"`
	// SelfTestChannelName holds the value of the "self_test_channel_name" field.
	SelfTestChannelName string `json:"self_test_channel_name,omitempty"`
	// Judge holds the value of the "judge" field.
	Judge string `json:"judge,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProblemTypeQuery when eager-loading is set.
	Edges        ProblemTypeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProblemTypeEdges holds the relations/edges for other nodes in the graph.
type ProblemTypeEdges struct {
	// Problems holds the value of the problems edge.
	Problems []*Problem `json:"problems,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProblemsOrErr returns the Problems value or an error if the edge
// was not loaded in eager-loading.
func (e ProblemTypeEdges) ProblemsOrErr() ([]*Problem, error) {
	if e.loadedTypes[0] {
		return e.Problems, nil
	}
	return nil, &NotLoadedError{edge: "problems"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProblemType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case problemtype.FieldID:
			values[i] = new(sql.NullInt64)
		case problemtype.FieldSlugName, problemtype.FieldDisplayName, problemtype.FieldDescription, problemtype.FieldSubmissionChannelName, problemtype.FieldSelfTestChannelName, problemtype.FieldJudge:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProblemType fields.
func (pt *ProblemType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case problemtype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pt.ID = int64(value.Int64)
		case problemtype.FieldSlugName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug_name", values[i])
			} else if value.Valid {
				pt.SlugName = value.String
			}
		case problemtype.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				pt.DisplayName = value.String
			}
		case problemtype.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pt.Description = value.String
			}
		case problemtype.FieldSubmissionChannelName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field submission_channel_name", values[i])
			} else if value.Valid {
				pt.SubmissionChannelName = value.String
			}
		case problemtype.FieldSelfTestChannelName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field self_test_channel_name", values[i])
			} else if value.Valid {
				pt.SelfTestChannelName = value.String
			}
		case problemtype.FieldJudge:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field judge", values[i])
			} else if value.Valid {
				pt.Judge = value.String
			}
		default:
			pt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProblemType.
// This includes values selected through modifiers, order, etc.
func (pt *ProblemType) Value(name string) (ent.Value, error) {
	return pt.selectValues.Get(name)
}

// QueryProblems queries the "problems" edge of the ProblemType entity.
func (pt *ProblemType) QueryProblems() *ProblemQuery {
	return NewProblemTypeClient(pt.config).QueryProblems(pt)
}

// Update returns a builder for updating this ProblemType.
// Note that you need to call ProblemType.Unwrap() before calling this method if this ProblemType
// was returned from a transaction, and the transaction was committed or rolled back.
func (pt *ProblemType) Update() *ProblemTypeUpdateOne {
	return NewProblemTypeClient(pt.config).UpdateOne(pt)
}

// Unwrap unwraps the ProblemType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pt *ProblemType) Unwrap() *ProblemType {
	_tx, ok := pt.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProblemType is not a transactional entity")
	}
	pt.config.driver = _tx.drv
	return pt
}

// String implements the fmt.Stringer.
func (pt *ProblemType) String() string {
	var builder strings.Builder
	builder.WriteString("ProblemType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pt.ID))
	builder.WriteString("slug_name=")
	builder.WriteString(pt.SlugName)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(pt.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pt.Description)
	builder.WriteString(", ")
	builder.WriteString("submission_channel_name=")
	builder.WriteString(pt.SubmissionChannelName)
	builder.WriteString(", ")
	builder.WriteString("self_test_channel_name=")
	builder.WriteString(pt.SelfTestChannelName)
	builder.WriteString(", ")
	builder.WriteString("judge=")
	builder.WriteString(pt.Judge)
	builder.WriteByte(')')
	return builder.String()
}

// ProblemTypes is a parsable slice of ProblemType.
type ProblemTypes []*ProblemType
