// Code generated by ent, DO NOT EDIT.

package problemtype

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the problemtype type in the database.
	Label = "problem_type"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSlugName holds the string denoting the slug_name field in the database.
	FieldSlugName = "slug_name"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldChannelName holds the string denoting the channel_name field in the database.
	FieldChannelName = "channel_name"
	// FieldJudge holds the string denoting the judge field in the database.
	FieldJudge = "judge"
	// EdgeProblems holds the string denoting the problems edge name in mutations.
	EdgeProblems = "problems"
	// Table holds the table name of the problemtype in the database.
	Table = "problem_types"
	// ProblemsTable is the table that holds the problems relation/edge.
	ProblemsTable = "problems"
	// ProblemsInverseTable is the table name for the Problem entity.
	// It exists in this package in order to avoid circular dependency with the "problem" package.
	ProblemsInverseTable = "problems"
	// ProblemsColumn is the table column denoting the problems relation/edge.
	ProblemsColumn = "problem_type_id"
)

// Columns holds all SQL columns for problemtype fields.
var Columns = []string{
	FieldID,
	FieldSlugName,
	FieldDisplayName,
	FieldDescription,
	FieldChannelName,
	FieldJudge,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultJudge holds the default value on creation for the "judge" field.
	DefaultJudge string
)

// OrderOption defines the ordering options for the ProblemType queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySlugName orders the results by the slug_name field.
func BySlugName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlugName, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByChannelName orders the results by the channel_name field.
func ByChannelName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChannelName, opts...).ToFunc()
}

// ByJudge orders the results by the judge field.
func ByJudge(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJudge, opts...).ToFunc()
}

// ByProblemsCount orders the results by problems count.
func ByProblemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProblemsStep(), opts...)
	}
}

// ByProblems orders the results by problems terms.
func ByProblems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProblemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProblemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProblemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProblemsTable, ProblemsColumn),
	)
}
