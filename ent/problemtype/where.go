// Code generated by ent, DO NOT EDIT.

package problemtype

import (
	"sastoj/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldLTE(FieldID, id))
}

// SlugName applies equality check predicate on the "slug_name" field. It's identical to SlugNameEQ.
func SlugName(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldEQ(FieldSlugName, v))
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldEQ(FieldDisplayName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldEQ(FieldDescription, v))
}

// ChannelName applies equality check predicate on the "channel_name" field. It's identical to ChannelNameEQ.
func ChannelName(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldEQ(FieldChannelName, v))
}

// Judge applies equality check predicate on the "judge" field. It's identical to JudgeEQ.
func Judge(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldEQ(FieldJudge, v))
}

// SlugNameEQ applies the EQ predicate on the "slug_name" field.
func SlugNameEQ(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldEQ(FieldSlugName, v))
}

// SlugNameNEQ applies the NEQ predicate on the "slug_name" field.
func SlugNameNEQ(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldNEQ(FieldSlugName, v))
}

// SlugNameIn applies the In predicate on the "slug_name" field.
func SlugNameIn(vs ...string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldIn(FieldSlugName, vs...))
}

// SlugNameNotIn applies the NotIn predicate on the "slug_name" field.
func SlugNameNotIn(vs ...string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldNotIn(FieldSlugName, vs...))
}

// SlugNameGT applies the GT predicate on the "slug_name" field.
func SlugNameGT(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldGT(FieldSlugName, v))
}

// SlugNameGTE applies the GTE predicate on the "slug_name" field.
func SlugNameGTE(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldGTE(FieldSlugName, v))
}

// SlugNameLT applies the LT predicate on the "slug_name" field.
func SlugNameLT(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldLT(FieldSlugName, v))
}

// SlugNameLTE applies the LTE predicate on the "slug_name" field.
func SlugNameLTE(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldLTE(FieldSlugName, v))
}

// SlugNameContains applies the Contains predicate on the "slug_name" field.
func SlugNameContains(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldContains(FieldSlugName, v))
}

// SlugNameHasPrefix applies the HasPrefix predicate on the "slug_name" field.
func SlugNameHasPrefix(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldHasPrefix(FieldSlugName, v))
}

// SlugNameHasSuffix applies the HasSuffix predicate on the "slug_name" field.
func SlugNameHasSuffix(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldHasSuffix(FieldSlugName, v))
}

// SlugNameEqualFold applies the EqualFold predicate on the "slug_name" field.
func SlugNameEqualFold(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldEqualFold(FieldSlugName, v))
}

// SlugNameContainsFold applies the ContainsFold predicate on the "slug_name" field.
func SlugNameContainsFold(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldContainsFold(FieldSlugName, v))
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldNEQ(FieldDisplayName, v))
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldIn(FieldDisplayName, vs...))
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldNotIn(FieldDisplayName, vs...))
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldGT(FieldDisplayName, v))
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldGTE(FieldDisplayName, v))
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldLT(FieldDisplayName, v))
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldLTE(FieldDisplayName, v))
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldContains(FieldDisplayName, v))
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldHasPrefix(FieldDisplayName, v))
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldHasSuffix(FieldDisplayName, v))
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldEqualFold(FieldDisplayName, v))
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldContainsFold(FieldDisplayName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldContainsFold(FieldDescription, v))
}

// ChannelNameEQ applies the EQ predicate on the "channel_name" field.
func ChannelNameEQ(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldEQ(FieldChannelName, v))
}

// ChannelNameNEQ applies the NEQ predicate on the "channel_name" field.
func ChannelNameNEQ(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldNEQ(FieldChannelName, v))
}

// ChannelNameIn applies the In predicate on the "channel_name" field.
func ChannelNameIn(vs ...string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldIn(FieldChannelName, vs...))
}

// ChannelNameNotIn applies the NotIn predicate on the "channel_name" field.
func ChannelNameNotIn(vs ...string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldNotIn(FieldChannelName, vs...))
}

// ChannelNameGT applies the GT predicate on the "channel_name" field.
func ChannelNameGT(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldGT(FieldChannelName, v))
}

// ChannelNameGTE applies the GTE predicate on the "channel_name" field.
func ChannelNameGTE(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldGTE(FieldChannelName, v))
}

// ChannelNameLT applies the LT predicate on the "channel_name" field.
func ChannelNameLT(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldLT(FieldChannelName, v))
}

// ChannelNameLTE applies the LTE predicate on the "channel_name" field.
func ChannelNameLTE(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldLTE(FieldChannelName, v))
}

// ChannelNameContains applies the Contains predicate on the "channel_name" field.
func ChannelNameContains(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldContains(FieldChannelName, v))
}

// ChannelNameHasPrefix applies the HasPrefix predicate on the "channel_name" field.
func ChannelNameHasPrefix(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldHasPrefix(FieldChannelName, v))
}

// ChannelNameHasSuffix applies the HasSuffix predicate on the "channel_name" field.
func ChannelNameHasSuffix(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldHasSuffix(FieldChannelName, v))
}

// ChannelNameEqualFold applies the EqualFold predicate on the "channel_name" field.
func ChannelNameEqualFold(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldEqualFold(FieldChannelName, v))
}

// ChannelNameContainsFold applies the ContainsFold predicate on the "channel_name" field.
func ChannelNameContainsFold(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldContainsFold(FieldChannelName, v))
}

// JudgeEQ applies the EQ predicate on the "judge" field.
func JudgeEQ(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldEQ(FieldJudge, v))
}

// JudgeNEQ applies the NEQ predicate on the "judge" field.
func JudgeNEQ(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldNEQ(FieldJudge, v))
}

// JudgeIn applies the In predicate on the "judge" field.
func JudgeIn(vs ...string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldIn(FieldJudge, vs...))
}

// JudgeNotIn applies the NotIn predicate on the "judge" field.
func JudgeNotIn(vs ...string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldNotIn(FieldJudge, vs...))
}

// JudgeGT applies the GT predicate on the "judge" field.
func JudgeGT(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldGT(FieldJudge, v))
}

// JudgeGTE applies the GTE predicate on the "judge" field.
func JudgeGTE(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldGTE(FieldJudge, v))
}

// JudgeLT applies the LT predicate on the "judge" field.
func JudgeLT(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldLT(FieldJudge, v))
}

// JudgeLTE applies the LTE predicate on the "judge" field.
func JudgeLTE(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldLTE(FieldJudge, v))
}

// JudgeContains applies the Contains predicate on the "judge" field.
func JudgeContains(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldContains(FieldJudge, v))
}

// JudgeHasPrefix applies the HasPrefix predicate on the "judge" field.
func JudgeHasPrefix(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldHasPrefix(FieldJudge, v))
}

// JudgeHasSuffix applies the HasSuffix predicate on the "judge" field.
func JudgeHasSuffix(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldHasSuffix(FieldJudge, v))
}

// JudgeEqualFold applies the EqualFold predicate on the "judge" field.
func JudgeEqualFold(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldEqualFold(FieldJudge, v))
}

// JudgeContainsFold applies the ContainsFold predicate on the "judge" field.
func JudgeContainsFold(v string) predicate.ProblemType {
	return predicate.ProblemType(sql.FieldContainsFold(FieldJudge, v))
}

// HasProblems applies the HasEdge predicate on the "problems" edge.
func HasProblems() predicate.ProblemType {
	return predicate.ProblemType(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProblemsTable, ProblemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProblemsWith applies the HasEdge predicate on the "problems" edge with a given conditions (other predicates).
func HasProblemsWith(preds ...predicate.Problem) predicate.ProblemType {
	return predicate.ProblemType(func(s *sql.Selector) {
		step := newProblemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProblemType) predicate.ProblemType {
	return predicate.ProblemType(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProblemType) predicate.ProblemType {
	return predicate.ProblemType(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProblemType) predicate.ProblemType {
	return predicate.ProblemType(sql.NotPredicates(p))
}
