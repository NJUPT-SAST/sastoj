// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sastoj/ent/problem"
	"sastoj/ent/problemtype"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProblemTypeCreate is the builder for creating a ProblemType entity.
type ProblemTypeCreate struct {
	config
	mutation *ProblemTypeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSlugName sets the "slug_name" field.
func (ptc *ProblemTypeCreate) SetSlugName(s string) *ProblemTypeCreate {
	ptc.mutation.SetSlugName(s)
	return ptc
}

// SetDisplayName sets the "display_name" field.
func (ptc *ProblemTypeCreate) SetDisplayName(s string) *ProblemTypeCreate {
	ptc.mutation.SetDisplayName(s)
	return ptc
}

// SetDescription sets the "description" field.
func (ptc *ProblemTypeCreate) SetDescription(s string) *ProblemTypeCreate {
	ptc.mutation.SetDescription(s)
	return ptc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ptc *ProblemTypeCreate) SetNillableDescription(s *string) *ProblemTypeCreate {
	if s != nil {
		ptc.SetDescription(*s)
	}
	return ptc
}

// SetSubmissionChannelName sets the "submission_channel_name" field.
func (ptc *ProblemTypeCreate) SetSubmissionChannelName(s string) *ProblemTypeCreate {
	ptc.mutation.SetSubmissionChannelName(s)
	return ptc
}

// SetNillableSubmissionChannelName sets the "submission_channel_name" field if the given value is not nil.
func (ptc *ProblemTypeCreate) SetNillableSubmissionChannelName(s *string) *ProblemTypeCreate {
	if s != nil {
		ptc.SetSubmissionChannelName(*s)
	}
	return ptc
}

// SetSelfTestChannelName sets the "self_test_channel_name" field.
func (ptc *ProblemTypeCreate) SetSelfTestChannelName(s string) *ProblemTypeCreate {
	ptc.mutation.SetSelfTestChannelName(s)
	return ptc
}

// SetNillableSelfTestChannelName sets the "self_test_channel_name" field if the given value is not nil.
func (ptc *ProblemTypeCreate) SetNillableSelfTestChannelName(s *string) *ProblemTypeCreate {
	if s != nil {
		ptc.SetSelfTestChannelName(*s)
	}
	return ptc
}

// SetJudge sets the "judge" field.
func (ptc *ProblemTypeCreate) SetJudge(s string) *ProblemTypeCreate {
	ptc.mutation.SetJudge(s)
	return ptc
}

// SetNillableJudge sets the "judge" field if the given value is not nil.
func (ptc *ProblemTypeCreate) SetNillableJudge(s *string) *ProblemTypeCreate {
	if s != nil {
		ptc.SetJudge(*s)
	}
	return ptc
}

// SetID sets the "id" field.
func (ptc *ProblemTypeCreate) SetID(i int64) *ProblemTypeCreate {
	ptc.mutation.SetID(i)
	return ptc
}

// AddProblemIDs adds the "problems" edge to the Problem entity by IDs.
func (ptc *ProblemTypeCreate) AddProblemIDs(ids ...int64) *ProblemTypeCreate {
	ptc.mutation.AddProblemIDs(ids...)
	return ptc
}

// AddProblems adds the "problems" edges to the Problem entity.
func (ptc *ProblemTypeCreate) AddProblems(p ...*Problem) *ProblemTypeCreate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptc.AddProblemIDs(ids...)
}

// Mutation returns the ProblemTypeMutation object of the builder.
func (ptc *ProblemTypeCreate) Mutation() *ProblemTypeMutation {
	return ptc.mutation
}

// Save creates the ProblemType in the database.
func (ptc *ProblemTypeCreate) Save(ctx context.Context) (*ProblemType, error) {
	ptc.defaults()
	return withHooks(ctx, ptc.sqlSave, ptc.mutation, ptc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ptc *ProblemTypeCreate) SaveX(ctx context.Context) *ProblemType {
	v, err := ptc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptc *ProblemTypeCreate) Exec(ctx context.Context) error {
	_, err := ptc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptc *ProblemTypeCreate) ExecX(ctx context.Context) {
	if err := ptc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptc *ProblemTypeCreate) defaults() {
	if _, ok := ptc.mutation.Description(); !ok {
		v := problemtype.DefaultDescription
		ptc.mutation.SetDescription(v)
	}
	if _, ok := ptc.mutation.SubmissionChannelName(); !ok {
		v := problemtype.DefaultSubmissionChannelName
		ptc.mutation.SetSubmissionChannelName(v)
	}
	if _, ok := ptc.mutation.SelfTestChannelName(); !ok {
		v := problemtype.DefaultSelfTestChannelName
		ptc.mutation.SetSelfTestChannelName(v)
	}
	if _, ok := ptc.mutation.Judge(); !ok {
		v := problemtype.DefaultJudge
		ptc.mutation.SetJudge(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptc *ProblemTypeCreate) check() error {
	if _, ok := ptc.mutation.SlugName(); !ok {
		return &ValidationError{Name: "slug_name", err: errors.New(`ent: missing required field "ProblemType.slug_name"`)}
	}
	if _, ok := ptc.mutation.DisplayName(); !ok {
		return &ValidationError{Name: "display_name", err: errors.New(`ent: missing required field "ProblemType.display_name"`)}
	}
	if _, ok := ptc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "ProblemType.description"`)}
	}
	if _, ok := ptc.mutation.SubmissionChannelName(); !ok {
		return &ValidationError{Name: "submission_channel_name", err: errors.New(`ent: missing required field "ProblemType.submission_channel_name"`)}
	}
	if _, ok := ptc.mutation.SelfTestChannelName(); !ok {
		return &ValidationError{Name: "self_test_channel_name", err: errors.New(`ent: missing required field "ProblemType.self_test_channel_name"`)}
	}
	if _, ok := ptc.mutation.Judge(); !ok {
		return &ValidationError{Name: "judge", err: errors.New(`ent: missing required field "ProblemType.judge"`)}
	}
	return nil
}

func (ptc *ProblemTypeCreate) sqlSave(ctx context.Context) (*ProblemType, error) {
	if err := ptc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ptc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ptc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	ptc.mutation.id = &_node.ID
	ptc.mutation.done = true
	return _node, nil
}

func (ptc *ProblemTypeCreate) createSpec() (*ProblemType, *sqlgraph.CreateSpec) {
	var (
		_node = &ProblemType{config: ptc.config}
		_spec = sqlgraph.NewCreateSpec(problemtype.Table, sqlgraph.NewFieldSpec(problemtype.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = ptc.conflict
	if id, ok := ptc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ptc.mutation.SlugName(); ok {
		_spec.SetField(problemtype.FieldSlugName, field.TypeString, value)
		_node.SlugName = value
	}
	if value, ok := ptc.mutation.DisplayName(); ok {
		_spec.SetField(problemtype.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := ptc.mutation.Description(); ok {
		_spec.SetField(problemtype.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ptc.mutation.SubmissionChannelName(); ok {
		_spec.SetField(problemtype.FieldSubmissionChannelName, field.TypeString, value)
		_node.SubmissionChannelName = value
	}
	if value, ok := ptc.mutation.SelfTestChannelName(); ok {
		_spec.SetField(problemtype.FieldSelfTestChannelName, field.TypeString, value)
		_node.SelfTestChannelName = value
	}
	if value, ok := ptc.mutation.Judge(); ok {
		_spec.SetField(problemtype.FieldJudge, field.TypeString, value)
		_node.Judge = value
	}
	if nodes := ptc.mutation.ProblemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problemtype.ProblemsTable,
			Columns: []string{problemtype.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProblemType.Create().
//		SetSlugName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProblemTypeUpsert) {
//			SetSlugName(v+v).
//		}).
//		Exec(ctx)
func (ptc *ProblemTypeCreate) OnConflict(opts ...sql.ConflictOption) *ProblemTypeUpsertOne {
	ptc.conflict = opts
	return &ProblemTypeUpsertOne{
		create: ptc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProblemType.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ptc *ProblemTypeCreate) OnConflictColumns(columns ...string) *ProblemTypeUpsertOne {
	ptc.conflict = append(ptc.conflict, sql.ConflictColumns(columns...))
	return &ProblemTypeUpsertOne{
		create: ptc,
	}
}

type (
	// ProblemTypeUpsertOne is the builder for "upsert"-ing
	//  one ProblemType node.
	ProblemTypeUpsertOne struct {
		create *ProblemTypeCreate
	}

	// ProblemTypeUpsert is the "OnConflict" setter.
	ProblemTypeUpsert struct {
		*sql.UpdateSet
	}
)

// SetSlugName sets the "slug_name" field.
func (u *ProblemTypeUpsert) SetSlugName(v string) *ProblemTypeUpsert {
	u.Set(problemtype.FieldSlugName, v)
	return u
}

// UpdateSlugName sets the "slug_name" field to the value that was provided on create.
func (u *ProblemTypeUpsert) UpdateSlugName() *ProblemTypeUpsert {
	u.SetExcluded(problemtype.FieldSlugName)
	return u
}

// SetDisplayName sets the "display_name" field.
func (u *ProblemTypeUpsert) SetDisplayName(v string) *ProblemTypeUpsert {
	u.Set(problemtype.FieldDisplayName, v)
	return u
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *ProblemTypeUpsert) UpdateDisplayName() *ProblemTypeUpsert {
	u.SetExcluded(problemtype.FieldDisplayName)
	return u
}

// SetDescription sets the "description" field.
func (u *ProblemTypeUpsert) SetDescription(v string) *ProblemTypeUpsert {
	u.Set(problemtype.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ProblemTypeUpsert) UpdateDescription() *ProblemTypeUpsert {
	u.SetExcluded(problemtype.FieldDescription)
	return u
}

// SetSubmissionChannelName sets the "submission_channel_name" field.
func (u *ProblemTypeUpsert) SetSubmissionChannelName(v string) *ProblemTypeUpsert {
	u.Set(problemtype.FieldSubmissionChannelName, v)
	return u
}

// UpdateSubmissionChannelName sets the "submission_channel_name" field to the value that was provided on create.
func (u *ProblemTypeUpsert) UpdateSubmissionChannelName() *ProblemTypeUpsert {
	u.SetExcluded(problemtype.FieldSubmissionChannelName)
	return u
}

// SetSelfTestChannelName sets the "self_test_channel_name" field.
func (u *ProblemTypeUpsert) SetSelfTestChannelName(v string) *ProblemTypeUpsert {
	u.Set(problemtype.FieldSelfTestChannelName, v)
	return u
}

// UpdateSelfTestChannelName sets the "self_test_channel_name" field to the value that was provided on create.
func (u *ProblemTypeUpsert) UpdateSelfTestChannelName() *ProblemTypeUpsert {
	u.SetExcluded(problemtype.FieldSelfTestChannelName)
	return u
}

// SetJudge sets the "judge" field.
func (u *ProblemTypeUpsert) SetJudge(v string) *ProblemTypeUpsert {
	u.Set(problemtype.FieldJudge, v)
	return u
}

// UpdateJudge sets the "judge" field to the value that was provided on create.
func (u *ProblemTypeUpsert) UpdateJudge() *ProblemTypeUpsert {
	u.SetExcluded(problemtype.FieldJudge)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ProblemType.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(problemtype.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProblemTypeUpsertOne) UpdateNewValues() *ProblemTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(problemtype.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProblemType.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProblemTypeUpsertOne) Ignore() *ProblemTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProblemTypeUpsertOne) DoNothing() *ProblemTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProblemTypeCreate.OnConflict
// documentation for more info.
func (u *ProblemTypeUpsertOne) Update(set func(*ProblemTypeUpsert)) *ProblemTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProblemTypeUpsert{UpdateSet: update})
	}))
	return u
}

// SetSlugName sets the "slug_name" field.
func (u *ProblemTypeUpsertOne) SetSlugName(v string) *ProblemTypeUpsertOne {
	return u.Update(func(s *ProblemTypeUpsert) {
		s.SetSlugName(v)
	})
}

// UpdateSlugName sets the "slug_name" field to the value that was provided on create.
func (u *ProblemTypeUpsertOne) UpdateSlugName() *ProblemTypeUpsertOne {
	return u.Update(func(s *ProblemTypeUpsert) {
		s.UpdateSlugName()
	})
}

// SetDisplayName sets the "display_name" field.
func (u *ProblemTypeUpsertOne) SetDisplayName(v string) *ProblemTypeUpsertOne {
	return u.Update(func(s *ProblemTypeUpsert) {
		s.SetDisplayName(v)
	})
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *ProblemTypeUpsertOne) UpdateDisplayName() *ProblemTypeUpsertOne {
	return u.Update(func(s *ProblemTypeUpsert) {
		s.UpdateDisplayName()
	})
}

// SetDescription sets the "description" field.
func (u *ProblemTypeUpsertOne) SetDescription(v string) *ProblemTypeUpsertOne {
	return u.Update(func(s *ProblemTypeUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ProblemTypeUpsertOne) UpdateDescription() *ProblemTypeUpsertOne {
	return u.Update(func(s *ProblemTypeUpsert) {
		s.UpdateDescription()
	})
}

// SetSubmissionChannelName sets the "submission_channel_name" field.
func (u *ProblemTypeUpsertOne) SetSubmissionChannelName(v string) *ProblemTypeUpsertOne {
	return u.Update(func(s *ProblemTypeUpsert) {
		s.SetSubmissionChannelName(v)
	})
}

// UpdateSubmissionChannelName sets the "submission_channel_name" field to the value that was provided on create.
func (u *ProblemTypeUpsertOne) UpdateSubmissionChannelName() *ProblemTypeUpsertOne {
	return u.Update(func(s *ProblemTypeUpsert) {
		s.UpdateSubmissionChannelName()
	})
}

// SetSelfTestChannelName sets the "self_test_channel_name" field.
func (u *ProblemTypeUpsertOne) SetSelfTestChannelName(v string) *ProblemTypeUpsertOne {
	return u.Update(func(s *ProblemTypeUpsert) {
		s.SetSelfTestChannelName(v)
	})
}

// UpdateSelfTestChannelName sets the "self_test_channel_name" field to the value that was provided on create.
func (u *ProblemTypeUpsertOne) UpdateSelfTestChannelName() *ProblemTypeUpsertOne {
	return u.Update(func(s *ProblemTypeUpsert) {
		s.UpdateSelfTestChannelName()
	})
}

// SetJudge sets the "judge" field.
func (u *ProblemTypeUpsertOne) SetJudge(v string) *ProblemTypeUpsertOne {
	return u.Update(func(s *ProblemTypeUpsert) {
		s.SetJudge(v)
	})
}

// UpdateJudge sets the "judge" field to the value that was provided on create.
func (u *ProblemTypeUpsertOne) UpdateJudge() *ProblemTypeUpsertOne {
	return u.Update(func(s *ProblemTypeUpsert) {
		s.UpdateJudge()
	})
}

// Exec executes the query.
func (u *ProblemTypeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProblemTypeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProblemTypeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProblemTypeUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProblemTypeUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProblemTypeCreateBulk is the builder for creating many ProblemType entities in bulk.
type ProblemTypeCreateBulk struct {
	config
	err      error
	builders []*ProblemTypeCreate
	conflict []sql.ConflictOption
}

// Save creates the ProblemType entities in the database.
func (ptcb *ProblemTypeCreateBulk) Save(ctx context.Context) ([]*ProblemType, error) {
	if ptcb.err != nil {
		return nil, ptcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ptcb.builders))
	nodes := make([]*ProblemType, len(ptcb.builders))
	mutators := make([]Mutator, len(ptcb.builders))
	for i := range ptcb.builders {
		func(i int, root context.Context) {
			builder := ptcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProblemTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ptcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ptcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ptcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ptcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ptcb *ProblemTypeCreateBulk) SaveX(ctx context.Context) []*ProblemType {
	v, err := ptcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptcb *ProblemTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := ptcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptcb *ProblemTypeCreateBulk) ExecX(ctx context.Context) {
	if err := ptcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProblemType.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProblemTypeUpsert) {
//			SetSlugName(v+v).
//		}).
//		Exec(ctx)
func (ptcb *ProblemTypeCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProblemTypeUpsertBulk {
	ptcb.conflict = opts
	return &ProblemTypeUpsertBulk{
		create: ptcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProblemType.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ptcb *ProblemTypeCreateBulk) OnConflictColumns(columns ...string) *ProblemTypeUpsertBulk {
	ptcb.conflict = append(ptcb.conflict, sql.ConflictColumns(columns...))
	return &ProblemTypeUpsertBulk{
		create: ptcb,
	}
}

// ProblemTypeUpsertBulk is the builder for "upsert"-ing
// a bulk of ProblemType nodes.
type ProblemTypeUpsertBulk struct {
	create *ProblemTypeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ProblemType.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(problemtype.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProblemTypeUpsertBulk) UpdateNewValues() *ProblemTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(problemtype.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProblemType.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProblemTypeUpsertBulk) Ignore() *ProblemTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProblemTypeUpsertBulk) DoNothing() *ProblemTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProblemTypeCreateBulk.OnConflict
// documentation for more info.
func (u *ProblemTypeUpsertBulk) Update(set func(*ProblemTypeUpsert)) *ProblemTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProblemTypeUpsert{UpdateSet: update})
	}))
	return u
}

// SetSlugName sets the "slug_name" field.
func (u *ProblemTypeUpsertBulk) SetSlugName(v string) *ProblemTypeUpsertBulk {
	return u.Update(func(s *ProblemTypeUpsert) {
		s.SetSlugName(v)
	})
}

// UpdateSlugName sets the "slug_name" field to the value that was provided on create.
func (u *ProblemTypeUpsertBulk) UpdateSlugName() *ProblemTypeUpsertBulk {
	return u.Update(func(s *ProblemTypeUpsert) {
		s.UpdateSlugName()
	})
}

// SetDisplayName sets the "display_name" field.
func (u *ProblemTypeUpsertBulk) SetDisplayName(v string) *ProblemTypeUpsertBulk {
	return u.Update(func(s *ProblemTypeUpsert) {
		s.SetDisplayName(v)
	})
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *ProblemTypeUpsertBulk) UpdateDisplayName() *ProblemTypeUpsertBulk {
	return u.Update(func(s *ProblemTypeUpsert) {
		s.UpdateDisplayName()
	})
}

// SetDescription sets the "description" field.
func (u *ProblemTypeUpsertBulk) SetDescription(v string) *ProblemTypeUpsertBulk {
	return u.Update(func(s *ProblemTypeUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ProblemTypeUpsertBulk) UpdateDescription() *ProblemTypeUpsertBulk {
	return u.Update(func(s *ProblemTypeUpsert) {
		s.UpdateDescription()
	})
}

// SetSubmissionChannelName sets the "submission_channel_name" field.
func (u *ProblemTypeUpsertBulk) SetSubmissionChannelName(v string) *ProblemTypeUpsertBulk {
	return u.Update(func(s *ProblemTypeUpsert) {
		s.SetSubmissionChannelName(v)
	})
}

// UpdateSubmissionChannelName sets the "submission_channel_name" field to the value that was provided on create.
func (u *ProblemTypeUpsertBulk) UpdateSubmissionChannelName() *ProblemTypeUpsertBulk {
	return u.Update(func(s *ProblemTypeUpsert) {
		s.UpdateSubmissionChannelName()
	})
}

// SetSelfTestChannelName sets the "self_test_channel_name" field.
func (u *ProblemTypeUpsertBulk) SetSelfTestChannelName(v string) *ProblemTypeUpsertBulk {
	return u.Update(func(s *ProblemTypeUpsert) {
		s.SetSelfTestChannelName(v)
	})
}

// UpdateSelfTestChannelName sets the "self_test_channel_name" field to the value that was provided on create.
func (u *ProblemTypeUpsertBulk) UpdateSelfTestChannelName() *ProblemTypeUpsertBulk {
	return u.Update(func(s *ProblemTypeUpsert) {
		s.UpdateSelfTestChannelName()
	})
}

// SetJudge sets the "judge" field.
func (u *ProblemTypeUpsertBulk) SetJudge(v string) *ProblemTypeUpsertBulk {
	return u.Update(func(s *ProblemTypeUpsert) {
		s.SetJudge(v)
	})
}

// UpdateJudge sets the "judge" field to the value that was provided on create.
func (u *ProblemTypeUpsertBulk) UpdateJudge() *ProblemTypeUpsertBulk {
	return u.Update(func(s *ProblemTypeUpsert) {
		s.UpdateJudge()
	})
}

// Exec executes the query.
func (u *ProblemTypeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ProblemTypeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProblemTypeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProblemTypeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
