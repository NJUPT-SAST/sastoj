// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sastoj/ent/predicate"
	"sastoj/ent/problem"
	"sastoj/ent/problemtype"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProblemTypeUpdate is the builder for updating ProblemType entities.
type ProblemTypeUpdate struct {
	config
	hooks    []Hook
	mutation *ProblemTypeMutation
}

// Where appends a list predicates to the ProblemTypeUpdate builder.
func (ptu *ProblemTypeUpdate) Where(ps ...predicate.ProblemType) *ProblemTypeUpdate {
	ptu.mutation.Where(ps...)
	return ptu
}

// SetSlugName sets the "slug_name" field.
func (ptu *ProblemTypeUpdate) SetSlugName(s string) *ProblemTypeUpdate {
	ptu.mutation.SetSlugName(s)
	return ptu
}

// SetNillableSlugName sets the "slug_name" field if the given value is not nil.
func (ptu *ProblemTypeUpdate) SetNillableSlugName(s *string) *ProblemTypeUpdate {
	if s != nil {
		ptu.SetSlugName(*s)
	}
	return ptu
}

// SetDisplayName sets the "display_name" field.
func (ptu *ProblemTypeUpdate) SetDisplayName(s string) *ProblemTypeUpdate {
	ptu.mutation.SetDisplayName(s)
	return ptu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (ptu *ProblemTypeUpdate) SetNillableDisplayName(s *string) *ProblemTypeUpdate {
	if s != nil {
		ptu.SetDisplayName(*s)
	}
	return ptu
}

// SetDescription sets the "description" field.
func (ptu *ProblemTypeUpdate) SetDescription(s string) *ProblemTypeUpdate {
	ptu.mutation.SetDescription(s)
	return ptu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ptu *ProblemTypeUpdate) SetNillableDescription(s *string) *ProblemTypeUpdate {
	if s != nil {
		ptu.SetDescription(*s)
	}
	return ptu
}

// SetSubmissionChannelName sets the "submission_channel_name" field.
func (ptu *ProblemTypeUpdate) SetSubmissionChannelName(s string) *ProblemTypeUpdate {
	ptu.mutation.SetSubmissionChannelName(s)
	return ptu
}

// SetNillableSubmissionChannelName sets the "submission_channel_name" field if the given value is not nil.
func (ptu *ProblemTypeUpdate) SetNillableSubmissionChannelName(s *string) *ProblemTypeUpdate {
	if s != nil {
		ptu.SetSubmissionChannelName(*s)
	}
	return ptu
}

// SetSelfTestChannelName sets the "self_test_channel_name" field.
func (ptu *ProblemTypeUpdate) SetSelfTestChannelName(s string) *ProblemTypeUpdate {
	ptu.mutation.SetSelfTestChannelName(s)
	return ptu
}

// SetNillableSelfTestChannelName sets the "self_test_channel_name" field if the given value is not nil.
func (ptu *ProblemTypeUpdate) SetNillableSelfTestChannelName(s *string) *ProblemTypeUpdate {
	if s != nil {
		ptu.SetSelfTestChannelName(*s)
	}
	return ptu
}

// SetJudge sets the "judge" field.
func (ptu *ProblemTypeUpdate) SetJudge(s string) *ProblemTypeUpdate {
	ptu.mutation.SetJudge(s)
	return ptu
}

// SetNillableJudge sets the "judge" field if the given value is not nil.
func (ptu *ProblemTypeUpdate) SetNillableJudge(s *string) *ProblemTypeUpdate {
	if s != nil {
		ptu.SetJudge(*s)
	}
	return ptu
}

// AddProblemIDs adds the "problems" edge to the Problem entity by IDs.
func (ptu *ProblemTypeUpdate) AddProblemIDs(ids ...int64) *ProblemTypeUpdate {
	ptu.mutation.AddProblemIDs(ids...)
	return ptu
}

// AddProblems adds the "problems" edges to the Problem entity.
func (ptu *ProblemTypeUpdate) AddProblems(p ...*Problem) *ProblemTypeUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptu.AddProblemIDs(ids...)
}

// Mutation returns the ProblemTypeMutation object of the builder.
func (ptu *ProblemTypeUpdate) Mutation() *ProblemTypeMutation {
	return ptu.mutation
}

// ClearProblems clears all "problems" edges to the Problem entity.
func (ptu *ProblemTypeUpdate) ClearProblems() *ProblemTypeUpdate {
	ptu.mutation.ClearProblems()
	return ptu
}

// RemoveProblemIDs removes the "problems" edge to Problem entities by IDs.
func (ptu *ProblemTypeUpdate) RemoveProblemIDs(ids ...int64) *ProblemTypeUpdate {
	ptu.mutation.RemoveProblemIDs(ids...)
	return ptu
}

// RemoveProblems removes "problems" edges to Problem entities.
func (ptu *ProblemTypeUpdate) RemoveProblems(p ...*Problem) *ProblemTypeUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptu.RemoveProblemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ptu *ProblemTypeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ptu.sqlSave, ptu.mutation, ptu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptu *ProblemTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := ptu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ptu *ProblemTypeUpdate) Exec(ctx context.Context) error {
	_, err := ptu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptu *ProblemTypeUpdate) ExecX(ctx context.Context) {
	if err := ptu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ptu *ProblemTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(problemtype.Table, problemtype.Columns, sqlgraph.NewFieldSpec(problemtype.FieldID, field.TypeInt64))
	if ps := ptu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptu.mutation.SlugName(); ok {
		_spec.SetField(problemtype.FieldSlugName, field.TypeString, value)
	}
	if value, ok := ptu.mutation.DisplayName(); ok {
		_spec.SetField(problemtype.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := ptu.mutation.Description(); ok {
		_spec.SetField(problemtype.FieldDescription, field.TypeString, value)
	}
	if value, ok := ptu.mutation.SubmissionChannelName(); ok {
		_spec.SetField(problemtype.FieldSubmissionChannelName, field.TypeString, value)
	}
	if value, ok := ptu.mutation.SelfTestChannelName(); ok {
		_spec.SetField(problemtype.FieldSelfTestChannelName, field.TypeString, value)
	}
	if value, ok := ptu.mutation.Judge(); ok {
		_spec.SetField(problemtype.FieldJudge, field.TypeString, value)
	}
	if ptu.mutation.ProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problemtype.ProblemsTable,
			Columns: []string{problemtype.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.RemovedProblemsIDs(); len(nodes) > 0 && !ptu.mutation.ProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problemtype.ProblemsTable,
			Columns: []string{problemtype.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.ProblemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problemtype.ProblemsTable,
			Columns: []string{problemtype.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ptu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{problemtype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ptu.mutation.done = true
	return n, nil
}

// ProblemTypeUpdateOne is the builder for updating a single ProblemType entity.
type ProblemTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProblemTypeMutation
}

// SetSlugName sets the "slug_name" field.
func (ptuo *ProblemTypeUpdateOne) SetSlugName(s string) *ProblemTypeUpdateOne {
	ptuo.mutation.SetSlugName(s)
	return ptuo
}

// SetNillableSlugName sets the "slug_name" field if the given value is not nil.
func (ptuo *ProblemTypeUpdateOne) SetNillableSlugName(s *string) *ProblemTypeUpdateOne {
	if s != nil {
		ptuo.SetSlugName(*s)
	}
	return ptuo
}

// SetDisplayName sets the "display_name" field.
func (ptuo *ProblemTypeUpdateOne) SetDisplayName(s string) *ProblemTypeUpdateOne {
	ptuo.mutation.SetDisplayName(s)
	return ptuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (ptuo *ProblemTypeUpdateOne) SetNillableDisplayName(s *string) *ProblemTypeUpdateOne {
	if s != nil {
		ptuo.SetDisplayName(*s)
	}
	return ptuo
}

// SetDescription sets the "description" field.
func (ptuo *ProblemTypeUpdateOne) SetDescription(s string) *ProblemTypeUpdateOne {
	ptuo.mutation.SetDescription(s)
	return ptuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ptuo *ProblemTypeUpdateOne) SetNillableDescription(s *string) *ProblemTypeUpdateOne {
	if s != nil {
		ptuo.SetDescription(*s)
	}
	return ptuo
}

// SetSubmissionChannelName sets the "submission_channel_name" field.
func (ptuo *ProblemTypeUpdateOne) SetSubmissionChannelName(s string) *ProblemTypeUpdateOne {
	ptuo.mutation.SetSubmissionChannelName(s)
	return ptuo
}

// SetNillableSubmissionChannelName sets the "submission_channel_name" field if the given value is not nil.
func (ptuo *ProblemTypeUpdateOne) SetNillableSubmissionChannelName(s *string) *ProblemTypeUpdateOne {
	if s != nil {
		ptuo.SetSubmissionChannelName(*s)
	}
	return ptuo
}

// SetSelfTestChannelName sets the "self_test_channel_name" field.
func (ptuo *ProblemTypeUpdateOne) SetSelfTestChannelName(s string) *ProblemTypeUpdateOne {
	ptuo.mutation.SetSelfTestChannelName(s)
	return ptuo
}

// SetNillableSelfTestChannelName sets the "self_test_channel_name" field if the given value is not nil.
func (ptuo *ProblemTypeUpdateOne) SetNillableSelfTestChannelName(s *string) *ProblemTypeUpdateOne {
	if s != nil {
		ptuo.SetSelfTestChannelName(*s)
	}
	return ptuo
}

// SetJudge sets the "judge" field.
func (ptuo *ProblemTypeUpdateOne) SetJudge(s string) *ProblemTypeUpdateOne {
	ptuo.mutation.SetJudge(s)
	return ptuo
}

// SetNillableJudge sets the "judge" field if the given value is not nil.
func (ptuo *ProblemTypeUpdateOne) SetNillableJudge(s *string) *ProblemTypeUpdateOne {
	if s != nil {
		ptuo.SetJudge(*s)
	}
	return ptuo
}

// AddProblemIDs adds the "problems" edge to the Problem entity by IDs.
func (ptuo *ProblemTypeUpdateOne) AddProblemIDs(ids ...int64) *ProblemTypeUpdateOne {
	ptuo.mutation.AddProblemIDs(ids...)
	return ptuo
}

// AddProblems adds the "problems" edges to the Problem entity.
func (ptuo *ProblemTypeUpdateOne) AddProblems(p ...*Problem) *ProblemTypeUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptuo.AddProblemIDs(ids...)
}

// Mutation returns the ProblemTypeMutation object of the builder.
func (ptuo *ProblemTypeUpdateOne) Mutation() *ProblemTypeMutation {
	return ptuo.mutation
}

// ClearProblems clears all "problems" edges to the Problem entity.
func (ptuo *ProblemTypeUpdateOne) ClearProblems() *ProblemTypeUpdateOne {
	ptuo.mutation.ClearProblems()
	return ptuo
}

// RemoveProblemIDs removes the "problems" edge to Problem entities by IDs.
func (ptuo *ProblemTypeUpdateOne) RemoveProblemIDs(ids ...int64) *ProblemTypeUpdateOne {
	ptuo.mutation.RemoveProblemIDs(ids...)
	return ptuo
}

// RemoveProblems removes "problems" edges to Problem entities.
func (ptuo *ProblemTypeUpdateOne) RemoveProblems(p ...*Problem) *ProblemTypeUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptuo.RemoveProblemIDs(ids...)
}

// Where appends a list predicates to the ProblemTypeUpdate builder.
func (ptuo *ProblemTypeUpdateOne) Where(ps ...predicate.ProblemType) *ProblemTypeUpdateOne {
	ptuo.mutation.Where(ps...)
	return ptuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ptuo *ProblemTypeUpdateOne) Select(field string, fields ...string) *ProblemTypeUpdateOne {
	ptuo.fields = append([]string{field}, fields...)
	return ptuo
}

// Save executes the query and returns the updated ProblemType entity.
func (ptuo *ProblemTypeUpdateOne) Save(ctx context.Context) (*ProblemType, error) {
	return withHooks(ctx, ptuo.sqlSave, ptuo.mutation, ptuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptuo *ProblemTypeUpdateOne) SaveX(ctx context.Context) *ProblemType {
	node, err := ptuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ptuo *ProblemTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := ptuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptuo *ProblemTypeUpdateOne) ExecX(ctx context.Context) {
	if err := ptuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ptuo *ProblemTypeUpdateOne) sqlSave(ctx context.Context) (_node *ProblemType, err error) {
	_spec := sqlgraph.NewUpdateSpec(problemtype.Table, problemtype.Columns, sqlgraph.NewFieldSpec(problemtype.FieldID, field.TypeInt64))
	id, ok := ptuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProblemType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ptuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, problemtype.FieldID)
		for _, f := range fields {
			if !problemtype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != problemtype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ptuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptuo.mutation.SlugName(); ok {
		_spec.SetField(problemtype.FieldSlugName, field.TypeString, value)
	}
	if value, ok := ptuo.mutation.DisplayName(); ok {
		_spec.SetField(problemtype.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := ptuo.mutation.Description(); ok {
		_spec.SetField(problemtype.FieldDescription, field.TypeString, value)
	}
	if value, ok := ptuo.mutation.SubmissionChannelName(); ok {
		_spec.SetField(problemtype.FieldSubmissionChannelName, field.TypeString, value)
	}
	if value, ok := ptuo.mutation.SelfTestChannelName(); ok {
		_spec.SetField(problemtype.FieldSelfTestChannelName, field.TypeString, value)
	}
	if value, ok := ptuo.mutation.Judge(); ok {
		_spec.SetField(problemtype.FieldJudge, field.TypeString, value)
	}
	if ptuo.mutation.ProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problemtype.ProblemsTable,
			Columns: []string{problemtype.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.RemovedProblemsIDs(); len(nodes) > 0 && !ptuo.mutation.ProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problemtype.ProblemsTable,
			Columns: []string{problemtype.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.ProblemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problemtype.ProblemsTable,
			Columns: []string{problemtype.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProblemType{config: ptuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ptuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{problemtype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ptuo.mutation.done = true
	return _node, nil
}
