// Code generated by ent, DO NOT EDIT.

package ent

import (
	"sastoj/ent/contest"
	"sastoj/ent/group"
	"sastoj/ent/loginsession"
	"sastoj/ent/problem"
	"sastoj/ent/problemcase"
	"sastoj/ent/problemjudge"
	"sastoj/ent/schema"
	"sastoj/ent/submit"
	"sastoj/ent/submitcase"
	"sastoj/ent/submitjudge"
	"sastoj/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	contestFields := schema.Contest{}.Fields()
	_ = contestFields
	// contestDescState is the schema descriptor for state field.
	contestDescState := contestFields[3].Descriptor()
	// contest.StateValidator is a validator for the "state" field. It is called by the builders before save.
	contest.StateValidator = contestDescState.Validators[0].(func(int) error)
	// contestDescType is the schema descriptor for type field.
	contestDescType := contestFields[4].Descriptor()
	// contest.TypeValidator is a validator for the "type" field. It is called by the builders before save.
	contest.TypeValidator = contestDescType.Validators[0].(func(int) error)
	// contestDescExtraTime is the schema descriptor for extra_time field.
	contestDescExtraTime := contestFields[8].Descriptor()
	// contest.ExtraTimeValidator is a validator for the "extra_time" field. It is called by the builders before save.
	contest.ExtraTimeValidator = contestDescExtraTime.Validators[0].(func(int) error)
	groupFields := schema.Group{}.Fields()
	_ = groupFields
	// groupDescGroupName is the schema descriptor for group_name field.
	groupDescGroupName := groupFields[1].Descriptor()
	// group.DefaultGroupName holds the default value on creation for the group_name field.
	group.DefaultGroupName = groupDescGroupName.Default.(string)
	loginsessionFields := schema.LoginSession{}.Fields()
	_ = loginsessionFields
	// loginsessionDescUserID is the schema descriptor for user_id field.
	loginsessionDescUserID := loginsessionFields[1].Descriptor()
	// loginsession.UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	loginsession.UserIDValidator = loginsessionDescUserID.Validators[0].(func(int) error)
	problemFields := schema.Problem{}.Fields()
	_ = problemFields
	// problemDescIsDeleted is the schema descriptor for is_deleted field.
	problemDescIsDeleted := problemFields[7].Descriptor()
	// problem.DefaultIsDeleted holds the default value on creation for the is_deleted field.
	problem.DefaultIsDeleted = problemDescIsDeleted.Default.(bool)
	problemcaseFields := schema.ProblemCase{}.Fields()
	_ = problemcaseFields
	// problemcaseDescProblemID is the schema descriptor for problem_id field.
	problemcaseDescProblemID := problemcaseFields[1].Descriptor()
	// problemcase.ProblemIDValidator is a validator for the "problem_id" field. It is called by the builders before save.
	problemcase.ProblemIDValidator = problemcaseDescProblemID.Validators[0].(func(int) error)
	// problemcaseDescIndex is the schema descriptor for index field.
	problemcaseDescIndex := problemcaseFields[3].Descriptor()
	// problemcase.IndexValidator is a validator for the "index" field. It is called by the builders before save.
	problemcase.IndexValidator = problemcaseDescIndex.Validators[0].(func(int) error)
	// problemcaseDescIsAuto is the schema descriptor for is_auto field.
	problemcaseDescIsAuto := problemcaseFields[4].Descriptor()
	// problemcase.DefaultIsAuto holds the default value on creation for the is_auto field.
	problemcase.DefaultIsAuto = problemcaseDescIsAuto.Default.(bool)
	// problemcaseDescIsDeleted is the schema descriptor for is_deleted field.
	problemcaseDescIsDeleted := problemcaseFields[5].Descriptor()
	// problemcase.DefaultIsDeleted holds the default value on creation for the is_deleted field.
	problemcase.DefaultIsDeleted = problemcaseDescIsDeleted.Default.(bool)
	problemjudgeFields := schema.ProblemJudge{}.Fields()
	_ = problemjudgeFields
	// problemjudgeDescGroupID is the schema descriptor for group_id field.
	problemjudgeDescGroupID := problemjudgeFields[1].Descriptor()
	// problemjudge.GroupIDValidator is a validator for the "group_id" field. It is called by the builders before save.
	problemjudge.GroupIDValidator = problemjudgeDescGroupID.Validators[0].(func(int) error)
	// problemjudgeDescProblemID is the schema descriptor for problem_id field.
	problemjudgeDescProblemID := problemjudgeFields[2].Descriptor()
	// problemjudge.ProblemIDValidator is a validator for the "problem_id" field. It is called by the builders before save.
	problemjudge.ProblemIDValidator = problemjudgeDescProblemID.Validators[0].(func(int) error)
	submitFields := schema.Submit{}.Fields()
	_ = submitFields
	// submitDescUserID is the schema descriptor for user_id field.
	submitDescUserID := submitFields[1].Descriptor()
	// submit.UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	submit.UserIDValidator = submitDescUserID.Validators[0].(func(int) error)
	// submitDescProblemID is the schema descriptor for problem_id field.
	submitDescProblemID := submitFields[2].Descriptor()
	// submit.ProblemIDValidator is a validator for the "problem_id" field. It is called by the builders before save.
	submit.ProblemIDValidator = submitDescProblemID.Validators[0].(func(int) error)
	submitcaseFields := schema.SubmitCase{}.Fields()
	_ = submitcaseFields
	// submitcaseDescSubmitID is the schema descriptor for submit_id field.
	submitcaseDescSubmitID := submitcaseFields[1].Descriptor()
	// submitcase.SubmitIDValidator is a validator for the "submit_id" field. It is called by the builders before save.
	submitcase.SubmitIDValidator = submitcaseDescSubmitID.Validators[0].(func(int) error)
	// submitcaseDescCaseID is the schema descriptor for case_id field.
	submitcaseDescCaseID := submitcaseFields[2].Descriptor()
	// submitcase.CaseIDValidator is a validator for the "case_id" field. It is called by the builders before save.
	submitcase.CaseIDValidator = submitcaseDescCaseID.Validators[0].(func(int) error)
	// submitcaseDescState is the schema descriptor for state field.
	submitcaseDescState := submitcaseFields[3].Descriptor()
	// submitcase.StateValidator is a validator for the "state" field. It is called by the builders before save.
	submitcase.StateValidator = submitcaseDescState.Validators[0].(func(int) error)
	submitjudgeFields := schema.SubmitJudge{}.Fields()
	_ = submitjudgeFields
	// submitjudgeDescSubmitID is the schema descriptor for submit_id field.
	submitjudgeDescSubmitID := submitjudgeFields[2].Descriptor()
	// submitjudge.SubmitIDValidator is a validator for the "submit_id" field. It is called by the builders before save.
	submitjudge.SubmitIDValidator = submitjudgeDescSubmitID.Validators[0].(func(int) error)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[1].Descriptor()
	// user.DefaultUsername holds the default value on creation for the username field.
	user.DefaultUsername = userDescUsername.Default.(string)
	// userDescState is the schema descriptor for state field.
	userDescState := userFields[4].Descriptor()
	// user.StateValidator is a validator for the "state" field. It is called by the builders before save.
	user.StateValidator = userDescState.Validators[0].(func(int) error)
	// userDescGroupID is the schema descriptor for group_id field.
	userDescGroupID := userFields[5].Descriptor()
	// user.GroupIDValidator is a validator for the "group_id" field. It is called by the builders before save.
	user.GroupIDValidator = userDescGroupID.Validators[0].(func(int) error)
}
