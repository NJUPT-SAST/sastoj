// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sastoj/ent/contestresult"
	"sastoj/ent/problem"
	"sastoj/ent/submission"
	"sastoj/ent/submissioncase"
	"sastoj/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubmissionCreate is the builder for creating a Submission entity.
type SubmissionCreate struct {
	config
	mutation *SubmissionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCode sets the "code" field.
func (sc *SubmissionCreate) SetCode(s string) *SubmissionCreate {
	sc.mutation.SetCode(s)
	return sc
}

// SetStatus sets the "status" field.
func (sc *SubmissionCreate) SetStatus(i int16) *SubmissionCreate {
	sc.mutation.SetStatus(i)
	return sc
}

// SetCompileMessage sets the "compile_message" field.
func (sc *SubmissionCreate) SetCompileMessage(s string) *SubmissionCreate {
	sc.mutation.SetCompileMessage(s)
	return sc
}

// SetNillableCompileMessage sets the "compile_message" field if the given value is not nil.
func (sc *SubmissionCreate) SetNillableCompileMessage(s *string) *SubmissionCreate {
	if s != nil {
		sc.SetCompileMessage(*s)
	}
	return sc
}

// SetPoint sets the "point" field.
func (sc *SubmissionCreate) SetPoint(i int16) *SubmissionCreate {
	sc.mutation.SetPoint(i)
	return sc
}

// SetCreateTime sets the "create_time" field.
func (sc *SubmissionCreate) SetCreateTime(t time.Time) *SubmissionCreate {
	sc.mutation.SetCreateTime(t)
	return sc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (sc *SubmissionCreate) SetNillableCreateTime(t *time.Time) *SubmissionCreate {
	if t != nil {
		sc.SetCreateTime(*t)
	}
	return sc
}

// SetTotalTime sets the "total_time" field.
func (sc *SubmissionCreate) SetTotalTime(i int32) *SubmissionCreate {
	sc.mutation.SetTotalTime(i)
	return sc
}

// SetMaxMemory sets the "max_memory" field.
func (sc *SubmissionCreate) SetMaxMemory(i int32) *SubmissionCreate {
	sc.mutation.SetMaxMemory(i)
	return sc
}

// SetLanguage sets the "language" field.
func (sc *SubmissionCreate) SetLanguage(s string) *SubmissionCreate {
	sc.mutation.SetLanguage(s)
	return sc
}

// SetCaseVersion sets the "case_version" field.
func (sc *SubmissionCreate) SetCaseVersion(i int8) *SubmissionCreate {
	sc.mutation.SetCaseVersion(i)
	return sc
}

// SetProblemID sets the "problem_id" field.
func (sc *SubmissionCreate) SetProblemID(i int64) *SubmissionCreate {
	sc.mutation.SetProblemID(i)
	return sc
}

// SetUserID sets the "user_id" field.
func (sc *SubmissionCreate) SetUserID(i int64) *SubmissionCreate {
	sc.mutation.SetUserID(i)
	return sc
}

// SetID sets the "id" field.
func (sc *SubmissionCreate) SetID(i int64) *SubmissionCreate {
	sc.mutation.SetID(i)
	return sc
}

// AddSubmissionCaseIDs adds the "submission_cases" edge to the SubmissionCase entity by IDs.
func (sc *SubmissionCreate) AddSubmissionCaseIDs(ids ...int64) *SubmissionCreate {
	sc.mutation.AddSubmissionCaseIDs(ids...)
	return sc
}

// AddSubmissionCases adds the "submission_cases" edges to the SubmissionCase entity.
func (sc *SubmissionCreate) AddSubmissionCases(s ...*SubmissionCase) *SubmissionCreate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddSubmissionCaseIDs(ids...)
}

// SetProblemsID sets the "problems" edge to the Problem entity by ID.
func (sc *SubmissionCreate) SetProblemsID(id int64) *SubmissionCreate {
	sc.mutation.SetProblemsID(id)
	return sc
}

// SetProblems sets the "problems" edge to the Problem entity.
func (sc *SubmissionCreate) SetProblems(p *Problem) *SubmissionCreate {
	return sc.SetProblemsID(p.ID)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (sc *SubmissionCreate) SetUsersID(id int64) *SubmissionCreate {
	sc.mutation.SetUsersID(id)
	return sc
}

// SetUsers sets the "users" edge to the User entity.
func (sc *SubmissionCreate) SetUsers(u *User) *SubmissionCreate {
	return sc.SetUsersID(u.ID)
}

// AddContestResultIDs adds the "contest_results" edge to the ContestResult entity by IDs.
func (sc *SubmissionCreate) AddContestResultIDs(ids ...int) *SubmissionCreate {
	sc.mutation.AddContestResultIDs(ids...)
	return sc
}

// AddContestResults adds the "contest_results" edges to the ContestResult entity.
func (sc *SubmissionCreate) AddContestResults(c ...*ContestResult) *SubmissionCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sc.AddContestResultIDs(ids...)
}

// Mutation returns the SubmissionMutation object of the builder.
func (sc *SubmissionCreate) Mutation() *SubmissionMutation {
	return sc.mutation
}

// Save creates the Submission in the database.
func (sc *SubmissionCreate) Save(ctx context.Context) (*Submission, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SubmissionCreate) SaveX(ctx context.Context) *Submission {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SubmissionCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SubmissionCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SubmissionCreate) defaults() {
	if _, ok := sc.mutation.CreateTime(); !ok {
		v := submission.DefaultCreateTime
		sc.mutation.SetCreateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SubmissionCreate) check() error {
	if _, ok := sc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Submission.code"`)}
	}
	if _, ok := sc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Submission.status"`)}
	}
	if _, ok := sc.mutation.Point(); !ok {
		return &ValidationError{Name: "point", err: errors.New(`ent: missing required field "Submission.point"`)}
	}
	if _, ok := sc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Submission.create_time"`)}
	}
	if _, ok := sc.mutation.TotalTime(); !ok {
		return &ValidationError{Name: "total_time", err: errors.New(`ent: missing required field "Submission.total_time"`)}
	}
	if _, ok := sc.mutation.MaxMemory(); !ok {
		return &ValidationError{Name: "max_memory", err: errors.New(`ent: missing required field "Submission.max_memory"`)}
	}
	if _, ok := sc.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required field "Submission.language"`)}
	}
	if _, ok := sc.mutation.CaseVersion(); !ok {
		return &ValidationError{Name: "case_version", err: errors.New(`ent: missing required field "Submission.case_version"`)}
	}
	if _, ok := sc.mutation.ProblemID(); !ok {
		return &ValidationError{Name: "problem_id", err: errors.New(`ent: missing required field "Submission.problem_id"`)}
	}
	if _, ok := sc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Submission.user_id"`)}
	}
	if _, ok := sc.mutation.ProblemsID(); !ok {
		return &ValidationError{Name: "problems", err: errors.New(`ent: missing required edge "Submission.problems"`)}
	}
	if _, ok := sc.mutation.UsersID(); !ok {
		return &ValidationError{Name: "users", err: errors.New(`ent: missing required edge "Submission.users"`)}
	}
	return nil
}

func (sc *SubmissionCreate) sqlSave(ctx context.Context) (*Submission, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SubmissionCreate) createSpec() (*Submission, *sqlgraph.CreateSpec) {
	var (
		_node = &Submission{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(submission.Table, sqlgraph.NewFieldSpec(submission.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.Code(); ok {
		_spec.SetField(submission.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := sc.mutation.Status(); ok {
		_spec.SetField(submission.FieldStatus, field.TypeInt16, value)
		_node.Status = value
	}
	if value, ok := sc.mutation.CompileMessage(); ok {
		_spec.SetField(submission.FieldCompileMessage, field.TypeString, value)
		_node.CompileMessage = value
	}
	if value, ok := sc.mutation.Point(); ok {
		_spec.SetField(submission.FieldPoint, field.TypeInt16, value)
		_node.Point = value
	}
	if value, ok := sc.mutation.CreateTime(); ok {
		_spec.SetField(submission.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := sc.mutation.TotalTime(); ok {
		_spec.SetField(submission.FieldTotalTime, field.TypeInt32, value)
		_node.TotalTime = value
	}
	if value, ok := sc.mutation.MaxMemory(); ok {
		_spec.SetField(submission.FieldMaxMemory, field.TypeInt32, value)
		_node.MaxMemory = value
	}
	if value, ok := sc.mutation.Language(); ok {
		_spec.SetField(submission.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := sc.mutation.CaseVersion(); ok {
		_spec.SetField(submission.FieldCaseVersion, field.TypeInt8, value)
		_node.CaseVersion = value
	}
	if nodes := sc.mutation.SubmissionCasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   submission.SubmissionCasesTable,
			Columns: []string{submission.SubmissionCasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submissioncase.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ProblemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submission.ProblemsTable,
			Columns: []string{submission.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProblemID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submission.UsersTable,
			Columns: []string{submission.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ContestResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   submission.ContestResultsTable,
			Columns: submission.ContestResultsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contestresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Submission.Create().
//		SetCode(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubmissionUpsert) {
//			SetCode(v+v).
//		}).
//		Exec(ctx)
func (sc *SubmissionCreate) OnConflict(opts ...sql.ConflictOption) *SubmissionUpsertOne {
	sc.conflict = opts
	return &SubmissionUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Submission.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *SubmissionCreate) OnConflictColumns(columns ...string) *SubmissionUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &SubmissionUpsertOne{
		create: sc,
	}
}

type (
	// SubmissionUpsertOne is the builder for "upsert"-ing
	//  one Submission node.
	SubmissionUpsertOne struct {
		create *SubmissionCreate
	}

	// SubmissionUpsert is the "OnConflict" setter.
	SubmissionUpsert struct {
		*sql.UpdateSet
	}
)

// SetCode sets the "code" field.
func (u *SubmissionUpsert) SetCode(v string) *SubmissionUpsert {
	u.Set(submission.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *SubmissionUpsert) UpdateCode() *SubmissionUpsert {
	u.SetExcluded(submission.FieldCode)
	return u
}

// SetStatus sets the "status" field.
func (u *SubmissionUpsert) SetStatus(v int16) *SubmissionUpsert {
	u.Set(submission.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SubmissionUpsert) UpdateStatus() *SubmissionUpsert {
	u.SetExcluded(submission.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *SubmissionUpsert) AddStatus(v int16) *SubmissionUpsert {
	u.Add(submission.FieldStatus, v)
	return u
}

// SetCompileMessage sets the "compile_message" field.
func (u *SubmissionUpsert) SetCompileMessage(v string) *SubmissionUpsert {
	u.Set(submission.FieldCompileMessage, v)
	return u
}

// UpdateCompileMessage sets the "compile_message" field to the value that was provided on create.
func (u *SubmissionUpsert) UpdateCompileMessage() *SubmissionUpsert {
	u.SetExcluded(submission.FieldCompileMessage)
	return u
}

// ClearCompileMessage clears the value of the "compile_message" field.
func (u *SubmissionUpsert) ClearCompileMessage() *SubmissionUpsert {
	u.SetNull(submission.FieldCompileMessage)
	return u
}

// SetPoint sets the "point" field.
func (u *SubmissionUpsert) SetPoint(v int16) *SubmissionUpsert {
	u.Set(submission.FieldPoint, v)
	return u
}

// UpdatePoint sets the "point" field to the value that was provided on create.
func (u *SubmissionUpsert) UpdatePoint() *SubmissionUpsert {
	u.SetExcluded(submission.FieldPoint)
	return u
}

// AddPoint adds v to the "point" field.
func (u *SubmissionUpsert) AddPoint(v int16) *SubmissionUpsert {
	u.Add(submission.FieldPoint, v)
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *SubmissionUpsert) SetCreateTime(v time.Time) *SubmissionUpsert {
	u.Set(submission.FieldCreateTime, v)
	return u
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *SubmissionUpsert) UpdateCreateTime() *SubmissionUpsert {
	u.SetExcluded(submission.FieldCreateTime)
	return u
}

// SetTotalTime sets the "total_time" field.
func (u *SubmissionUpsert) SetTotalTime(v int32) *SubmissionUpsert {
	u.Set(submission.FieldTotalTime, v)
	return u
}

// UpdateTotalTime sets the "total_time" field to the value that was provided on create.
func (u *SubmissionUpsert) UpdateTotalTime() *SubmissionUpsert {
	u.SetExcluded(submission.FieldTotalTime)
	return u
}

// AddTotalTime adds v to the "total_time" field.
func (u *SubmissionUpsert) AddTotalTime(v int32) *SubmissionUpsert {
	u.Add(submission.FieldTotalTime, v)
	return u
}

// SetMaxMemory sets the "max_memory" field.
func (u *SubmissionUpsert) SetMaxMemory(v int32) *SubmissionUpsert {
	u.Set(submission.FieldMaxMemory, v)
	return u
}

// UpdateMaxMemory sets the "max_memory" field to the value that was provided on create.
func (u *SubmissionUpsert) UpdateMaxMemory() *SubmissionUpsert {
	u.SetExcluded(submission.FieldMaxMemory)
	return u
}

// AddMaxMemory adds v to the "max_memory" field.
func (u *SubmissionUpsert) AddMaxMemory(v int32) *SubmissionUpsert {
	u.Add(submission.FieldMaxMemory, v)
	return u
}

// SetLanguage sets the "language" field.
func (u *SubmissionUpsert) SetLanguage(v string) *SubmissionUpsert {
	u.Set(submission.FieldLanguage, v)
	return u
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *SubmissionUpsert) UpdateLanguage() *SubmissionUpsert {
	u.SetExcluded(submission.FieldLanguage)
	return u
}

// SetCaseVersion sets the "case_version" field.
func (u *SubmissionUpsert) SetCaseVersion(v int8) *SubmissionUpsert {
	u.Set(submission.FieldCaseVersion, v)
	return u
}

// UpdateCaseVersion sets the "case_version" field to the value that was provided on create.
func (u *SubmissionUpsert) UpdateCaseVersion() *SubmissionUpsert {
	u.SetExcluded(submission.FieldCaseVersion)
	return u
}

// AddCaseVersion adds v to the "case_version" field.
func (u *SubmissionUpsert) AddCaseVersion(v int8) *SubmissionUpsert {
	u.Add(submission.FieldCaseVersion, v)
	return u
}

// SetProblemID sets the "problem_id" field.
func (u *SubmissionUpsert) SetProblemID(v int64) *SubmissionUpsert {
	u.Set(submission.FieldProblemID, v)
	return u
}

// UpdateProblemID sets the "problem_id" field to the value that was provided on create.
func (u *SubmissionUpsert) UpdateProblemID() *SubmissionUpsert {
	u.SetExcluded(submission.FieldProblemID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *SubmissionUpsert) SetUserID(v int64) *SubmissionUpsert {
	u.Set(submission.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SubmissionUpsert) UpdateUserID() *SubmissionUpsert {
	u.SetExcluded(submission.FieldUserID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Submission.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(submission.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubmissionUpsertOne) UpdateNewValues() *SubmissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(submission.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Submission.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SubmissionUpsertOne) Ignore() *SubmissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubmissionUpsertOne) DoNothing() *SubmissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubmissionCreate.OnConflict
// documentation for more info.
func (u *SubmissionUpsertOne) Update(set func(*SubmissionUpsert)) *SubmissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubmissionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCode sets the "code" field.
func (u *SubmissionUpsertOne) SetCode(v string) *SubmissionUpsertOne {
	return u.Update(func(s *SubmissionUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *SubmissionUpsertOne) UpdateCode() *SubmissionUpsertOne {
	return u.Update(func(s *SubmissionUpsert) {
		s.UpdateCode()
	})
}

// SetStatus sets the "status" field.
func (u *SubmissionUpsertOne) SetStatus(v int16) *SubmissionUpsertOne {
	return u.Update(func(s *SubmissionUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *SubmissionUpsertOne) AddStatus(v int16) *SubmissionUpsertOne {
	return u.Update(func(s *SubmissionUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SubmissionUpsertOne) UpdateStatus() *SubmissionUpsertOne {
	return u.Update(func(s *SubmissionUpsert) {
		s.UpdateStatus()
	})
}

// SetCompileMessage sets the "compile_message" field.
func (u *SubmissionUpsertOne) SetCompileMessage(v string) *SubmissionUpsertOne {
	return u.Update(func(s *SubmissionUpsert) {
		s.SetCompileMessage(v)
	})
}

// UpdateCompileMessage sets the "compile_message" field to the value that was provided on create.
func (u *SubmissionUpsertOne) UpdateCompileMessage() *SubmissionUpsertOne {
	return u.Update(func(s *SubmissionUpsert) {
		s.UpdateCompileMessage()
	})
}

// ClearCompileMessage clears the value of the "compile_message" field.
func (u *SubmissionUpsertOne) ClearCompileMessage() *SubmissionUpsertOne {
	return u.Update(func(s *SubmissionUpsert) {
		s.ClearCompileMessage()
	})
}

// SetPoint sets the "point" field.
func (u *SubmissionUpsertOne) SetPoint(v int16) *SubmissionUpsertOne {
	return u.Update(func(s *SubmissionUpsert) {
		s.SetPoint(v)
	})
}

// AddPoint adds v to the "point" field.
func (u *SubmissionUpsertOne) AddPoint(v int16) *SubmissionUpsertOne {
	return u.Update(func(s *SubmissionUpsert) {
		s.AddPoint(v)
	})
}

// UpdatePoint sets the "point" field to the value that was provided on create.
func (u *SubmissionUpsertOne) UpdatePoint() *SubmissionUpsertOne {
	return u.Update(func(s *SubmissionUpsert) {
		s.UpdatePoint()
	})
}

// SetCreateTime sets the "create_time" field.
func (u *SubmissionUpsertOne) SetCreateTime(v time.Time) *SubmissionUpsertOne {
	return u.Update(func(s *SubmissionUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *SubmissionUpsertOne) UpdateCreateTime() *SubmissionUpsertOne {
	return u.Update(func(s *SubmissionUpsert) {
		s.UpdateCreateTime()
	})
}

// SetTotalTime sets the "total_time" field.
func (u *SubmissionUpsertOne) SetTotalTime(v int32) *SubmissionUpsertOne {
	return u.Update(func(s *SubmissionUpsert) {
		s.SetTotalTime(v)
	})
}

// AddTotalTime adds v to the "total_time" field.
func (u *SubmissionUpsertOne) AddTotalTime(v int32) *SubmissionUpsertOne {
	return u.Update(func(s *SubmissionUpsert) {
		s.AddTotalTime(v)
	})
}

// UpdateTotalTime sets the "total_time" field to the value that was provided on create.
func (u *SubmissionUpsertOne) UpdateTotalTime() *SubmissionUpsertOne {
	return u.Update(func(s *SubmissionUpsert) {
		s.UpdateTotalTime()
	})
}

// SetMaxMemory sets the "max_memory" field.
func (u *SubmissionUpsertOne) SetMaxMemory(v int32) *SubmissionUpsertOne {
	return u.Update(func(s *SubmissionUpsert) {
		s.SetMaxMemory(v)
	})
}

// AddMaxMemory adds v to the "max_memory" field.
func (u *SubmissionUpsertOne) AddMaxMemory(v int32) *SubmissionUpsertOne {
	return u.Update(func(s *SubmissionUpsert) {
		s.AddMaxMemory(v)
	})
}

// UpdateMaxMemory sets the "max_memory" field to the value that was provided on create.
func (u *SubmissionUpsertOne) UpdateMaxMemory() *SubmissionUpsertOne {
	return u.Update(func(s *SubmissionUpsert) {
		s.UpdateMaxMemory()
	})
}

// SetLanguage sets the "language" field.
func (u *SubmissionUpsertOne) SetLanguage(v string) *SubmissionUpsertOne {
	return u.Update(func(s *SubmissionUpsert) {
		s.SetLanguage(v)
	})
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *SubmissionUpsertOne) UpdateLanguage() *SubmissionUpsertOne {
	return u.Update(func(s *SubmissionUpsert) {
		s.UpdateLanguage()
	})
}

// SetCaseVersion sets the "case_version" field.
func (u *SubmissionUpsertOne) SetCaseVersion(v int8) *SubmissionUpsertOne {
	return u.Update(func(s *SubmissionUpsert) {
		s.SetCaseVersion(v)
	})
}

// AddCaseVersion adds v to the "case_version" field.
func (u *SubmissionUpsertOne) AddCaseVersion(v int8) *SubmissionUpsertOne {
	return u.Update(func(s *SubmissionUpsert) {
		s.AddCaseVersion(v)
	})
}

// UpdateCaseVersion sets the "case_version" field to the value that was provided on create.
func (u *SubmissionUpsertOne) UpdateCaseVersion() *SubmissionUpsertOne {
	return u.Update(func(s *SubmissionUpsert) {
		s.UpdateCaseVersion()
	})
}

// SetProblemID sets the "problem_id" field.
func (u *SubmissionUpsertOne) SetProblemID(v int64) *SubmissionUpsertOne {
	return u.Update(func(s *SubmissionUpsert) {
		s.SetProblemID(v)
	})
}

// UpdateProblemID sets the "problem_id" field to the value that was provided on create.
func (u *SubmissionUpsertOne) UpdateProblemID() *SubmissionUpsertOne {
	return u.Update(func(s *SubmissionUpsert) {
		s.UpdateProblemID()
	})
}

// SetUserID sets the "user_id" field.
func (u *SubmissionUpsertOne) SetUserID(v int64) *SubmissionUpsertOne {
	return u.Update(func(s *SubmissionUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SubmissionUpsertOne) UpdateUserID() *SubmissionUpsertOne {
	return u.Update(func(s *SubmissionUpsert) {
		s.UpdateUserID()
	})
}

// Exec executes the query.
func (u *SubmissionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SubmissionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubmissionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SubmissionUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SubmissionUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SubmissionCreateBulk is the builder for creating many Submission entities in bulk.
type SubmissionCreateBulk struct {
	config
	err      error
	builders []*SubmissionCreate
	conflict []sql.ConflictOption
}

// Save creates the Submission entities in the database.
func (scb *SubmissionCreateBulk) Save(ctx context.Context) ([]*Submission, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Submission, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubmissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SubmissionCreateBulk) SaveX(ctx context.Context) []*Submission {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SubmissionCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SubmissionCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Submission.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubmissionUpsert) {
//			SetCode(v+v).
//		}).
//		Exec(ctx)
func (scb *SubmissionCreateBulk) OnConflict(opts ...sql.ConflictOption) *SubmissionUpsertBulk {
	scb.conflict = opts
	return &SubmissionUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Submission.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *SubmissionCreateBulk) OnConflictColumns(columns ...string) *SubmissionUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &SubmissionUpsertBulk{
		create: scb,
	}
}

// SubmissionUpsertBulk is the builder for "upsert"-ing
// a bulk of Submission nodes.
type SubmissionUpsertBulk struct {
	create *SubmissionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Submission.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(submission.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubmissionUpsertBulk) UpdateNewValues() *SubmissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(submission.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Submission.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SubmissionUpsertBulk) Ignore() *SubmissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubmissionUpsertBulk) DoNothing() *SubmissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubmissionCreateBulk.OnConflict
// documentation for more info.
func (u *SubmissionUpsertBulk) Update(set func(*SubmissionUpsert)) *SubmissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubmissionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCode sets the "code" field.
func (u *SubmissionUpsertBulk) SetCode(v string) *SubmissionUpsertBulk {
	return u.Update(func(s *SubmissionUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *SubmissionUpsertBulk) UpdateCode() *SubmissionUpsertBulk {
	return u.Update(func(s *SubmissionUpsert) {
		s.UpdateCode()
	})
}

// SetStatus sets the "status" field.
func (u *SubmissionUpsertBulk) SetStatus(v int16) *SubmissionUpsertBulk {
	return u.Update(func(s *SubmissionUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *SubmissionUpsertBulk) AddStatus(v int16) *SubmissionUpsertBulk {
	return u.Update(func(s *SubmissionUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SubmissionUpsertBulk) UpdateStatus() *SubmissionUpsertBulk {
	return u.Update(func(s *SubmissionUpsert) {
		s.UpdateStatus()
	})
}

// SetCompileMessage sets the "compile_message" field.
func (u *SubmissionUpsertBulk) SetCompileMessage(v string) *SubmissionUpsertBulk {
	return u.Update(func(s *SubmissionUpsert) {
		s.SetCompileMessage(v)
	})
}

// UpdateCompileMessage sets the "compile_message" field to the value that was provided on create.
func (u *SubmissionUpsertBulk) UpdateCompileMessage() *SubmissionUpsertBulk {
	return u.Update(func(s *SubmissionUpsert) {
		s.UpdateCompileMessage()
	})
}

// ClearCompileMessage clears the value of the "compile_message" field.
func (u *SubmissionUpsertBulk) ClearCompileMessage() *SubmissionUpsertBulk {
	return u.Update(func(s *SubmissionUpsert) {
		s.ClearCompileMessage()
	})
}

// SetPoint sets the "point" field.
func (u *SubmissionUpsertBulk) SetPoint(v int16) *SubmissionUpsertBulk {
	return u.Update(func(s *SubmissionUpsert) {
		s.SetPoint(v)
	})
}

// AddPoint adds v to the "point" field.
func (u *SubmissionUpsertBulk) AddPoint(v int16) *SubmissionUpsertBulk {
	return u.Update(func(s *SubmissionUpsert) {
		s.AddPoint(v)
	})
}

// UpdatePoint sets the "point" field to the value that was provided on create.
func (u *SubmissionUpsertBulk) UpdatePoint() *SubmissionUpsertBulk {
	return u.Update(func(s *SubmissionUpsert) {
		s.UpdatePoint()
	})
}

// SetCreateTime sets the "create_time" field.
func (u *SubmissionUpsertBulk) SetCreateTime(v time.Time) *SubmissionUpsertBulk {
	return u.Update(func(s *SubmissionUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *SubmissionUpsertBulk) UpdateCreateTime() *SubmissionUpsertBulk {
	return u.Update(func(s *SubmissionUpsert) {
		s.UpdateCreateTime()
	})
}

// SetTotalTime sets the "total_time" field.
func (u *SubmissionUpsertBulk) SetTotalTime(v int32) *SubmissionUpsertBulk {
	return u.Update(func(s *SubmissionUpsert) {
		s.SetTotalTime(v)
	})
}

// AddTotalTime adds v to the "total_time" field.
func (u *SubmissionUpsertBulk) AddTotalTime(v int32) *SubmissionUpsertBulk {
	return u.Update(func(s *SubmissionUpsert) {
		s.AddTotalTime(v)
	})
}

// UpdateTotalTime sets the "total_time" field to the value that was provided on create.
func (u *SubmissionUpsertBulk) UpdateTotalTime() *SubmissionUpsertBulk {
	return u.Update(func(s *SubmissionUpsert) {
		s.UpdateTotalTime()
	})
}

// SetMaxMemory sets the "max_memory" field.
func (u *SubmissionUpsertBulk) SetMaxMemory(v int32) *SubmissionUpsertBulk {
	return u.Update(func(s *SubmissionUpsert) {
		s.SetMaxMemory(v)
	})
}

// AddMaxMemory adds v to the "max_memory" field.
func (u *SubmissionUpsertBulk) AddMaxMemory(v int32) *SubmissionUpsertBulk {
	return u.Update(func(s *SubmissionUpsert) {
		s.AddMaxMemory(v)
	})
}

// UpdateMaxMemory sets the "max_memory" field to the value that was provided on create.
func (u *SubmissionUpsertBulk) UpdateMaxMemory() *SubmissionUpsertBulk {
	return u.Update(func(s *SubmissionUpsert) {
		s.UpdateMaxMemory()
	})
}

// SetLanguage sets the "language" field.
func (u *SubmissionUpsertBulk) SetLanguage(v string) *SubmissionUpsertBulk {
	return u.Update(func(s *SubmissionUpsert) {
		s.SetLanguage(v)
	})
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *SubmissionUpsertBulk) UpdateLanguage() *SubmissionUpsertBulk {
	return u.Update(func(s *SubmissionUpsert) {
		s.UpdateLanguage()
	})
}

// SetCaseVersion sets the "case_version" field.
func (u *SubmissionUpsertBulk) SetCaseVersion(v int8) *SubmissionUpsertBulk {
	return u.Update(func(s *SubmissionUpsert) {
		s.SetCaseVersion(v)
	})
}

// AddCaseVersion adds v to the "case_version" field.
func (u *SubmissionUpsertBulk) AddCaseVersion(v int8) *SubmissionUpsertBulk {
	return u.Update(func(s *SubmissionUpsert) {
		s.AddCaseVersion(v)
	})
}

// UpdateCaseVersion sets the "case_version" field to the value that was provided on create.
func (u *SubmissionUpsertBulk) UpdateCaseVersion() *SubmissionUpsertBulk {
	return u.Update(func(s *SubmissionUpsert) {
		s.UpdateCaseVersion()
	})
}

// SetProblemID sets the "problem_id" field.
func (u *SubmissionUpsertBulk) SetProblemID(v int64) *SubmissionUpsertBulk {
	return u.Update(func(s *SubmissionUpsert) {
		s.SetProblemID(v)
	})
}

// UpdateProblemID sets the "problem_id" field to the value that was provided on create.
func (u *SubmissionUpsertBulk) UpdateProblemID() *SubmissionUpsertBulk {
	return u.Update(func(s *SubmissionUpsert) {
		s.UpdateProblemID()
	})
}

// SetUserID sets the "user_id" field.
func (u *SubmissionUpsertBulk) SetUserID(v int64) *SubmissionUpsertBulk {
	return u.Update(func(s *SubmissionUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SubmissionUpsertBulk) UpdateUserID() *SubmissionUpsertBulk {
	return u.Update(func(s *SubmissionUpsert) {
		s.UpdateUserID()
	})
}

// Exec executes the query.
func (u *SubmissionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SubmissionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SubmissionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubmissionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
