// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sastoj/ent/contestresult"
	"sastoj/ent/predicate"
	"sastoj/ent/problem"
	"sastoj/ent/submission"
	"sastoj/ent/submissioncase"
	"sastoj/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubmissionUpdate is the builder for updating Submission entities.
type SubmissionUpdate struct {
	config
	hooks    []Hook
	mutation *SubmissionMutation
}

// Where appends a list predicates to the SubmissionUpdate builder.
func (su *SubmissionUpdate) Where(ps ...predicate.Submission) *SubmissionUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetCode sets the "code" field.
func (su *SubmissionUpdate) SetCode(s string) *SubmissionUpdate {
	su.mutation.SetCode(s)
	return su
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (su *SubmissionUpdate) SetNillableCode(s *string) *SubmissionUpdate {
	if s != nil {
		su.SetCode(*s)
	}
	return su
}

// SetStatus sets the "status" field.
func (su *SubmissionUpdate) SetStatus(i int16) *SubmissionUpdate {
	su.mutation.ResetStatus()
	su.mutation.SetStatus(i)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *SubmissionUpdate) SetNillableStatus(i *int16) *SubmissionUpdate {
	if i != nil {
		su.SetStatus(*i)
	}
	return su
}

// AddStatus adds i to the "status" field.
func (su *SubmissionUpdate) AddStatus(i int16) *SubmissionUpdate {
	su.mutation.AddStatus(i)
	return su
}

// SetPoint sets the "point" field.
func (su *SubmissionUpdate) SetPoint(i int16) *SubmissionUpdate {
	su.mutation.ResetPoint()
	su.mutation.SetPoint(i)
	return su
}

// SetNillablePoint sets the "point" field if the given value is not nil.
func (su *SubmissionUpdate) SetNillablePoint(i *int16) *SubmissionUpdate {
	if i != nil {
		su.SetPoint(*i)
	}
	return su
}

// AddPoint adds i to the "point" field.
func (su *SubmissionUpdate) AddPoint(i int16) *SubmissionUpdate {
	su.mutation.AddPoint(i)
	return su
}

// SetCreateTime sets the "create_time" field.
func (su *SubmissionUpdate) SetCreateTime(t time.Time) *SubmissionUpdate {
	su.mutation.SetCreateTime(t)
	return su
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (su *SubmissionUpdate) SetNillableCreateTime(t *time.Time) *SubmissionUpdate {
	if t != nil {
		su.SetCreateTime(*t)
	}
	return su
}

// SetTotalTime sets the "total_time" field.
func (su *SubmissionUpdate) SetTotalTime(i int32) *SubmissionUpdate {
	su.mutation.ResetTotalTime()
	su.mutation.SetTotalTime(i)
	return su
}

// SetNillableTotalTime sets the "total_time" field if the given value is not nil.
func (su *SubmissionUpdate) SetNillableTotalTime(i *int32) *SubmissionUpdate {
	if i != nil {
		su.SetTotalTime(*i)
	}
	return su
}

// AddTotalTime adds i to the "total_time" field.
func (su *SubmissionUpdate) AddTotalTime(i int32) *SubmissionUpdate {
	su.mutation.AddTotalTime(i)
	return su
}

// SetMaxMemory sets the "max_memory" field.
func (su *SubmissionUpdate) SetMaxMemory(i int32) *SubmissionUpdate {
	su.mutation.ResetMaxMemory()
	su.mutation.SetMaxMemory(i)
	return su
}

// SetNillableMaxMemory sets the "max_memory" field if the given value is not nil.
func (su *SubmissionUpdate) SetNillableMaxMemory(i *int32) *SubmissionUpdate {
	if i != nil {
		su.SetMaxMemory(*i)
	}
	return su
}

// AddMaxMemory adds i to the "max_memory" field.
func (su *SubmissionUpdate) AddMaxMemory(i int32) *SubmissionUpdate {
	su.mutation.AddMaxMemory(i)
	return su
}

// SetLanguage sets the "language" field.
func (su *SubmissionUpdate) SetLanguage(s string) *SubmissionUpdate {
	su.mutation.SetLanguage(s)
	return su
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (su *SubmissionUpdate) SetNillableLanguage(s *string) *SubmissionUpdate {
	if s != nil {
		su.SetLanguage(*s)
	}
	return su
}

// SetCaseVersion sets the "case_version" field.
func (su *SubmissionUpdate) SetCaseVersion(i int8) *SubmissionUpdate {
	su.mutation.ResetCaseVersion()
	su.mutation.SetCaseVersion(i)
	return su
}

// SetNillableCaseVersion sets the "case_version" field if the given value is not nil.
func (su *SubmissionUpdate) SetNillableCaseVersion(i *int8) *SubmissionUpdate {
	if i != nil {
		su.SetCaseVersion(*i)
	}
	return su
}

// AddCaseVersion adds i to the "case_version" field.
func (su *SubmissionUpdate) AddCaseVersion(i int8) *SubmissionUpdate {
	su.mutation.AddCaseVersion(i)
	return su
}

// SetProblemID sets the "problem_id" field.
func (su *SubmissionUpdate) SetProblemID(i int64) *SubmissionUpdate {
	su.mutation.SetProblemID(i)
	return su
}

// SetNillableProblemID sets the "problem_id" field if the given value is not nil.
func (su *SubmissionUpdate) SetNillableProblemID(i *int64) *SubmissionUpdate {
	if i != nil {
		su.SetProblemID(*i)
	}
	return su
}

// SetUserID sets the "user_id" field.
func (su *SubmissionUpdate) SetUserID(i int64) *SubmissionUpdate {
	su.mutation.SetUserID(i)
	return su
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (su *SubmissionUpdate) SetNillableUserID(i *int64) *SubmissionUpdate {
	if i != nil {
		su.SetUserID(*i)
	}
	return su
}

// AddSubmissionCaseIDs adds the "submission_cases" edge to the SubmissionCase entity by IDs.
func (su *SubmissionUpdate) AddSubmissionCaseIDs(ids ...int64) *SubmissionUpdate {
	su.mutation.AddSubmissionCaseIDs(ids...)
	return su
}

// AddSubmissionCases adds the "submission_cases" edges to the SubmissionCase entity.
func (su *SubmissionUpdate) AddSubmissionCases(s ...*SubmissionCase) *SubmissionUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddSubmissionCaseIDs(ids...)
}

// SetProblemsID sets the "problems" edge to the Problem entity by ID.
func (su *SubmissionUpdate) SetProblemsID(id int64) *SubmissionUpdate {
	su.mutation.SetProblemsID(id)
	return su
}

// SetProblems sets the "problems" edge to the Problem entity.
func (su *SubmissionUpdate) SetProblems(p *Problem) *SubmissionUpdate {
	return su.SetProblemsID(p.ID)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (su *SubmissionUpdate) SetUsersID(id int64) *SubmissionUpdate {
	su.mutation.SetUsersID(id)
	return su
}

// SetUsers sets the "users" edge to the User entity.
func (su *SubmissionUpdate) SetUsers(u *User) *SubmissionUpdate {
	return su.SetUsersID(u.ID)
}

// AddContestResultIDs adds the "contest_results" edge to the ContestResult entity by IDs.
func (su *SubmissionUpdate) AddContestResultIDs(ids ...int) *SubmissionUpdate {
	su.mutation.AddContestResultIDs(ids...)
	return su
}

// AddContestResults adds the "contest_results" edges to the ContestResult entity.
func (su *SubmissionUpdate) AddContestResults(c ...*ContestResult) *SubmissionUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.AddContestResultIDs(ids...)
}

// Mutation returns the SubmissionMutation object of the builder.
func (su *SubmissionUpdate) Mutation() *SubmissionMutation {
	return su.mutation
}

// ClearSubmissionCases clears all "submission_cases" edges to the SubmissionCase entity.
func (su *SubmissionUpdate) ClearSubmissionCases() *SubmissionUpdate {
	su.mutation.ClearSubmissionCases()
	return su
}

// RemoveSubmissionCaseIDs removes the "submission_cases" edge to SubmissionCase entities by IDs.
func (su *SubmissionUpdate) RemoveSubmissionCaseIDs(ids ...int64) *SubmissionUpdate {
	su.mutation.RemoveSubmissionCaseIDs(ids...)
	return su
}

// RemoveSubmissionCases removes "submission_cases" edges to SubmissionCase entities.
func (su *SubmissionUpdate) RemoveSubmissionCases(s ...*SubmissionCase) *SubmissionUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveSubmissionCaseIDs(ids...)
}

// ClearProblems clears the "problems" edge to the Problem entity.
func (su *SubmissionUpdate) ClearProblems() *SubmissionUpdate {
	su.mutation.ClearProblems()
	return su
}

// ClearUsers clears the "users" edge to the User entity.
func (su *SubmissionUpdate) ClearUsers() *SubmissionUpdate {
	su.mutation.ClearUsers()
	return su
}

// ClearContestResults clears all "contest_results" edges to the ContestResult entity.
func (su *SubmissionUpdate) ClearContestResults() *SubmissionUpdate {
	su.mutation.ClearContestResults()
	return su
}

// RemoveContestResultIDs removes the "contest_results" edge to ContestResult entities by IDs.
func (su *SubmissionUpdate) RemoveContestResultIDs(ids ...int) *SubmissionUpdate {
	su.mutation.RemoveContestResultIDs(ids...)
	return su
}

// RemoveContestResults removes "contest_results" edges to ContestResult entities.
func (su *SubmissionUpdate) RemoveContestResults(c ...*ContestResult) *SubmissionUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.RemoveContestResultIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SubmissionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SubmissionUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SubmissionUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SubmissionUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SubmissionUpdate) check() error {
	if v, ok := su.mutation.Status(); ok {
		if err := submission.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Submission.status": %w`, err)}
		}
	}
	if v, ok := su.mutation.Point(); ok {
		if err := submission.PointValidator(v); err != nil {
			return &ValidationError{Name: "point", err: fmt.Errorf(`ent: validator failed for field "Submission.point": %w`, err)}
		}
	}
	if v, ok := su.mutation.TotalTime(); ok {
		if err := submission.TotalTimeValidator(v); err != nil {
			return &ValidationError{Name: "total_time", err: fmt.Errorf(`ent: validator failed for field "Submission.total_time": %w`, err)}
		}
	}
	if v, ok := su.mutation.MaxMemory(); ok {
		if err := submission.MaxMemoryValidator(v); err != nil {
			return &ValidationError{Name: "max_memory", err: fmt.Errorf(`ent: validator failed for field "Submission.max_memory": %w`, err)}
		}
	}
	if v, ok := su.mutation.CaseVersion(); ok {
		if err := submission.CaseVersionValidator(v); err != nil {
			return &ValidationError{Name: "case_version", err: fmt.Errorf(`ent: validator failed for field "Submission.case_version": %w`, err)}
		}
	}
	if _, ok := su.mutation.ProblemsID(); su.mutation.ProblemsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Submission.problems"`)
	}
	if _, ok := su.mutation.UsersID(); su.mutation.UsersCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Submission.users"`)
	}
	return nil
}

func (su *SubmissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(submission.Table, submission.Columns, sqlgraph.NewFieldSpec(submission.FieldID, field.TypeInt64))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Code(); ok {
		_spec.SetField(submission.FieldCode, field.TypeString, value)
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.SetField(submission.FieldStatus, field.TypeInt16, value)
	}
	if value, ok := su.mutation.AddedStatus(); ok {
		_spec.AddField(submission.FieldStatus, field.TypeInt16, value)
	}
	if value, ok := su.mutation.Point(); ok {
		_spec.SetField(submission.FieldPoint, field.TypeInt16, value)
	}
	if value, ok := su.mutation.AddedPoint(); ok {
		_spec.AddField(submission.FieldPoint, field.TypeInt16, value)
	}
	if value, ok := su.mutation.CreateTime(); ok {
		_spec.SetField(submission.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := su.mutation.TotalTime(); ok {
		_spec.SetField(submission.FieldTotalTime, field.TypeInt32, value)
	}
	if value, ok := su.mutation.AddedTotalTime(); ok {
		_spec.AddField(submission.FieldTotalTime, field.TypeInt32, value)
	}
	if value, ok := su.mutation.MaxMemory(); ok {
		_spec.SetField(submission.FieldMaxMemory, field.TypeInt32, value)
	}
	if value, ok := su.mutation.AddedMaxMemory(); ok {
		_spec.AddField(submission.FieldMaxMemory, field.TypeInt32, value)
	}
	if value, ok := su.mutation.Language(); ok {
		_spec.SetField(submission.FieldLanguage, field.TypeString, value)
	}
	if value, ok := su.mutation.CaseVersion(); ok {
		_spec.SetField(submission.FieldCaseVersion, field.TypeInt8, value)
	}
	if value, ok := su.mutation.AddedCaseVersion(); ok {
		_spec.AddField(submission.FieldCaseVersion, field.TypeInt8, value)
	}
	if su.mutation.SubmissionCasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   submission.SubmissionCasesTable,
			Columns: []string{submission.SubmissionCasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submissioncase.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedSubmissionCasesIDs(); len(nodes) > 0 && !su.mutation.SubmissionCasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   submission.SubmissionCasesTable,
			Columns: []string{submission.SubmissionCasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submissioncase.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SubmissionCasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   submission.SubmissionCasesTable,
			Columns: []string{submission.SubmissionCasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submissioncase.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submission.ProblemsTable,
			Columns: []string{submission.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ProblemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submission.ProblemsTable,
			Columns: []string{submission.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submission.UsersTable,
			Columns: []string{submission.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submission.UsersTable,
			Columns: []string{submission.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ContestResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   submission.ContestResultsTable,
			Columns: submission.ContestResultsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contestresult.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedContestResultsIDs(); len(nodes) > 0 && !su.mutation.ContestResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   submission.ContestResultsTable,
			Columns: submission.ContestResultsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contestresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ContestResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   submission.ContestResultsTable,
			Columns: submission.ContestResultsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contestresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{submission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SubmissionUpdateOne is the builder for updating a single Submission entity.
type SubmissionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubmissionMutation
}

// SetCode sets the "code" field.
func (suo *SubmissionUpdateOne) SetCode(s string) *SubmissionUpdateOne {
	suo.mutation.SetCode(s)
	return suo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (suo *SubmissionUpdateOne) SetNillableCode(s *string) *SubmissionUpdateOne {
	if s != nil {
		suo.SetCode(*s)
	}
	return suo
}

// SetStatus sets the "status" field.
func (suo *SubmissionUpdateOne) SetStatus(i int16) *SubmissionUpdateOne {
	suo.mutation.ResetStatus()
	suo.mutation.SetStatus(i)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *SubmissionUpdateOne) SetNillableStatus(i *int16) *SubmissionUpdateOne {
	if i != nil {
		suo.SetStatus(*i)
	}
	return suo
}

// AddStatus adds i to the "status" field.
func (suo *SubmissionUpdateOne) AddStatus(i int16) *SubmissionUpdateOne {
	suo.mutation.AddStatus(i)
	return suo
}

// SetPoint sets the "point" field.
func (suo *SubmissionUpdateOne) SetPoint(i int16) *SubmissionUpdateOne {
	suo.mutation.ResetPoint()
	suo.mutation.SetPoint(i)
	return suo
}

// SetNillablePoint sets the "point" field if the given value is not nil.
func (suo *SubmissionUpdateOne) SetNillablePoint(i *int16) *SubmissionUpdateOne {
	if i != nil {
		suo.SetPoint(*i)
	}
	return suo
}

// AddPoint adds i to the "point" field.
func (suo *SubmissionUpdateOne) AddPoint(i int16) *SubmissionUpdateOne {
	suo.mutation.AddPoint(i)
	return suo
}

// SetCreateTime sets the "create_time" field.
func (suo *SubmissionUpdateOne) SetCreateTime(t time.Time) *SubmissionUpdateOne {
	suo.mutation.SetCreateTime(t)
	return suo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (suo *SubmissionUpdateOne) SetNillableCreateTime(t *time.Time) *SubmissionUpdateOne {
	if t != nil {
		suo.SetCreateTime(*t)
	}
	return suo
}

// SetTotalTime sets the "total_time" field.
func (suo *SubmissionUpdateOne) SetTotalTime(i int32) *SubmissionUpdateOne {
	suo.mutation.ResetTotalTime()
	suo.mutation.SetTotalTime(i)
	return suo
}

// SetNillableTotalTime sets the "total_time" field if the given value is not nil.
func (suo *SubmissionUpdateOne) SetNillableTotalTime(i *int32) *SubmissionUpdateOne {
	if i != nil {
		suo.SetTotalTime(*i)
	}
	return suo
}

// AddTotalTime adds i to the "total_time" field.
func (suo *SubmissionUpdateOne) AddTotalTime(i int32) *SubmissionUpdateOne {
	suo.mutation.AddTotalTime(i)
	return suo
}

// SetMaxMemory sets the "max_memory" field.
func (suo *SubmissionUpdateOne) SetMaxMemory(i int32) *SubmissionUpdateOne {
	suo.mutation.ResetMaxMemory()
	suo.mutation.SetMaxMemory(i)
	return suo
}

// SetNillableMaxMemory sets the "max_memory" field if the given value is not nil.
func (suo *SubmissionUpdateOne) SetNillableMaxMemory(i *int32) *SubmissionUpdateOne {
	if i != nil {
		suo.SetMaxMemory(*i)
	}
	return suo
}

// AddMaxMemory adds i to the "max_memory" field.
func (suo *SubmissionUpdateOne) AddMaxMemory(i int32) *SubmissionUpdateOne {
	suo.mutation.AddMaxMemory(i)
	return suo
}

// SetLanguage sets the "language" field.
func (suo *SubmissionUpdateOne) SetLanguage(s string) *SubmissionUpdateOne {
	suo.mutation.SetLanguage(s)
	return suo
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (suo *SubmissionUpdateOne) SetNillableLanguage(s *string) *SubmissionUpdateOne {
	if s != nil {
		suo.SetLanguage(*s)
	}
	return suo
}

// SetCaseVersion sets the "case_version" field.
func (suo *SubmissionUpdateOne) SetCaseVersion(i int8) *SubmissionUpdateOne {
	suo.mutation.ResetCaseVersion()
	suo.mutation.SetCaseVersion(i)
	return suo
}

// SetNillableCaseVersion sets the "case_version" field if the given value is not nil.
func (suo *SubmissionUpdateOne) SetNillableCaseVersion(i *int8) *SubmissionUpdateOne {
	if i != nil {
		suo.SetCaseVersion(*i)
	}
	return suo
}

// AddCaseVersion adds i to the "case_version" field.
func (suo *SubmissionUpdateOne) AddCaseVersion(i int8) *SubmissionUpdateOne {
	suo.mutation.AddCaseVersion(i)
	return suo
}

// SetProblemID sets the "problem_id" field.
func (suo *SubmissionUpdateOne) SetProblemID(i int64) *SubmissionUpdateOne {
	suo.mutation.SetProblemID(i)
	return suo
}

// SetNillableProblemID sets the "problem_id" field if the given value is not nil.
func (suo *SubmissionUpdateOne) SetNillableProblemID(i *int64) *SubmissionUpdateOne {
	if i != nil {
		suo.SetProblemID(*i)
	}
	return suo
}

// SetUserID sets the "user_id" field.
func (suo *SubmissionUpdateOne) SetUserID(i int64) *SubmissionUpdateOne {
	suo.mutation.SetUserID(i)
	return suo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (suo *SubmissionUpdateOne) SetNillableUserID(i *int64) *SubmissionUpdateOne {
	if i != nil {
		suo.SetUserID(*i)
	}
	return suo
}

// AddSubmissionCaseIDs adds the "submission_cases" edge to the SubmissionCase entity by IDs.
func (suo *SubmissionUpdateOne) AddSubmissionCaseIDs(ids ...int64) *SubmissionUpdateOne {
	suo.mutation.AddSubmissionCaseIDs(ids...)
	return suo
}

// AddSubmissionCases adds the "submission_cases" edges to the SubmissionCase entity.
func (suo *SubmissionUpdateOne) AddSubmissionCases(s ...*SubmissionCase) *SubmissionUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddSubmissionCaseIDs(ids...)
}

// SetProblemsID sets the "problems" edge to the Problem entity by ID.
func (suo *SubmissionUpdateOne) SetProblemsID(id int64) *SubmissionUpdateOne {
	suo.mutation.SetProblemsID(id)
	return suo
}

// SetProblems sets the "problems" edge to the Problem entity.
func (suo *SubmissionUpdateOne) SetProblems(p *Problem) *SubmissionUpdateOne {
	return suo.SetProblemsID(p.ID)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (suo *SubmissionUpdateOne) SetUsersID(id int64) *SubmissionUpdateOne {
	suo.mutation.SetUsersID(id)
	return suo
}

// SetUsers sets the "users" edge to the User entity.
func (suo *SubmissionUpdateOne) SetUsers(u *User) *SubmissionUpdateOne {
	return suo.SetUsersID(u.ID)
}

// AddContestResultIDs adds the "contest_results" edge to the ContestResult entity by IDs.
func (suo *SubmissionUpdateOne) AddContestResultIDs(ids ...int) *SubmissionUpdateOne {
	suo.mutation.AddContestResultIDs(ids...)
	return suo
}

// AddContestResults adds the "contest_results" edges to the ContestResult entity.
func (suo *SubmissionUpdateOne) AddContestResults(c ...*ContestResult) *SubmissionUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.AddContestResultIDs(ids...)
}

// Mutation returns the SubmissionMutation object of the builder.
func (suo *SubmissionUpdateOne) Mutation() *SubmissionMutation {
	return suo.mutation
}

// ClearSubmissionCases clears all "submission_cases" edges to the SubmissionCase entity.
func (suo *SubmissionUpdateOne) ClearSubmissionCases() *SubmissionUpdateOne {
	suo.mutation.ClearSubmissionCases()
	return suo
}

// RemoveSubmissionCaseIDs removes the "submission_cases" edge to SubmissionCase entities by IDs.
func (suo *SubmissionUpdateOne) RemoveSubmissionCaseIDs(ids ...int64) *SubmissionUpdateOne {
	suo.mutation.RemoveSubmissionCaseIDs(ids...)
	return suo
}

// RemoveSubmissionCases removes "submission_cases" edges to SubmissionCase entities.
func (suo *SubmissionUpdateOne) RemoveSubmissionCases(s ...*SubmissionCase) *SubmissionUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveSubmissionCaseIDs(ids...)
}

// ClearProblems clears the "problems" edge to the Problem entity.
func (suo *SubmissionUpdateOne) ClearProblems() *SubmissionUpdateOne {
	suo.mutation.ClearProblems()
	return suo
}

// ClearUsers clears the "users" edge to the User entity.
func (suo *SubmissionUpdateOne) ClearUsers() *SubmissionUpdateOne {
	suo.mutation.ClearUsers()
	return suo
}

// ClearContestResults clears all "contest_results" edges to the ContestResult entity.
func (suo *SubmissionUpdateOne) ClearContestResults() *SubmissionUpdateOne {
	suo.mutation.ClearContestResults()
	return suo
}

// RemoveContestResultIDs removes the "contest_results" edge to ContestResult entities by IDs.
func (suo *SubmissionUpdateOne) RemoveContestResultIDs(ids ...int) *SubmissionUpdateOne {
	suo.mutation.RemoveContestResultIDs(ids...)
	return suo
}

// RemoveContestResults removes "contest_results" edges to ContestResult entities.
func (suo *SubmissionUpdateOne) RemoveContestResults(c ...*ContestResult) *SubmissionUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.RemoveContestResultIDs(ids...)
}

// Where appends a list predicates to the SubmissionUpdate builder.
func (suo *SubmissionUpdateOne) Where(ps ...predicate.Submission) *SubmissionUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SubmissionUpdateOne) Select(field string, fields ...string) *SubmissionUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Submission entity.
func (suo *SubmissionUpdateOne) Save(ctx context.Context) (*Submission, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SubmissionUpdateOne) SaveX(ctx context.Context) *Submission {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SubmissionUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SubmissionUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SubmissionUpdateOne) check() error {
	if v, ok := suo.mutation.Status(); ok {
		if err := submission.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Submission.status": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Point(); ok {
		if err := submission.PointValidator(v); err != nil {
			return &ValidationError{Name: "point", err: fmt.Errorf(`ent: validator failed for field "Submission.point": %w`, err)}
		}
	}
	if v, ok := suo.mutation.TotalTime(); ok {
		if err := submission.TotalTimeValidator(v); err != nil {
			return &ValidationError{Name: "total_time", err: fmt.Errorf(`ent: validator failed for field "Submission.total_time": %w`, err)}
		}
	}
	if v, ok := suo.mutation.MaxMemory(); ok {
		if err := submission.MaxMemoryValidator(v); err != nil {
			return &ValidationError{Name: "max_memory", err: fmt.Errorf(`ent: validator failed for field "Submission.max_memory": %w`, err)}
		}
	}
	if v, ok := suo.mutation.CaseVersion(); ok {
		if err := submission.CaseVersionValidator(v); err != nil {
			return &ValidationError{Name: "case_version", err: fmt.Errorf(`ent: validator failed for field "Submission.case_version": %w`, err)}
		}
	}
	if _, ok := suo.mutation.ProblemsID(); suo.mutation.ProblemsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Submission.problems"`)
	}
	if _, ok := suo.mutation.UsersID(); suo.mutation.UsersCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Submission.users"`)
	}
	return nil
}

func (suo *SubmissionUpdateOne) sqlSave(ctx context.Context) (_node *Submission, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(submission.Table, submission.Columns, sqlgraph.NewFieldSpec(submission.FieldID, field.TypeInt64))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Submission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, submission.FieldID)
		for _, f := range fields {
			if !submission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != submission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Code(); ok {
		_spec.SetField(submission.FieldCode, field.TypeString, value)
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.SetField(submission.FieldStatus, field.TypeInt16, value)
	}
	if value, ok := suo.mutation.AddedStatus(); ok {
		_spec.AddField(submission.FieldStatus, field.TypeInt16, value)
	}
	if value, ok := suo.mutation.Point(); ok {
		_spec.SetField(submission.FieldPoint, field.TypeInt16, value)
	}
	if value, ok := suo.mutation.AddedPoint(); ok {
		_spec.AddField(submission.FieldPoint, field.TypeInt16, value)
	}
	if value, ok := suo.mutation.CreateTime(); ok {
		_spec.SetField(submission.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := suo.mutation.TotalTime(); ok {
		_spec.SetField(submission.FieldTotalTime, field.TypeInt32, value)
	}
	if value, ok := suo.mutation.AddedTotalTime(); ok {
		_spec.AddField(submission.FieldTotalTime, field.TypeInt32, value)
	}
	if value, ok := suo.mutation.MaxMemory(); ok {
		_spec.SetField(submission.FieldMaxMemory, field.TypeInt32, value)
	}
	if value, ok := suo.mutation.AddedMaxMemory(); ok {
		_spec.AddField(submission.FieldMaxMemory, field.TypeInt32, value)
	}
	if value, ok := suo.mutation.Language(); ok {
		_spec.SetField(submission.FieldLanguage, field.TypeString, value)
	}
	if value, ok := suo.mutation.CaseVersion(); ok {
		_spec.SetField(submission.FieldCaseVersion, field.TypeInt8, value)
	}
	if value, ok := suo.mutation.AddedCaseVersion(); ok {
		_spec.AddField(submission.FieldCaseVersion, field.TypeInt8, value)
	}
	if suo.mutation.SubmissionCasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   submission.SubmissionCasesTable,
			Columns: []string{submission.SubmissionCasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submissioncase.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedSubmissionCasesIDs(); len(nodes) > 0 && !suo.mutation.SubmissionCasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   submission.SubmissionCasesTable,
			Columns: []string{submission.SubmissionCasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submissioncase.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SubmissionCasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   submission.SubmissionCasesTable,
			Columns: []string{submission.SubmissionCasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submissioncase.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submission.ProblemsTable,
			Columns: []string{submission.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ProblemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submission.ProblemsTable,
			Columns: []string{submission.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submission.UsersTable,
			Columns: []string{submission.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submission.UsersTable,
			Columns: []string{submission.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ContestResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   submission.ContestResultsTable,
			Columns: submission.ContestResultsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contestresult.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedContestResultsIDs(); len(nodes) > 0 && !suo.mutation.ContestResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   submission.ContestResultsTable,
			Columns: submission.ContestResultsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contestresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ContestResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   submission.ContestResultsTable,
			Columns: submission.ContestResultsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contestresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Submission{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{submission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
