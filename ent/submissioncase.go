// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"sastoj/ent/problemcase"
	"sastoj/ent/submission"
	"sastoj/ent/submissioncase"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SubmissionCase is the model entity for the SubmissionCase schema.
type SubmissionCase struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// State holds the value of the "state" field.
	State int16 `json:"state,omitempty"`
	// Point holds the value of the "point" field.
	Point int16 `json:"point,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// Time holds the value of the "time" field.
	Time int32 `json:"time,omitempty"`
	// Memory holds the value of the "memory" field.
	Memory int32 `json:"memory,omitempty"`
	// SubmissionID holds the value of the "submission_id" field.
	SubmissionID int64 `json:"submission_id,omitempty"`
	// ProblemCaseID holds the value of the "problem_case_id" field.
	ProblemCaseID int64 `json:"problem_case_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubmissionCaseQuery when eager-loading is set.
	Edges        SubmissionCaseEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SubmissionCaseEdges holds the relations/edges for other nodes in the graph.
type SubmissionCaseEdges struct {
	// Submission holds the value of the submission edge.
	Submission *Submission `json:"submission,omitempty"`
	// ProblemCases holds the value of the problem_cases edge.
	ProblemCases *ProblemCase `json:"problem_cases,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SubmissionOrErr returns the Submission value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubmissionCaseEdges) SubmissionOrErr() (*Submission, error) {
	if e.loadedTypes[0] {
		if e.Submission == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: submission.Label}
		}
		return e.Submission, nil
	}
	return nil, &NotLoadedError{edge: "submission"}
}

// ProblemCasesOrErr returns the ProblemCases value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubmissionCaseEdges) ProblemCasesOrErr() (*ProblemCase, error) {
	if e.loadedTypes[1] {
		if e.ProblemCases == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: problemcase.Label}
		}
		return e.ProblemCases, nil
	}
	return nil, &NotLoadedError{edge: "problem_cases"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SubmissionCase) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case submissioncase.FieldID, submissioncase.FieldState, submissioncase.FieldPoint, submissioncase.FieldTime, submissioncase.FieldMemory, submissioncase.FieldSubmissionID, submissioncase.FieldProblemCaseID:
			values[i] = new(sql.NullInt64)
		case submissioncase.FieldMessage:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SubmissionCase fields.
func (sc *SubmissionCase) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case submissioncase.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sc.ID = int64(value.Int64)
		case submissioncase.FieldState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				sc.State = int16(value.Int64)
			}
		case submissioncase.FieldPoint:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field point", values[i])
			} else if value.Valid {
				sc.Point = int16(value.Int64)
			}
		case submissioncase.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				sc.Message = value.String
			}
		case submissioncase.FieldTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				sc.Time = int32(value.Int64)
			}
		case submissioncase.FieldMemory:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field memory", values[i])
			} else if value.Valid {
				sc.Memory = int32(value.Int64)
			}
		case submissioncase.FieldSubmissionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field submission_id", values[i])
			} else if value.Valid {
				sc.SubmissionID = value.Int64
			}
		case submissioncase.FieldProblemCaseID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field problem_case_id", values[i])
			} else if value.Valid {
				sc.ProblemCaseID = value.Int64
			}
		default:
			sc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SubmissionCase.
// This includes values selected through modifiers, order, etc.
func (sc *SubmissionCase) Value(name string) (ent.Value, error) {
	return sc.selectValues.Get(name)
}

// QuerySubmission queries the "submission" edge of the SubmissionCase entity.
func (sc *SubmissionCase) QuerySubmission() *SubmissionQuery {
	return NewSubmissionCaseClient(sc.config).QuerySubmission(sc)
}

// QueryProblemCases queries the "problem_cases" edge of the SubmissionCase entity.
func (sc *SubmissionCase) QueryProblemCases() *ProblemCaseQuery {
	return NewSubmissionCaseClient(sc.config).QueryProblemCases(sc)
}

// Update returns a builder for updating this SubmissionCase.
// Note that you need to call SubmissionCase.Unwrap() before calling this method if this SubmissionCase
// was returned from a transaction, and the transaction was committed or rolled back.
func (sc *SubmissionCase) Update() *SubmissionCaseUpdateOne {
	return NewSubmissionCaseClient(sc.config).UpdateOne(sc)
}

// Unwrap unwraps the SubmissionCase entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sc *SubmissionCase) Unwrap() *SubmissionCase {
	_tx, ok := sc.config.driver.(*txDriver)
	if !ok {
		panic("ent: SubmissionCase is not a transactional entity")
	}
	sc.config.driver = _tx.drv
	return sc
}

// String implements the fmt.Stringer.
func (sc *SubmissionCase) String() string {
	var builder strings.Builder
	builder.WriteString("SubmissionCase(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sc.ID))
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", sc.State))
	builder.WriteString(", ")
	builder.WriteString("point=")
	builder.WriteString(fmt.Sprintf("%v", sc.Point))
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(sc.Message)
	builder.WriteString(", ")
	builder.WriteString("time=")
	builder.WriteString(fmt.Sprintf("%v", sc.Time))
	builder.WriteString(", ")
	builder.WriteString("memory=")
	builder.WriteString(fmt.Sprintf("%v", sc.Memory))
	builder.WriteString(", ")
	builder.WriteString("submission_id=")
	builder.WriteString(fmt.Sprintf("%v", sc.SubmissionID))
	builder.WriteString(", ")
	builder.WriteString("problem_case_id=")
	builder.WriteString(fmt.Sprintf("%v", sc.ProblemCaseID))
	builder.WriteByte(')')
	return builder.String()
}

// SubmissionCases is a parsable slice of SubmissionCase.
type SubmissionCases []*SubmissionCase
