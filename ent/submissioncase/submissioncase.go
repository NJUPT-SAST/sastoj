// Code generated by ent, DO NOT EDIT.

package submissioncase

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the submissioncase type in the database.
	Label = "submission_case"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldPoint holds the string denoting the point field in the database.
	FieldPoint = "point"
	// FieldTime holds the string denoting the time field in the database.
	FieldTime = "time"
	// FieldMemory holds the string denoting the memory field in the database.
	FieldMemory = "memory"
	// FieldStdout holds the string denoting the stdout field in the database.
	FieldStdout = "stdout"
	// FieldStderr holds the string denoting the stderr field in the database.
	FieldStderr = "stderr"
	// FieldSubmissionSubtaskID holds the string denoting the submission_subtask_id field in the database.
	FieldSubmissionSubtaskID = "submission_subtask_id"
	// EdgeSubmissionSubtasks holds the string denoting the submission_subtasks edge name in mutations.
	EdgeSubmissionSubtasks = "submission_subtasks"
	// Table holds the table name of the submissioncase in the database.
	Table = "submission_cases"
	// SubmissionSubtasksTable is the table that holds the submission_subtasks relation/edge.
	SubmissionSubtasksTable = "submission_cases"
	// SubmissionSubtasksInverseTable is the table name for the SubmissionSubtask entity.
	// It exists in this package in order to avoid circular dependency with the "submissionsubtask" package.
	SubmissionSubtasksInverseTable = "submission_subtasks"
	// SubmissionSubtasksColumn is the table column denoting the submission_subtasks relation/edge.
	SubmissionSubtasksColumn = "submission_subtask_id"
)

// Columns holds all SQL columns for submissioncase fields.
var Columns = []string{
	FieldID,
	FieldState,
	FieldPoint,
	FieldTime,
	FieldMemory,
	FieldStdout,
	FieldStderr,
	FieldSubmissionSubtaskID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStdout holds the default value on creation for the "stdout" field.
	DefaultStdout string
	// DefaultStderr holds the default value on creation for the "stderr" field.
	DefaultStderr string
)

// OrderOption defines the ordering options for the SubmissionCase queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByPoint orders the results by the point field.
func ByPoint(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPoint, opts...).ToFunc()
}

// ByTime orders the results by the time field.
func ByTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTime, opts...).ToFunc()
}

// ByMemory orders the results by the memory field.
func ByMemory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMemory, opts...).ToFunc()
}

// ByStdout orders the results by the stdout field.
func ByStdout(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStdout, opts...).ToFunc()
}

// ByStderr orders the results by the stderr field.
func ByStderr(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStderr, opts...).ToFunc()
}

// BySubmissionSubtaskID orders the results by the submission_subtask_id field.
func BySubmissionSubtaskID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubmissionSubtaskID, opts...).ToFunc()
}

// BySubmissionSubtasksField orders the results by submission_subtasks field.
func BySubmissionSubtasksField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubmissionSubtasksStep(), sql.OrderByField(field, opts...))
	}
}
func newSubmissionSubtasksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubmissionSubtasksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SubmissionSubtasksTable, SubmissionSubtasksColumn),
	)
}
