// Code generated by ent, DO NOT EDIT.

package submissioncase

import (
	"sastoj/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldLTE(FieldID, id))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v int16) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldEQ(FieldState, v))
}

// Point applies equality check predicate on the "point" field. It's identical to PointEQ.
func Point(v int16) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldEQ(FieldPoint, v))
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldEQ(FieldMessage, v))
}

// Time applies equality check predicate on the "time" field. It's identical to TimeEQ.
func Time(v int32) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldEQ(FieldTime, v))
}

// Memory applies equality check predicate on the "memory" field. It's identical to MemoryEQ.
func Memory(v int32) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldEQ(FieldMemory, v))
}

// SubmissionID applies equality check predicate on the "submission_id" field. It's identical to SubmissionIDEQ.
func SubmissionID(v int64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldEQ(FieldSubmissionID, v))
}

// ProblemCaseID applies equality check predicate on the "problem_case_id" field. It's identical to ProblemCaseIDEQ.
func ProblemCaseID(v int64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldEQ(FieldProblemCaseID, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v int16) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v int16) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...int16) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...int16) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v int16) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v int16) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v int16) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v int16) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldLTE(FieldState, v))
}

// PointEQ applies the EQ predicate on the "point" field.
func PointEQ(v int16) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldEQ(FieldPoint, v))
}

// PointNEQ applies the NEQ predicate on the "point" field.
func PointNEQ(v int16) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldNEQ(FieldPoint, v))
}

// PointIn applies the In predicate on the "point" field.
func PointIn(vs ...int16) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldIn(FieldPoint, vs...))
}

// PointNotIn applies the NotIn predicate on the "point" field.
func PointNotIn(vs ...int16) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldNotIn(FieldPoint, vs...))
}

// PointGT applies the GT predicate on the "point" field.
func PointGT(v int16) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldGT(FieldPoint, v))
}

// PointGTE applies the GTE predicate on the "point" field.
func PointGTE(v int16) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldGTE(FieldPoint, v))
}

// PointLT applies the LT predicate on the "point" field.
func PointLT(v int16) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldLT(FieldPoint, v))
}

// PointLTE applies the LTE predicate on the "point" field.
func PointLTE(v int16) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldLTE(FieldPoint, v))
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldEQ(FieldMessage, v))
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldNEQ(FieldMessage, v))
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldIn(FieldMessage, vs...))
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldNotIn(FieldMessage, vs...))
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldGT(FieldMessage, v))
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldGTE(FieldMessage, v))
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldLT(FieldMessage, v))
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldLTE(FieldMessage, v))
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldContains(FieldMessage, v))
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldHasPrefix(FieldMessage, v))
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldHasSuffix(FieldMessage, v))
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldEqualFold(FieldMessage, v))
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldContainsFold(FieldMessage, v))
}

// TimeEQ applies the EQ predicate on the "time" field.
func TimeEQ(v int32) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldEQ(FieldTime, v))
}

// TimeNEQ applies the NEQ predicate on the "time" field.
func TimeNEQ(v int32) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldNEQ(FieldTime, v))
}

// TimeIn applies the In predicate on the "time" field.
func TimeIn(vs ...int32) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldIn(FieldTime, vs...))
}

// TimeNotIn applies the NotIn predicate on the "time" field.
func TimeNotIn(vs ...int32) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldNotIn(FieldTime, vs...))
}

// TimeGT applies the GT predicate on the "time" field.
func TimeGT(v int32) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldGT(FieldTime, v))
}

// TimeGTE applies the GTE predicate on the "time" field.
func TimeGTE(v int32) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldGTE(FieldTime, v))
}

// TimeLT applies the LT predicate on the "time" field.
func TimeLT(v int32) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldLT(FieldTime, v))
}

// TimeLTE applies the LTE predicate on the "time" field.
func TimeLTE(v int32) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldLTE(FieldTime, v))
}

// MemoryEQ applies the EQ predicate on the "memory" field.
func MemoryEQ(v int32) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldEQ(FieldMemory, v))
}

// MemoryNEQ applies the NEQ predicate on the "memory" field.
func MemoryNEQ(v int32) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldNEQ(FieldMemory, v))
}

// MemoryIn applies the In predicate on the "memory" field.
func MemoryIn(vs ...int32) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldIn(FieldMemory, vs...))
}

// MemoryNotIn applies the NotIn predicate on the "memory" field.
func MemoryNotIn(vs ...int32) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldNotIn(FieldMemory, vs...))
}

// MemoryGT applies the GT predicate on the "memory" field.
func MemoryGT(v int32) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldGT(FieldMemory, v))
}

// MemoryGTE applies the GTE predicate on the "memory" field.
func MemoryGTE(v int32) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldGTE(FieldMemory, v))
}

// MemoryLT applies the LT predicate on the "memory" field.
func MemoryLT(v int32) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldLT(FieldMemory, v))
}

// MemoryLTE applies the LTE predicate on the "memory" field.
func MemoryLTE(v int32) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldLTE(FieldMemory, v))
}

// SubmissionIDEQ applies the EQ predicate on the "submission_id" field.
func SubmissionIDEQ(v int64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldEQ(FieldSubmissionID, v))
}

// SubmissionIDNEQ applies the NEQ predicate on the "submission_id" field.
func SubmissionIDNEQ(v int64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldNEQ(FieldSubmissionID, v))
}

// SubmissionIDIn applies the In predicate on the "submission_id" field.
func SubmissionIDIn(vs ...int64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldIn(FieldSubmissionID, vs...))
}

// SubmissionIDNotIn applies the NotIn predicate on the "submission_id" field.
func SubmissionIDNotIn(vs ...int64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldNotIn(FieldSubmissionID, vs...))
}

// ProblemCaseIDEQ applies the EQ predicate on the "problem_case_id" field.
func ProblemCaseIDEQ(v int64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldEQ(FieldProblemCaseID, v))
}

// ProblemCaseIDNEQ applies the NEQ predicate on the "problem_case_id" field.
func ProblemCaseIDNEQ(v int64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldNEQ(FieldProblemCaseID, v))
}

// ProblemCaseIDIn applies the In predicate on the "problem_case_id" field.
func ProblemCaseIDIn(vs ...int64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldIn(FieldProblemCaseID, vs...))
}

// ProblemCaseIDNotIn applies the NotIn predicate on the "problem_case_id" field.
func ProblemCaseIDNotIn(vs ...int64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldNotIn(FieldProblemCaseID, vs...))
}

// HasSubmission applies the HasEdge predicate on the "submission" edge.
func HasSubmission() predicate.SubmissionCase {
	return predicate.SubmissionCase(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SubmissionTable, SubmissionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubmissionWith applies the HasEdge predicate on the "submission" edge with a given conditions (other predicates).
func HasSubmissionWith(preds ...predicate.Submission) predicate.SubmissionCase {
	return predicate.SubmissionCase(func(s *sql.Selector) {
		step := newSubmissionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProblemCases applies the HasEdge predicate on the "problem_cases" edge.
func HasProblemCases() predicate.SubmissionCase {
	return predicate.SubmissionCase(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProblemCasesTable, ProblemCasesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProblemCasesWith applies the HasEdge predicate on the "problem_cases" edge with a given conditions (other predicates).
func HasProblemCasesWith(preds ...predicate.ProblemCase) predicate.SubmissionCase {
	return predicate.SubmissionCase(func(s *sql.Selector) {
		step := newProblemCasesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SubmissionCase) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SubmissionCase) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SubmissionCase) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.NotPredicates(p))
}
