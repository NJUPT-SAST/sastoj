// Code generated by ent, DO NOT EDIT.

package submissioncase

import (
	"sastoj/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldLTE(FieldID, id))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v int16) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldEQ(FieldState, v))
}

// Point applies equality check predicate on the "point" field. It's identical to PointEQ.
func Point(v int16) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldEQ(FieldPoint, v))
}

// Time applies equality check predicate on the "time" field. It's identical to TimeEQ.
func Time(v uint64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldEQ(FieldTime, v))
}

// Memory applies equality check predicate on the "memory" field. It's identical to MemoryEQ.
func Memory(v uint64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldEQ(FieldMemory, v))
}

// Stdout applies equality check predicate on the "stdout" field. It's identical to StdoutEQ.
func Stdout(v string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldEQ(FieldStdout, v))
}

// Stderr applies equality check predicate on the "stderr" field. It's identical to StderrEQ.
func Stderr(v string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldEQ(FieldStderr, v))
}

// SubmissionSubtaskID applies equality check predicate on the "submission_subtask_id" field. It's identical to SubmissionSubtaskIDEQ.
func SubmissionSubtaskID(v int64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldEQ(FieldSubmissionSubtaskID, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v int16) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v int16) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...int16) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...int16) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v int16) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v int16) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v int16) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v int16) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldLTE(FieldState, v))
}

// PointEQ applies the EQ predicate on the "point" field.
func PointEQ(v int16) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldEQ(FieldPoint, v))
}

// PointNEQ applies the NEQ predicate on the "point" field.
func PointNEQ(v int16) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldNEQ(FieldPoint, v))
}

// PointIn applies the In predicate on the "point" field.
func PointIn(vs ...int16) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldIn(FieldPoint, vs...))
}

// PointNotIn applies the NotIn predicate on the "point" field.
func PointNotIn(vs ...int16) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldNotIn(FieldPoint, vs...))
}

// PointGT applies the GT predicate on the "point" field.
func PointGT(v int16) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldGT(FieldPoint, v))
}

// PointGTE applies the GTE predicate on the "point" field.
func PointGTE(v int16) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldGTE(FieldPoint, v))
}

// PointLT applies the LT predicate on the "point" field.
func PointLT(v int16) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldLT(FieldPoint, v))
}

// PointLTE applies the LTE predicate on the "point" field.
func PointLTE(v int16) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldLTE(FieldPoint, v))
}

// TimeEQ applies the EQ predicate on the "time" field.
func TimeEQ(v uint64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldEQ(FieldTime, v))
}

// TimeNEQ applies the NEQ predicate on the "time" field.
func TimeNEQ(v uint64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldNEQ(FieldTime, v))
}

// TimeIn applies the In predicate on the "time" field.
func TimeIn(vs ...uint64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldIn(FieldTime, vs...))
}

// TimeNotIn applies the NotIn predicate on the "time" field.
func TimeNotIn(vs ...uint64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldNotIn(FieldTime, vs...))
}

// TimeGT applies the GT predicate on the "time" field.
func TimeGT(v uint64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldGT(FieldTime, v))
}

// TimeGTE applies the GTE predicate on the "time" field.
func TimeGTE(v uint64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldGTE(FieldTime, v))
}

// TimeLT applies the LT predicate on the "time" field.
func TimeLT(v uint64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldLT(FieldTime, v))
}

// TimeLTE applies the LTE predicate on the "time" field.
func TimeLTE(v uint64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldLTE(FieldTime, v))
}

// MemoryEQ applies the EQ predicate on the "memory" field.
func MemoryEQ(v uint64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldEQ(FieldMemory, v))
}

// MemoryNEQ applies the NEQ predicate on the "memory" field.
func MemoryNEQ(v uint64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldNEQ(FieldMemory, v))
}

// MemoryIn applies the In predicate on the "memory" field.
func MemoryIn(vs ...uint64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldIn(FieldMemory, vs...))
}

// MemoryNotIn applies the NotIn predicate on the "memory" field.
func MemoryNotIn(vs ...uint64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldNotIn(FieldMemory, vs...))
}

// MemoryGT applies the GT predicate on the "memory" field.
func MemoryGT(v uint64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldGT(FieldMemory, v))
}

// MemoryGTE applies the GTE predicate on the "memory" field.
func MemoryGTE(v uint64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldGTE(FieldMemory, v))
}

// MemoryLT applies the LT predicate on the "memory" field.
func MemoryLT(v uint64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldLT(FieldMemory, v))
}

// MemoryLTE applies the LTE predicate on the "memory" field.
func MemoryLTE(v uint64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldLTE(FieldMemory, v))
}

// StdoutEQ applies the EQ predicate on the "stdout" field.
func StdoutEQ(v string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldEQ(FieldStdout, v))
}

// StdoutNEQ applies the NEQ predicate on the "stdout" field.
func StdoutNEQ(v string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldNEQ(FieldStdout, v))
}

// StdoutIn applies the In predicate on the "stdout" field.
func StdoutIn(vs ...string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldIn(FieldStdout, vs...))
}

// StdoutNotIn applies the NotIn predicate on the "stdout" field.
func StdoutNotIn(vs ...string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldNotIn(FieldStdout, vs...))
}

// StdoutGT applies the GT predicate on the "stdout" field.
func StdoutGT(v string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldGT(FieldStdout, v))
}

// StdoutGTE applies the GTE predicate on the "stdout" field.
func StdoutGTE(v string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldGTE(FieldStdout, v))
}

// StdoutLT applies the LT predicate on the "stdout" field.
func StdoutLT(v string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldLT(FieldStdout, v))
}

// StdoutLTE applies the LTE predicate on the "stdout" field.
func StdoutLTE(v string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldLTE(FieldStdout, v))
}

// StdoutContains applies the Contains predicate on the "stdout" field.
func StdoutContains(v string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldContains(FieldStdout, v))
}

// StdoutHasPrefix applies the HasPrefix predicate on the "stdout" field.
func StdoutHasPrefix(v string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldHasPrefix(FieldStdout, v))
}

// StdoutHasSuffix applies the HasSuffix predicate on the "stdout" field.
func StdoutHasSuffix(v string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldHasSuffix(FieldStdout, v))
}

// StdoutEqualFold applies the EqualFold predicate on the "stdout" field.
func StdoutEqualFold(v string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldEqualFold(FieldStdout, v))
}

// StdoutContainsFold applies the ContainsFold predicate on the "stdout" field.
func StdoutContainsFold(v string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldContainsFold(FieldStdout, v))
}

// StderrEQ applies the EQ predicate on the "stderr" field.
func StderrEQ(v string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldEQ(FieldStderr, v))
}

// StderrNEQ applies the NEQ predicate on the "stderr" field.
func StderrNEQ(v string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldNEQ(FieldStderr, v))
}

// StderrIn applies the In predicate on the "stderr" field.
func StderrIn(vs ...string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldIn(FieldStderr, vs...))
}

// StderrNotIn applies the NotIn predicate on the "stderr" field.
func StderrNotIn(vs ...string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldNotIn(FieldStderr, vs...))
}

// StderrGT applies the GT predicate on the "stderr" field.
func StderrGT(v string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldGT(FieldStderr, v))
}

// StderrGTE applies the GTE predicate on the "stderr" field.
func StderrGTE(v string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldGTE(FieldStderr, v))
}

// StderrLT applies the LT predicate on the "stderr" field.
func StderrLT(v string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldLT(FieldStderr, v))
}

// StderrLTE applies the LTE predicate on the "stderr" field.
func StderrLTE(v string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldLTE(FieldStderr, v))
}

// StderrContains applies the Contains predicate on the "stderr" field.
func StderrContains(v string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldContains(FieldStderr, v))
}

// StderrHasPrefix applies the HasPrefix predicate on the "stderr" field.
func StderrHasPrefix(v string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldHasPrefix(FieldStderr, v))
}

// StderrHasSuffix applies the HasSuffix predicate on the "stderr" field.
func StderrHasSuffix(v string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldHasSuffix(FieldStderr, v))
}

// StderrEqualFold applies the EqualFold predicate on the "stderr" field.
func StderrEqualFold(v string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldEqualFold(FieldStderr, v))
}

// StderrContainsFold applies the ContainsFold predicate on the "stderr" field.
func StderrContainsFold(v string) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldContainsFold(FieldStderr, v))
}

// SubmissionSubtaskIDEQ applies the EQ predicate on the "submission_subtask_id" field.
func SubmissionSubtaskIDEQ(v int64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldEQ(FieldSubmissionSubtaskID, v))
}

// SubmissionSubtaskIDNEQ applies the NEQ predicate on the "submission_subtask_id" field.
func SubmissionSubtaskIDNEQ(v int64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldNEQ(FieldSubmissionSubtaskID, v))
}

// SubmissionSubtaskIDIn applies the In predicate on the "submission_subtask_id" field.
func SubmissionSubtaskIDIn(vs ...int64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldIn(FieldSubmissionSubtaskID, vs...))
}

// SubmissionSubtaskIDNotIn applies the NotIn predicate on the "submission_subtask_id" field.
func SubmissionSubtaskIDNotIn(vs ...int64) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.FieldNotIn(FieldSubmissionSubtaskID, vs...))
}

// HasSubmissionSubtasks applies the HasEdge predicate on the "submission_subtasks" edge.
func HasSubmissionSubtasks() predicate.SubmissionCase {
	return predicate.SubmissionCase(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SubmissionSubtasksTable, SubmissionSubtasksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubmissionSubtasksWith applies the HasEdge predicate on the "submission_subtasks" edge with a given conditions (other predicates).
func HasSubmissionSubtasksWith(preds ...predicate.SubmissionSubtask) predicate.SubmissionCase {
	return predicate.SubmissionCase(func(s *sql.Selector) {
		step := newSubmissionSubtasksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SubmissionCase) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SubmissionCase) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SubmissionCase) predicate.SubmissionCase {
	return predicate.SubmissionCase(sql.NotPredicates(p))
}
