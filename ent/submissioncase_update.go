// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sastoj/ent/predicate"
	"sastoj/ent/submissioncase"
	"sastoj/ent/submissionsubtask"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubmissionCaseUpdate is the builder for updating SubmissionCase entities.
type SubmissionCaseUpdate struct {
	config
	hooks    []Hook
	mutation *SubmissionCaseMutation
}

// Where appends a list predicates to the SubmissionCaseUpdate builder.
func (scu *SubmissionCaseUpdate) Where(ps ...predicate.SubmissionCase) *SubmissionCaseUpdate {
	scu.mutation.Where(ps...)
	return scu
}

// SetState sets the "state" field.
func (scu *SubmissionCaseUpdate) SetState(i int16) *SubmissionCaseUpdate {
	scu.mutation.ResetState()
	scu.mutation.SetState(i)
	return scu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (scu *SubmissionCaseUpdate) SetNillableState(i *int16) *SubmissionCaseUpdate {
	if i != nil {
		scu.SetState(*i)
	}
	return scu
}

// AddState adds i to the "state" field.
func (scu *SubmissionCaseUpdate) AddState(i int16) *SubmissionCaseUpdate {
	scu.mutation.AddState(i)
	return scu
}

// SetPoint sets the "point" field.
func (scu *SubmissionCaseUpdate) SetPoint(i int16) *SubmissionCaseUpdate {
	scu.mutation.ResetPoint()
	scu.mutation.SetPoint(i)
	return scu
}

// SetNillablePoint sets the "point" field if the given value is not nil.
func (scu *SubmissionCaseUpdate) SetNillablePoint(i *int16) *SubmissionCaseUpdate {
	if i != nil {
		scu.SetPoint(*i)
	}
	return scu
}

// AddPoint adds i to the "point" field.
func (scu *SubmissionCaseUpdate) AddPoint(i int16) *SubmissionCaseUpdate {
	scu.mutation.AddPoint(i)
	return scu
}

// SetTime sets the "time" field.
func (scu *SubmissionCaseUpdate) SetTime(u uint64) *SubmissionCaseUpdate {
	scu.mutation.ResetTime()
	scu.mutation.SetTime(u)
	return scu
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (scu *SubmissionCaseUpdate) SetNillableTime(u *uint64) *SubmissionCaseUpdate {
	if u != nil {
		scu.SetTime(*u)
	}
	return scu
}

// AddTime adds u to the "time" field.
func (scu *SubmissionCaseUpdate) AddTime(u int64) *SubmissionCaseUpdate {
	scu.mutation.AddTime(u)
	return scu
}

// SetMemory sets the "memory" field.
func (scu *SubmissionCaseUpdate) SetMemory(u uint64) *SubmissionCaseUpdate {
	scu.mutation.ResetMemory()
	scu.mutation.SetMemory(u)
	return scu
}

// SetNillableMemory sets the "memory" field if the given value is not nil.
func (scu *SubmissionCaseUpdate) SetNillableMemory(u *uint64) *SubmissionCaseUpdate {
	if u != nil {
		scu.SetMemory(*u)
	}
	return scu
}

// AddMemory adds u to the "memory" field.
func (scu *SubmissionCaseUpdate) AddMemory(u int64) *SubmissionCaseUpdate {
	scu.mutation.AddMemory(u)
	return scu
}

// SetStdout sets the "stdout" field.
func (scu *SubmissionCaseUpdate) SetStdout(s string) *SubmissionCaseUpdate {
	scu.mutation.SetStdout(s)
	return scu
}

// SetNillableStdout sets the "stdout" field if the given value is not nil.
func (scu *SubmissionCaseUpdate) SetNillableStdout(s *string) *SubmissionCaseUpdate {
	if s != nil {
		scu.SetStdout(*s)
	}
	return scu
}

// SetStderr sets the "stderr" field.
func (scu *SubmissionCaseUpdate) SetStderr(s string) *SubmissionCaseUpdate {
	scu.mutation.SetStderr(s)
	return scu
}

// SetNillableStderr sets the "stderr" field if the given value is not nil.
func (scu *SubmissionCaseUpdate) SetNillableStderr(s *string) *SubmissionCaseUpdate {
	if s != nil {
		scu.SetStderr(*s)
	}
	return scu
}

// SetSubmissionSubtaskID sets the "submission_subtask_id" field.
func (scu *SubmissionCaseUpdate) SetSubmissionSubtaskID(i int64) *SubmissionCaseUpdate {
	scu.mutation.SetSubmissionSubtaskID(i)
	return scu
}

// SetNillableSubmissionSubtaskID sets the "submission_subtask_id" field if the given value is not nil.
func (scu *SubmissionCaseUpdate) SetNillableSubmissionSubtaskID(i *int64) *SubmissionCaseUpdate {
	if i != nil {
		scu.SetSubmissionSubtaskID(*i)
	}
	return scu
}

// SetSubmissionSubtasksID sets the "submission_subtasks" edge to the SubmissionSubtask entity by ID.
func (scu *SubmissionCaseUpdate) SetSubmissionSubtasksID(id int64) *SubmissionCaseUpdate {
	scu.mutation.SetSubmissionSubtasksID(id)
	return scu
}

// SetSubmissionSubtasks sets the "submission_subtasks" edge to the SubmissionSubtask entity.
func (scu *SubmissionCaseUpdate) SetSubmissionSubtasks(s *SubmissionSubtask) *SubmissionCaseUpdate {
	return scu.SetSubmissionSubtasksID(s.ID)
}

// Mutation returns the SubmissionCaseMutation object of the builder.
func (scu *SubmissionCaseUpdate) Mutation() *SubmissionCaseMutation {
	return scu.mutation
}

// ClearSubmissionSubtasks clears the "submission_subtasks" edge to the SubmissionSubtask entity.
func (scu *SubmissionCaseUpdate) ClearSubmissionSubtasks() *SubmissionCaseUpdate {
	scu.mutation.ClearSubmissionSubtasks()
	return scu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scu *SubmissionCaseUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, scu.sqlSave, scu.mutation, scu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scu *SubmissionCaseUpdate) SaveX(ctx context.Context) int {
	affected, err := scu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scu *SubmissionCaseUpdate) Exec(ctx context.Context) error {
	_, err := scu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scu *SubmissionCaseUpdate) ExecX(ctx context.Context) {
	if err := scu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scu *SubmissionCaseUpdate) check() error {
	if _, ok := scu.mutation.SubmissionSubtasksID(); scu.mutation.SubmissionSubtasksCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SubmissionCase.submission_subtasks"`)
	}
	return nil
}

func (scu *SubmissionCaseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := scu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(submissioncase.Table, submissioncase.Columns, sqlgraph.NewFieldSpec(submissioncase.FieldID, field.TypeInt64))
	if ps := scu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scu.mutation.State(); ok {
		_spec.SetField(submissioncase.FieldState, field.TypeInt16, value)
	}
	if value, ok := scu.mutation.AddedState(); ok {
		_spec.AddField(submissioncase.FieldState, field.TypeInt16, value)
	}
	if value, ok := scu.mutation.Point(); ok {
		_spec.SetField(submissioncase.FieldPoint, field.TypeInt16, value)
	}
	if value, ok := scu.mutation.AddedPoint(); ok {
		_spec.AddField(submissioncase.FieldPoint, field.TypeInt16, value)
	}
	if value, ok := scu.mutation.Time(); ok {
		_spec.SetField(submissioncase.FieldTime, field.TypeUint64, value)
	}
	if value, ok := scu.mutation.AddedTime(); ok {
		_spec.AddField(submissioncase.FieldTime, field.TypeUint64, value)
	}
	if value, ok := scu.mutation.Memory(); ok {
		_spec.SetField(submissioncase.FieldMemory, field.TypeUint64, value)
	}
	if value, ok := scu.mutation.AddedMemory(); ok {
		_spec.AddField(submissioncase.FieldMemory, field.TypeUint64, value)
	}
	if value, ok := scu.mutation.Stdout(); ok {
		_spec.SetField(submissioncase.FieldStdout, field.TypeString, value)
	}
	if value, ok := scu.mutation.Stderr(); ok {
		_spec.SetField(submissioncase.FieldStderr, field.TypeString, value)
	}
	if scu.mutation.SubmissionSubtasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submissioncase.SubmissionSubtasksTable,
			Columns: []string{submissioncase.SubmissionSubtasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submissionsubtask.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.SubmissionSubtasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submissioncase.SubmissionSubtasksTable,
			Columns: []string{submissioncase.SubmissionSubtasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submissionsubtask.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, scu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{submissioncase.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	scu.mutation.done = true
	return n, nil
}

// SubmissionCaseUpdateOne is the builder for updating a single SubmissionCase entity.
type SubmissionCaseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubmissionCaseMutation
}

// SetState sets the "state" field.
func (scuo *SubmissionCaseUpdateOne) SetState(i int16) *SubmissionCaseUpdateOne {
	scuo.mutation.ResetState()
	scuo.mutation.SetState(i)
	return scuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (scuo *SubmissionCaseUpdateOne) SetNillableState(i *int16) *SubmissionCaseUpdateOne {
	if i != nil {
		scuo.SetState(*i)
	}
	return scuo
}

// AddState adds i to the "state" field.
func (scuo *SubmissionCaseUpdateOne) AddState(i int16) *SubmissionCaseUpdateOne {
	scuo.mutation.AddState(i)
	return scuo
}

// SetPoint sets the "point" field.
func (scuo *SubmissionCaseUpdateOne) SetPoint(i int16) *SubmissionCaseUpdateOne {
	scuo.mutation.ResetPoint()
	scuo.mutation.SetPoint(i)
	return scuo
}

// SetNillablePoint sets the "point" field if the given value is not nil.
func (scuo *SubmissionCaseUpdateOne) SetNillablePoint(i *int16) *SubmissionCaseUpdateOne {
	if i != nil {
		scuo.SetPoint(*i)
	}
	return scuo
}

// AddPoint adds i to the "point" field.
func (scuo *SubmissionCaseUpdateOne) AddPoint(i int16) *SubmissionCaseUpdateOne {
	scuo.mutation.AddPoint(i)
	return scuo
}

// SetTime sets the "time" field.
func (scuo *SubmissionCaseUpdateOne) SetTime(u uint64) *SubmissionCaseUpdateOne {
	scuo.mutation.ResetTime()
	scuo.mutation.SetTime(u)
	return scuo
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (scuo *SubmissionCaseUpdateOne) SetNillableTime(u *uint64) *SubmissionCaseUpdateOne {
	if u != nil {
		scuo.SetTime(*u)
	}
	return scuo
}

// AddTime adds u to the "time" field.
func (scuo *SubmissionCaseUpdateOne) AddTime(u int64) *SubmissionCaseUpdateOne {
	scuo.mutation.AddTime(u)
	return scuo
}

// SetMemory sets the "memory" field.
func (scuo *SubmissionCaseUpdateOne) SetMemory(u uint64) *SubmissionCaseUpdateOne {
	scuo.mutation.ResetMemory()
	scuo.mutation.SetMemory(u)
	return scuo
}

// SetNillableMemory sets the "memory" field if the given value is not nil.
func (scuo *SubmissionCaseUpdateOne) SetNillableMemory(u *uint64) *SubmissionCaseUpdateOne {
	if u != nil {
		scuo.SetMemory(*u)
	}
	return scuo
}

// AddMemory adds u to the "memory" field.
func (scuo *SubmissionCaseUpdateOne) AddMemory(u int64) *SubmissionCaseUpdateOne {
	scuo.mutation.AddMemory(u)
	return scuo
}

// SetStdout sets the "stdout" field.
func (scuo *SubmissionCaseUpdateOne) SetStdout(s string) *SubmissionCaseUpdateOne {
	scuo.mutation.SetStdout(s)
	return scuo
}

// SetNillableStdout sets the "stdout" field if the given value is not nil.
func (scuo *SubmissionCaseUpdateOne) SetNillableStdout(s *string) *SubmissionCaseUpdateOne {
	if s != nil {
		scuo.SetStdout(*s)
	}
	return scuo
}

// SetStderr sets the "stderr" field.
func (scuo *SubmissionCaseUpdateOne) SetStderr(s string) *SubmissionCaseUpdateOne {
	scuo.mutation.SetStderr(s)
	return scuo
}

// SetNillableStderr sets the "stderr" field if the given value is not nil.
func (scuo *SubmissionCaseUpdateOne) SetNillableStderr(s *string) *SubmissionCaseUpdateOne {
	if s != nil {
		scuo.SetStderr(*s)
	}
	return scuo
}

// SetSubmissionSubtaskID sets the "submission_subtask_id" field.
func (scuo *SubmissionCaseUpdateOne) SetSubmissionSubtaskID(i int64) *SubmissionCaseUpdateOne {
	scuo.mutation.SetSubmissionSubtaskID(i)
	return scuo
}

// SetNillableSubmissionSubtaskID sets the "submission_subtask_id" field if the given value is not nil.
func (scuo *SubmissionCaseUpdateOne) SetNillableSubmissionSubtaskID(i *int64) *SubmissionCaseUpdateOne {
	if i != nil {
		scuo.SetSubmissionSubtaskID(*i)
	}
	return scuo
}

// SetSubmissionSubtasksID sets the "submission_subtasks" edge to the SubmissionSubtask entity by ID.
func (scuo *SubmissionCaseUpdateOne) SetSubmissionSubtasksID(id int64) *SubmissionCaseUpdateOne {
	scuo.mutation.SetSubmissionSubtasksID(id)
	return scuo
}

// SetSubmissionSubtasks sets the "submission_subtasks" edge to the SubmissionSubtask entity.
func (scuo *SubmissionCaseUpdateOne) SetSubmissionSubtasks(s *SubmissionSubtask) *SubmissionCaseUpdateOne {
	return scuo.SetSubmissionSubtasksID(s.ID)
}

// Mutation returns the SubmissionCaseMutation object of the builder.
func (scuo *SubmissionCaseUpdateOne) Mutation() *SubmissionCaseMutation {
	return scuo.mutation
}

// ClearSubmissionSubtasks clears the "submission_subtasks" edge to the SubmissionSubtask entity.
func (scuo *SubmissionCaseUpdateOne) ClearSubmissionSubtasks() *SubmissionCaseUpdateOne {
	scuo.mutation.ClearSubmissionSubtasks()
	return scuo
}

// Where appends a list predicates to the SubmissionCaseUpdate builder.
func (scuo *SubmissionCaseUpdateOne) Where(ps ...predicate.SubmissionCase) *SubmissionCaseUpdateOne {
	scuo.mutation.Where(ps...)
	return scuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scuo *SubmissionCaseUpdateOne) Select(field string, fields ...string) *SubmissionCaseUpdateOne {
	scuo.fields = append([]string{field}, fields...)
	return scuo
}

// Save executes the query and returns the updated SubmissionCase entity.
func (scuo *SubmissionCaseUpdateOne) Save(ctx context.Context) (*SubmissionCase, error) {
	return withHooks(ctx, scuo.sqlSave, scuo.mutation, scuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scuo *SubmissionCaseUpdateOne) SaveX(ctx context.Context) *SubmissionCase {
	node, err := scuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scuo *SubmissionCaseUpdateOne) Exec(ctx context.Context) error {
	_, err := scuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scuo *SubmissionCaseUpdateOne) ExecX(ctx context.Context) {
	if err := scuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scuo *SubmissionCaseUpdateOne) check() error {
	if _, ok := scuo.mutation.SubmissionSubtasksID(); scuo.mutation.SubmissionSubtasksCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SubmissionCase.submission_subtasks"`)
	}
	return nil
}

func (scuo *SubmissionCaseUpdateOne) sqlSave(ctx context.Context) (_node *SubmissionCase, err error) {
	if err := scuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(submissioncase.Table, submissioncase.Columns, sqlgraph.NewFieldSpec(submissioncase.FieldID, field.TypeInt64))
	id, ok := scuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SubmissionCase.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, submissioncase.FieldID)
		for _, f := range fields {
			if !submissioncase.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != submissioncase.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scuo.mutation.State(); ok {
		_spec.SetField(submissioncase.FieldState, field.TypeInt16, value)
	}
	if value, ok := scuo.mutation.AddedState(); ok {
		_spec.AddField(submissioncase.FieldState, field.TypeInt16, value)
	}
	if value, ok := scuo.mutation.Point(); ok {
		_spec.SetField(submissioncase.FieldPoint, field.TypeInt16, value)
	}
	if value, ok := scuo.mutation.AddedPoint(); ok {
		_spec.AddField(submissioncase.FieldPoint, field.TypeInt16, value)
	}
	if value, ok := scuo.mutation.Time(); ok {
		_spec.SetField(submissioncase.FieldTime, field.TypeUint64, value)
	}
	if value, ok := scuo.mutation.AddedTime(); ok {
		_spec.AddField(submissioncase.FieldTime, field.TypeUint64, value)
	}
	if value, ok := scuo.mutation.Memory(); ok {
		_spec.SetField(submissioncase.FieldMemory, field.TypeUint64, value)
	}
	if value, ok := scuo.mutation.AddedMemory(); ok {
		_spec.AddField(submissioncase.FieldMemory, field.TypeUint64, value)
	}
	if value, ok := scuo.mutation.Stdout(); ok {
		_spec.SetField(submissioncase.FieldStdout, field.TypeString, value)
	}
	if value, ok := scuo.mutation.Stderr(); ok {
		_spec.SetField(submissioncase.FieldStderr, field.TypeString, value)
	}
	if scuo.mutation.SubmissionSubtasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submissioncase.SubmissionSubtasksTable,
			Columns: []string{submissioncase.SubmissionSubtasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submissionsubtask.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.SubmissionSubtasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submissioncase.SubmissionSubtasksTable,
			Columns: []string{submissioncase.SubmissionSubtasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submissionsubtask.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SubmissionCase{config: scuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{submissioncase.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	scuo.mutation.done = true
	return _node, nil
}
