// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"sastoj/ent/submission"
	"sastoj/ent/submissionsubtask"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SubmissionSubtask is the model entity for the SubmissionSubtask schema.
type SubmissionSubtask struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// State holds the value of the "state" field.
	State int16 `json:"state,omitempty"`
	// Point holds the value of the "point" field.
	Point int16 `json:"point,omitempty"`
	// TotalTime holds the value of the "total_time" field.
	TotalTime uint64 `json:"total_time,omitempty"`
	// MaxMemory holds the value of the "max_memory" field.
	MaxMemory uint64 `json:"max_memory,omitempty"`
	// SubmissionID holds the value of the "submission_id" field.
	SubmissionID int64 `json:"submission_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubmissionSubtaskQuery when eager-loading is set.
	Edges        SubmissionSubtaskEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SubmissionSubtaskEdges holds the relations/edges for other nodes in the graph.
type SubmissionSubtaskEdges struct {
	// SubmissionCases holds the value of the submission_cases edge.
	SubmissionCases []*SubmissionCase `json:"submission_cases,omitempty"`
	// Submissions holds the value of the submissions edge.
	Submissions *Submission `json:"submissions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SubmissionCasesOrErr returns the SubmissionCases value or an error if the edge
// was not loaded in eager-loading.
func (e SubmissionSubtaskEdges) SubmissionCasesOrErr() ([]*SubmissionCase, error) {
	if e.loadedTypes[0] {
		return e.SubmissionCases, nil
	}
	return nil, &NotLoadedError{edge: "submission_cases"}
}

// SubmissionsOrErr returns the Submissions value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubmissionSubtaskEdges) SubmissionsOrErr() (*Submission, error) {
	if e.loadedTypes[1] {
		if e.Submissions == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: submission.Label}
		}
		return e.Submissions, nil
	}
	return nil, &NotLoadedError{edge: "submissions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SubmissionSubtask) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case submissionsubtask.FieldID, submissionsubtask.FieldState, submissionsubtask.FieldPoint, submissionsubtask.FieldTotalTime, submissionsubtask.FieldMaxMemory, submissionsubtask.FieldSubmissionID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SubmissionSubtask fields.
func (ss *SubmissionSubtask) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case submissionsubtask.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ss.ID = int64(value.Int64)
		case submissionsubtask.FieldState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				ss.State = int16(value.Int64)
			}
		case submissionsubtask.FieldPoint:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field point", values[i])
			} else if value.Valid {
				ss.Point = int16(value.Int64)
			}
		case submissionsubtask.FieldTotalTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_time", values[i])
			} else if value.Valid {
				ss.TotalTime = uint64(value.Int64)
			}
		case submissionsubtask.FieldMaxMemory:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_memory", values[i])
			} else if value.Valid {
				ss.MaxMemory = uint64(value.Int64)
			}
		case submissionsubtask.FieldSubmissionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field submission_id", values[i])
			} else if value.Valid {
				ss.SubmissionID = value.Int64
			}
		default:
			ss.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SubmissionSubtask.
// This includes values selected through modifiers, order, etc.
func (ss *SubmissionSubtask) Value(name string) (ent.Value, error) {
	return ss.selectValues.Get(name)
}

// QuerySubmissionCases queries the "submission_cases" edge of the SubmissionSubtask entity.
func (ss *SubmissionSubtask) QuerySubmissionCases() *SubmissionCaseQuery {
	return NewSubmissionSubtaskClient(ss.config).QuerySubmissionCases(ss)
}

// QuerySubmissions queries the "submissions" edge of the SubmissionSubtask entity.
func (ss *SubmissionSubtask) QuerySubmissions() *SubmissionQuery {
	return NewSubmissionSubtaskClient(ss.config).QuerySubmissions(ss)
}

// Update returns a builder for updating this SubmissionSubtask.
// Note that you need to call SubmissionSubtask.Unwrap() before calling this method if this SubmissionSubtask
// was returned from a transaction, and the transaction was committed or rolled back.
func (ss *SubmissionSubtask) Update() *SubmissionSubtaskUpdateOne {
	return NewSubmissionSubtaskClient(ss.config).UpdateOne(ss)
}

// Unwrap unwraps the SubmissionSubtask entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ss *SubmissionSubtask) Unwrap() *SubmissionSubtask {
	_tx, ok := ss.config.driver.(*txDriver)
	if !ok {
		panic("ent: SubmissionSubtask is not a transactional entity")
	}
	ss.config.driver = _tx.drv
	return ss
}

// String implements the fmt.Stringer.
func (ss *SubmissionSubtask) String() string {
	var builder strings.Builder
	builder.WriteString("SubmissionSubtask(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ss.ID))
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", ss.State))
	builder.WriteString(", ")
	builder.WriteString("point=")
	builder.WriteString(fmt.Sprintf("%v", ss.Point))
	builder.WriteString(", ")
	builder.WriteString("total_time=")
	builder.WriteString(fmt.Sprintf("%v", ss.TotalTime))
	builder.WriteString(", ")
	builder.WriteString("max_memory=")
	builder.WriteString(fmt.Sprintf("%v", ss.MaxMemory))
	builder.WriteString(", ")
	builder.WriteString("submission_id=")
	builder.WriteString(fmt.Sprintf("%v", ss.SubmissionID))
	builder.WriteByte(')')
	return builder.String()
}

// SubmissionSubtasks is a parsable slice of SubmissionSubtask.
type SubmissionSubtasks []*SubmissionSubtask
