// Code generated by ent, DO NOT EDIT.

package submissionsubtask

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the submissionsubtask type in the database.
	Label = "submission_subtask"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldPoint holds the string denoting the point field in the database.
	FieldPoint = "point"
	// FieldTotalTime holds the string denoting the total_time field in the database.
	FieldTotalTime = "total_time"
	// FieldMaxMemory holds the string denoting the max_memory field in the database.
	FieldMaxMemory = "max_memory"
	// FieldSubmissionID holds the string denoting the submission_id field in the database.
	FieldSubmissionID = "submission_id"
	// EdgeSubmissionCases holds the string denoting the submission_cases edge name in mutations.
	EdgeSubmissionCases = "submission_cases"
	// EdgeSubmissions holds the string denoting the submissions edge name in mutations.
	EdgeSubmissions = "submissions"
	// Table holds the table name of the submissionsubtask in the database.
	Table = "submission_subtasks"
	// SubmissionCasesTable is the table that holds the submission_cases relation/edge.
	SubmissionCasesTable = "submission_cases"
	// SubmissionCasesInverseTable is the table name for the SubmissionCase entity.
	// It exists in this package in order to avoid circular dependency with the "submissioncase" package.
	SubmissionCasesInverseTable = "submission_cases"
	// SubmissionCasesColumn is the table column denoting the submission_cases relation/edge.
	SubmissionCasesColumn = "submission_subtask_id"
	// SubmissionsTable is the table that holds the submissions relation/edge.
	SubmissionsTable = "submission_subtasks"
	// SubmissionsInverseTable is the table name for the Submission entity.
	// It exists in this package in order to avoid circular dependency with the "submission" package.
	SubmissionsInverseTable = "submissions"
	// SubmissionsColumn is the table column denoting the submissions relation/edge.
	SubmissionsColumn = "submission_id"
)

// Columns holds all SQL columns for submissionsubtask fields.
var Columns = []string{
	FieldID,
	FieldState,
	FieldPoint,
	FieldTotalTime,
	FieldMaxMemory,
	FieldSubmissionID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the SubmissionSubtask queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByPoint orders the results by the point field.
func ByPoint(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPoint, opts...).ToFunc()
}

// ByTotalTime orders the results by the total_time field.
func ByTotalTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalTime, opts...).ToFunc()
}

// ByMaxMemory orders the results by the max_memory field.
func ByMaxMemory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxMemory, opts...).ToFunc()
}

// BySubmissionID orders the results by the submission_id field.
func BySubmissionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubmissionID, opts...).ToFunc()
}

// BySubmissionCasesCount orders the results by submission_cases count.
func BySubmissionCasesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSubmissionCasesStep(), opts...)
	}
}

// BySubmissionCases orders the results by submission_cases terms.
func BySubmissionCases(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubmissionCasesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySubmissionsField orders the results by submissions field.
func BySubmissionsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubmissionsStep(), sql.OrderByField(field, opts...))
	}
}
func newSubmissionCasesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubmissionCasesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SubmissionCasesTable, SubmissionCasesColumn),
	)
}
func newSubmissionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubmissionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SubmissionsTable, SubmissionsColumn),
	)
}
