// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sastoj/ent/submission"
	"sastoj/ent/submissioncase"
	"sastoj/ent/submissionsubtask"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubmissionSubtaskCreate is the builder for creating a SubmissionSubtask entity.
type SubmissionSubtaskCreate struct {
	config
	mutation *SubmissionSubtaskMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetState sets the "state" field.
func (ssc *SubmissionSubtaskCreate) SetState(i int16) *SubmissionSubtaskCreate {
	ssc.mutation.SetState(i)
	return ssc
}

// SetPoint sets the "point" field.
func (ssc *SubmissionSubtaskCreate) SetPoint(i int16) *SubmissionSubtaskCreate {
	ssc.mutation.SetPoint(i)
	return ssc
}

// SetTotalTime sets the "total_time" field.
func (ssc *SubmissionSubtaskCreate) SetTotalTime(u uint64) *SubmissionSubtaskCreate {
	ssc.mutation.SetTotalTime(u)
	return ssc
}

// SetMaxMemory sets the "max_memory" field.
func (ssc *SubmissionSubtaskCreate) SetMaxMemory(u uint64) *SubmissionSubtaskCreate {
	ssc.mutation.SetMaxMemory(u)
	return ssc
}

// SetSubmissionID sets the "submission_id" field.
func (ssc *SubmissionSubtaskCreate) SetSubmissionID(i int64) *SubmissionSubtaskCreate {
	ssc.mutation.SetSubmissionID(i)
	return ssc
}

// SetID sets the "id" field.
func (ssc *SubmissionSubtaskCreate) SetID(i int64) *SubmissionSubtaskCreate {
	ssc.mutation.SetID(i)
	return ssc
}

// AddSubmissionCaseIDs adds the "submission_cases" edge to the SubmissionCase entity by IDs.
func (ssc *SubmissionSubtaskCreate) AddSubmissionCaseIDs(ids ...int64) *SubmissionSubtaskCreate {
	ssc.mutation.AddSubmissionCaseIDs(ids...)
	return ssc
}

// AddSubmissionCases adds the "submission_cases" edges to the SubmissionCase entity.
func (ssc *SubmissionSubtaskCreate) AddSubmissionCases(s ...*SubmissionCase) *SubmissionSubtaskCreate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ssc.AddSubmissionCaseIDs(ids...)
}

// SetSubmissionsID sets the "submissions" edge to the Submission entity by ID.
func (ssc *SubmissionSubtaskCreate) SetSubmissionsID(id int64) *SubmissionSubtaskCreate {
	ssc.mutation.SetSubmissionsID(id)
	return ssc
}

// SetSubmissions sets the "submissions" edge to the Submission entity.
func (ssc *SubmissionSubtaskCreate) SetSubmissions(s *Submission) *SubmissionSubtaskCreate {
	return ssc.SetSubmissionsID(s.ID)
}

// Mutation returns the SubmissionSubtaskMutation object of the builder.
func (ssc *SubmissionSubtaskCreate) Mutation() *SubmissionSubtaskMutation {
	return ssc.mutation
}

// Save creates the SubmissionSubtask in the database.
func (ssc *SubmissionSubtaskCreate) Save(ctx context.Context) (*SubmissionSubtask, error) {
	return withHooks(ctx, ssc.sqlSave, ssc.mutation, ssc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ssc *SubmissionSubtaskCreate) SaveX(ctx context.Context) *SubmissionSubtask {
	v, err := ssc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ssc *SubmissionSubtaskCreate) Exec(ctx context.Context) error {
	_, err := ssc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssc *SubmissionSubtaskCreate) ExecX(ctx context.Context) {
	if err := ssc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssc *SubmissionSubtaskCreate) check() error {
	if _, ok := ssc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "SubmissionSubtask.state"`)}
	}
	if _, ok := ssc.mutation.Point(); !ok {
		return &ValidationError{Name: "point", err: errors.New(`ent: missing required field "SubmissionSubtask.point"`)}
	}
	if _, ok := ssc.mutation.TotalTime(); !ok {
		return &ValidationError{Name: "total_time", err: errors.New(`ent: missing required field "SubmissionSubtask.total_time"`)}
	}
	if _, ok := ssc.mutation.MaxMemory(); !ok {
		return &ValidationError{Name: "max_memory", err: errors.New(`ent: missing required field "SubmissionSubtask.max_memory"`)}
	}
	if _, ok := ssc.mutation.SubmissionID(); !ok {
		return &ValidationError{Name: "submission_id", err: errors.New(`ent: missing required field "SubmissionSubtask.submission_id"`)}
	}
	if _, ok := ssc.mutation.SubmissionsID(); !ok {
		return &ValidationError{Name: "submissions", err: errors.New(`ent: missing required edge "SubmissionSubtask.submissions"`)}
	}
	return nil
}

func (ssc *SubmissionSubtaskCreate) sqlSave(ctx context.Context) (*SubmissionSubtask, error) {
	if err := ssc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ssc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ssc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	ssc.mutation.id = &_node.ID
	ssc.mutation.done = true
	return _node, nil
}

func (ssc *SubmissionSubtaskCreate) createSpec() (*SubmissionSubtask, *sqlgraph.CreateSpec) {
	var (
		_node = &SubmissionSubtask{config: ssc.config}
		_spec = sqlgraph.NewCreateSpec(submissionsubtask.Table, sqlgraph.NewFieldSpec(submissionsubtask.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = ssc.conflict
	if id, ok := ssc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ssc.mutation.State(); ok {
		_spec.SetField(submissionsubtask.FieldState, field.TypeInt16, value)
		_node.State = value
	}
	if value, ok := ssc.mutation.Point(); ok {
		_spec.SetField(submissionsubtask.FieldPoint, field.TypeInt16, value)
		_node.Point = value
	}
	if value, ok := ssc.mutation.TotalTime(); ok {
		_spec.SetField(submissionsubtask.FieldTotalTime, field.TypeUint64, value)
		_node.TotalTime = value
	}
	if value, ok := ssc.mutation.MaxMemory(); ok {
		_spec.SetField(submissionsubtask.FieldMaxMemory, field.TypeUint64, value)
		_node.MaxMemory = value
	}
	if nodes := ssc.mutation.SubmissionCasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   submissionsubtask.SubmissionCasesTable,
			Columns: []string{submissionsubtask.SubmissionCasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submissioncase.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ssc.mutation.SubmissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submissionsubtask.SubmissionsTable,
			Columns: []string{submissionsubtask.SubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubmissionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SubmissionSubtask.Create().
//		SetState(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubmissionSubtaskUpsert) {
//			SetState(v+v).
//		}).
//		Exec(ctx)
func (ssc *SubmissionSubtaskCreate) OnConflict(opts ...sql.ConflictOption) *SubmissionSubtaskUpsertOne {
	ssc.conflict = opts
	return &SubmissionSubtaskUpsertOne{
		create: ssc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SubmissionSubtask.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ssc *SubmissionSubtaskCreate) OnConflictColumns(columns ...string) *SubmissionSubtaskUpsertOne {
	ssc.conflict = append(ssc.conflict, sql.ConflictColumns(columns...))
	return &SubmissionSubtaskUpsertOne{
		create: ssc,
	}
}

type (
	// SubmissionSubtaskUpsertOne is the builder for "upsert"-ing
	//  one SubmissionSubtask node.
	SubmissionSubtaskUpsertOne struct {
		create *SubmissionSubtaskCreate
	}

	// SubmissionSubtaskUpsert is the "OnConflict" setter.
	SubmissionSubtaskUpsert struct {
		*sql.UpdateSet
	}
)

// SetState sets the "state" field.
func (u *SubmissionSubtaskUpsert) SetState(v int16) *SubmissionSubtaskUpsert {
	u.Set(submissionsubtask.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *SubmissionSubtaskUpsert) UpdateState() *SubmissionSubtaskUpsert {
	u.SetExcluded(submissionsubtask.FieldState)
	return u
}

// AddState adds v to the "state" field.
func (u *SubmissionSubtaskUpsert) AddState(v int16) *SubmissionSubtaskUpsert {
	u.Add(submissionsubtask.FieldState, v)
	return u
}

// SetPoint sets the "point" field.
func (u *SubmissionSubtaskUpsert) SetPoint(v int16) *SubmissionSubtaskUpsert {
	u.Set(submissionsubtask.FieldPoint, v)
	return u
}

// UpdatePoint sets the "point" field to the value that was provided on create.
func (u *SubmissionSubtaskUpsert) UpdatePoint() *SubmissionSubtaskUpsert {
	u.SetExcluded(submissionsubtask.FieldPoint)
	return u
}

// AddPoint adds v to the "point" field.
func (u *SubmissionSubtaskUpsert) AddPoint(v int16) *SubmissionSubtaskUpsert {
	u.Add(submissionsubtask.FieldPoint, v)
	return u
}

// SetTotalTime sets the "total_time" field.
func (u *SubmissionSubtaskUpsert) SetTotalTime(v uint64) *SubmissionSubtaskUpsert {
	u.Set(submissionsubtask.FieldTotalTime, v)
	return u
}

// UpdateTotalTime sets the "total_time" field to the value that was provided on create.
func (u *SubmissionSubtaskUpsert) UpdateTotalTime() *SubmissionSubtaskUpsert {
	u.SetExcluded(submissionsubtask.FieldTotalTime)
	return u
}

// AddTotalTime adds v to the "total_time" field.
func (u *SubmissionSubtaskUpsert) AddTotalTime(v uint64) *SubmissionSubtaskUpsert {
	u.Add(submissionsubtask.FieldTotalTime, v)
	return u
}

// SetMaxMemory sets the "max_memory" field.
func (u *SubmissionSubtaskUpsert) SetMaxMemory(v uint64) *SubmissionSubtaskUpsert {
	u.Set(submissionsubtask.FieldMaxMemory, v)
	return u
}

// UpdateMaxMemory sets the "max_memory" field to the value that was provided on create.
func (u *SubmissionSubtaskUpsert) UpdateMaxMemory() *SubmissionSubtaskUpsert {
	u.SetExcluded(submissionsubtask.FieldMaxMemory)
	return u
}

// AddMaxMemory adds v to the "max_memory" field.
func (u *SubmissionSubtaskUpsert) AddMaxMemory(v uint64) *SubmissionSubtaskUpsert {
	u.Add(submissionsubtask.FieldMaxMemory, v)
	return u
}

// SetSubmissionID sets the "submission_id" field.
func (u *SubmissionSubtaskUpsert) SetSubmissionID(v int64) *SubmissionSubtaskUpsert {
	u.Set(submissionsubtask.FieldSubmissionID, v)
	return u
}

// UpdateSubmissionID sets the "submission_id" field to the value that was provided on create.
func (u *SubmissionSubtaskUpsert) UpdateSubmissionID() *SubmissionSubtaskUpsert {
	u.SetExcluded(submissionsubtask.FieldSubmissionID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SubmissionSubtask.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(submissionsubtask.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubmissionSubtaskUpsertOne) UpdateNewValues() *SubmissionSubtaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(submissionsubtask.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SubmissionSubtask.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SubmissionSubtaskUpsertOne) Ignore() *SubmissionSubtaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubmissionSubtaskUpsertOne) DoNothing() *SubmissionSubtaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubmissionSubtaskCreate.OnConflict
// documentation for more info.
func (u *SubmissionSubtaskUpsertOne) Update(set func(*SubmissionSubtaskUpsert)) *SubmissionSubtaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubmissionSubtaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetState sets the "state" field.
func (u *SubmissionSubtaskUpsertOne) SetState(v int16) *SubmissionSubtaskUpsertOne {
	return u.Update(func(s *SubmissionSubtaskUpsert) {
		s.SetState(v)
	})
}

// AddState adds v to the "state" field.
func (u *SubmissionSubtaskUpsertOne) AddState(v int16) *SubmissionSubtaskUpsertOne {
	return u.Update(func(s *SubmissionSubtaskUpsert) {
		s.AddState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *SubmissionSubtaskUpsertOne) UpdateState() *SubmissionSubtaskUpsertOne {
	return u.Update(func(s *SubmissionSubtaskUpsert) {
		s.UpdateState()
	})
}

// SetPoint sets the "point" field.
func (u *SubmissionSubtaskUpsertOne) SetPoint(v int16) *SubmissionSubtaskUpsertOne {
	return u.Update(func(s *SubmissionSubtaskUpsert) {
		s.SetPoint(v)
	})
}

// AddPoint adds v to the "point" field.
func (u *SubmissionSubtaskUpsertOne) AddPoint(v int16) *SubmissionSubtaskUpsertOne {
	return u.Update(func(s *SubmissionSubtaskUpsert) {
		s.AddPoint(v)
	})
}

// UpdatePoint sets the "point" field to the value that was provided on create.
func (u *SubmissionSubtaskUpsertOne) UpdatePoint() *SubmissionSubtaskUpsertOne {
	return u.Update(func(s *SubmissionSubtaskUpsert) {
		s.UpdatePoint()
	})
}

// SetTotalTime sets the "total_time" field.
func (u *SubmissionSubtaskUpsertOne) SetTotalTime(v uint64) *SubmissionSubtaskUpsertOne {
	return u.Update(func(s *SubmissionSubtaskUpsert) {
		s.SetTotalTime(v)
	})
}

// AddTotalTime adds v to the "total_time" field.
func (u *SubmissionSubtaskUpsertOne) AddTotalTime(v uint64) *SubmissionSubtaskUpsertOne {
	return u.Update(func(s *SubmissionSubtaskUpsert) {
		s.AddTotalTime(v)
	})
}

// UpdateTotalTime sets the "total_time" field to the value that was provided on create.
func (u *SubmissionSubtaskUpsertOne) UpdateTotalTime() *SubmissionSubtaskUpsertOne {
	return u.Update(func(s *SubmissionSubtaskUpsert) {
		s.UpdateTotalTime()
	})
}

// SetMaxMemory sets the "max_memory" field.
func (u *SubmissionSubtaskUpsertOne) SetMaxMemory(v uint64) *SubmissionSubtaskUpsertOne {
	return u.Update(func(s *SubmissionSubtaskUpsert) {
		s.SetMaxMemory(v)
	})
}

// AddMaxMemory adds v to the "max_memory" field.
func (u *SubmissionSubtaskUpsertOne) AddMaxMemory(v uint64) *SubmissionSubtaskUpsertOne {
	return u.Update(func(s *SubmissionSubtaskUpsert) {
		s.AddMaxMemory(v)
	})
}

// UpdateMaxMemory sets the "max_memory" field to the value that was provided on create.
func (u *SubmissionSubtaskUpsertOne) UpdateMaxMemory() *SubmissionSubtaskUpsertOne {
	return u.Update(func(s *SubmissionSubtaskUpsert) {
		s.UpdateMaxMemory()
	})
}

// SetSubmissionID sets the "submission_id" field.
func (u *SubmissionSubtaskUpsertOne) SetSubmissionID(v int64) *SubmissionSubtaskUpsertOne {
	return u.Update(func(s *SubmissionSubtaskUpsert) {
		s.SetSubmissionID(v)
	})
}

// UpdateSubmissionID sets the "submission_id" field to the value that was provided on create.
func (u *SubmissionSubtaskUpsertOne) UpdateSubmissionID() *SubmissionSubtaskUpsertOne {
	return u.Update(func(s *SubmissionSubtaskUpsert) {
		s.UpdateSubmissionID()
	})
}

// Exec executes the query.
func (u *SubmissionSubtaskUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SubmissionSubtaskCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubmissionSubtaskUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SubmissionSubtaskUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SubmissionSubtaskUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SubmissionSubtaskCreateBulk is the builder for creating many SubmissionSubtask entities in bulk.
type SubmissionSubtaskCreateBulk struct {
	config
	err      error
	builders []*SubmissionSubtaskCreate
	conflict []sql.ConflictOption
}

// Save creates the SubmissionSubtask entities in the database.
func (sscb *SubmissionSubtaskCreateBulk) Save(ctx context.Context) ([]*SubmissionSubtask, error) {
	if sscb.err != nil {
		return nil, sscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sscb.builders))
	nodes := make([]*SubmissionSubtask, len(sscb.builders))
	mutators := make([]Mutator, len(sscb.builders))
	for i := range sscb.builders {
		func(i int, root context.Context) {
			builder := sscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubmissionSubtaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sscb *SubmissionSubtaskCreateBulk) SaveX(ctx context.Context) []*SubmissionSubtask {
	v, err := sscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sscb *SubmissionSubtaskCreateBulk) Exec(ctx context.Context) error {
	_, err := sscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sscb *SubmissionSubtaskCreateBulk) ExecX(ctx context.Context) {
	if err := sscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SubmissionSubtask.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubmissionSubtaskUpsert) {
//			SetState(v+v).
//		}).
//		Exec(ctx)
func (sscb *SubmissionSubtaskCreateBulk) OnConflict(opts ...sql.ConflictOption) *SubmissionSubtaskUpsertBulk {
	sscb.conflict = opts
	return &SubmissionSubtaskUpsertBulk{
		create: sscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SubmissionSubtask.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sscb *SubmissionSubtaskCreateBulk) OnConflictColumns(columns ...string) *SubmissionSubtaskUpsertBulk {
	sscb.conflict = append(sscb.conflict, sql.ConflictColumns(columns...))
	return &SubmissionSubtaskUpsertBulk{
		create: sscb,
	}
}

// SubmissionSubtaskUpsertBulk is the builder for "upsert"-ing
// a bulk of SubmissionSubtask nodes.
type SubmissionSubtaskUpsertBulk struct {
	create *SubmissionSubtaskCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SubmissionSubtask.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(submissionsubtask.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubmissionSubtaskUpsertBulk) UpdateNewValues() *SubmissionSubtaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(submissionsubtask.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SubmissionSubtask.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SubmissionSubtaskUpsertBulk) Ignore() *SubmissionSubtaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubmissionSubtaskUpsertBulk) DoNothing() *SubmissionSubtaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubmissionSubtaskCreateBulk.OnConflict
// documentation for more info.
func (u *SubmissionSubtaskUpsertBulk) Update(set func(*SubmissionSubtaskUpsert)) *SubmissionSubtaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubmissionSubtaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetState sets the "state" field.
func (u *SubmissionSubtaskUpsertBulk) SetState(v int16) *SubmissionSubtaskUpsertBulk {
	return u.Update(func(s *SubmissionSubtaskUpsert) {
		s.SetState(v)
	})
}

// AddState adds v to the "state" field.
func (u *SubmissionSubtaskUpsertBulk) AddState(v int16) *SubmissionSubtaskUpsertBulk {
	return u.Update(func(s *SubmissionSubtaskUpsert) {
		s.AddState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *SubmissionSubtaskUpsertBulk) UpdateState() *SubmissionSubtaskUpsertBulk {
	return u.Update(func(s *SubmissionSubtaskUpsert) {
		s.UpdateState()
	})
}

// SetPoint sets the "point" field.
func (u *SubmissionSubtaskUpsertBulk) SetPoint(v int16) *SubmissionSubtaskUpsertBulk {
	return u.Update(func(s *SubmissionSubtaskUpsert) {
		s.SetPoint(v)
	})
}

// AddPoint adds v to the "point" field.
func (u *SubmissionSubtaskUpsertBulk) AddPoint(v int16) *SubmissionSubtaskUpsertBulk {
	return u.Update(func(s *SubmissionSubtaskUpsert) {
		s.AddPoint(v)
	})
}

// UpdatePoint sets the "point" field to the value that was provided on create.
func (u *SubmissionSubtaskUpsertBulk) UpdatePoint() *SubmissionSubtaskUpsertBulk {
	return u.Update(func(s *SubmissionSubtaskUpsert) {
		s.UpdatePoint()
	})
}

// SetTotalTime sets the "total_time" field.
func (u *SubmissionSubtaskUpsertBulk) SetTotalTime(v uint64) *SubmissionSubtaskUpsertBulk {
	return u.Update(func(s *SubmissionSubtaskUpsert) {
		s.SetTotalTime(v)
	})
}

// AddTotalTime adds v to the "total_time" field.
func (u *SubmissionSubtaskUpsertBulk) AddTotalTime(v uint64) *SubmissionSubtaskUpsertBulk {
	return u.Update(func(s *SubmissionSubtaskUpsert) {
		s.AddTotalTime(v)
	})
}

// UpdateTotalTime sets the "total_time" field to the value that was provided on create.
func (u *SubmissionSubtaskUpsertBulk) UpdateTotalTime() *SubmissionSubtaskUpsertBulk {
	return u.Update(func(s *SubmissionSubtaskUpsert) {
		s.UpdateTotalTime()
	})
}

// SetMaxMemory sets the "max_memory" field.
func (u *SubmissionSubtaskUpsertBulk) SetMaxMemory(v uint64) *SubmissionSubtaskUpsertBulk {
	return u.Update(func(s *SubmissionSubtaskUpsert) {
		s.SetMaxMemory(v)
	})
}

// AddMaxMemory adds v to the "max_memory" field.
func (u *SubmissionSubtaskUpsertBulk) AddMaxMemory(v uint64) *SubmissionSubtaskUpsertBulk {
	return u.Update(func(s *SubmissionSubtaskUpsert) {
		s.AddMaxMemory(v)
	})
}

// UpdateMaxMemory sets the "max_memory" field to the value that was provided on create.
func (u *SubmissionSubtaskUpsertBulk) UpdateMaxMemory() *SubmissionSubtaskUpsertBulk {
	return u.Update(func(s *SubmissionSubtaskUpsert) {
		s.UpdateMaxMemory()
	})
}

// SetSubmissionID sets the "submission_id" field.
func (u *SubmissionSubtaskUpsertBulk) SetSubmissionID(v int64) *SubmissionSubtaskUpsertBulk {
	return u.Update(func(s *SubmissionSubtaskUpsert) {
		s.SetSubmissionID(v)
	})
}

// UpdateSubmissionID sets the "submission_id" field to the value that was provided on create.
func (u *SubmissionSubtaskUpsertBulk) UpdateSubmissionID() *SubmissionSubtaskUpsertBulk {
	return u.Update(func(s *SubmissionSubtaskUpsert) {
		s.UpdateSubmissionID()
	})
}

// Exec executes the query.
func (u *SubmissionSubtaskUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SubmissionSubtaskCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SubmissionSubtaskCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubmissionSubtaskUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
