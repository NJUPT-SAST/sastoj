// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"sastoj/ent/predicate"
	"sastoj/ent/submission"
	"sastoj/ent/submissioncase"
	"sastoj/ent/submissionsubtask"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubmissionSubtaskQuery is the builder for querying SubmissionSubtask entities.
type SubmissionSubtaskQuery struct {
	config
	ctx                 *QueryContext
	order               []submissionsubtask.OrderOption
	inters              []Interceptor
	predicates          []predicate.SubmissionSubtask
	withSubmissionCases *SubmissionCaseQuery
	withSubmissions     *SubmissionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SubmissionSubtaskQuery builder.
func (ssq *SubmissionSubtaskQuery) Where(ps ...predicate.SubmissionSubtask) *SubmissionSubtaskQuery {
	ssq.predicates = append(ssq.predicates, ps...)
	return ssq
}

// Limit the number of records to be returned by this query.
func (ssq *SubmissionSubtaskQuery) Limit(limit int) *SubmissionSubtaskQuery {
	ssq.ctx.Limit = &limit
	return ssq
}

// Offset to start from.
func (ssq *SubmissionSubtaskQuery) Offset(offset int) *SubmissionSubtaskQuery {
	ssq.ctx.Offset = &offset
	return ssq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ssq *SubmissionSubtaskQuery) Unique(unique bool) *SubmissionSubtaskQuery {
	ssq.ctx.Unique = &unique
	return ssq
}

// Order specifies how the records should be ordered.
func (ssq *SubmissionSubtaskQuery) Order(o ...submissionsubtask.OrderOption) *SubmissionSubtaskQuery {
	ssq.order = append(ssq.order, o...)
	return ssq
}

// QuerySubmissionCases chains the current query on the "submission_cases" edge.
func (ssq *SubmissionSubtaskQuery) QuerySubmissionCases() *SubmissionCaseQuery {
	query := (&SubmissionCaseClient{config: ssq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(submissionsubtask.Table, submissionsubtask.FieldID, selector),
			sqlgraph.To(submissioncase.Table, submissioncase.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, submissionsubtask.SubmissionCasesTable, submissionsubtask.SubmissionCasesColumn),
		)
		fromU = sqlgraph.SetNeighbors(ssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubmissions chains the current query on the "submissions" edge.
func (ssq *SubmissionSubtaskQuery) QuerySubmissions() *SubmissionQuery {
	query := (&SubmissionClient{config: ssq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(submissionsubtask.Table, submissionsubtask.FieldID, selector),
			sqlgraph.To(submission.Table, submission.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, submissionsubtask.SubmissionsTable, submissionsubtask.SubmissionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SubmissionSubtask entity from the query.
// Returns a *NotFoundError when no SubmissionSubtask was found.
func (ssq *SubmissionSubtaskQuery) First(ctx context.Context) (*SubmissionSubtask, error) {
	nodes, err := ssq.Limit(1).All(setContextOp(ctx, ssq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{submissionsubtask.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ssq *SubmissionSubtaskQuery) FirstX(ctx context.Context) *SubmissionSubtask {
	node, err := ssq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SubmissionSubtask ID from the query.
// Returns a *NotFoundError when no SubmissionSubtask ID was found.
func (ssq *SubmissionSubtaskQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = ssq.Limit(1).IDs(setContextOp(ctx, ssq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{submissionsubtask.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ssq *SubmissionSubtaskQuery) FirstIDX(ctx context.Context) int64 {
	id, err := ssq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SubmissionSubtask entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SubmissionSubtask entity is found.
// Returns a *NotFoundError when no SubmissionSubtask entities are found.
func (ssq *SubmissionSubtaskQuery) Only(ctx context.Context) (*SubmissionSubtask, error) {
	nodes, err := ssq.Limit(2).All(setContextOp(ctx, ssq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{submissionsubtask.Label}
	default:
		return nil, &NotSingularError{submissionsubtask.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ssq *SubmissionSubtaskQuery) OnlyX(ctx context.Context) *SubmissionSubtask {
	node, err := ssq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SubmissionSubtask ID in the query.
// Returns a *NotSingularError when more than one SubmissionSubtask ID is found.
// Returns a *NotFoundError when no entities are found.
func (ssq *SubmissionSubtaskQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = ssq.Limit(2).IDs(setContextOp(ctx, ssq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{submissionsubtask.Label}
	default:
		err = &NotSingularError{submissionsubtask.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ssq *SubmissionSubtaskQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := ssq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SubmissionSubtasks.
func (ssq *SubmissionSubtaskQuery) All(ctx context.Context) ([]*SubmissionSubtask, error) {
	ctx = setContextOp(ctx, ssq.ctx, "All")
	if err := ssq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SubmissionSubtask, *SubmissionSubtaskQuery]()
	return withInterceptors[[]*SubmissionSubtask](ctx, ssq, qr, ssq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ssq *SubmissionSubtaskQuery) AllX(ctx context.Context) []*SubmissionSubtask {
	nodes, err := ssq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SubmissionSubtask IDs.
func (ssq *SubmissionSubtaskQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if ssq.ctx.Unique == nil && ssq.path != nil {
		ssq.Unique(true)
	}
	ctx = setContextOp(ctx, ssq.ctx, "IDs")
	if err = ssq.Select(submissionsubtask.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ssq *SubmissionSubtaskQuery) IDsX(ctx context.Context) []int64 {
	ids, err := ssq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ssq *SubmissionSubtaskQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ssq.ctx, "Count")
	if err := ssq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ssq, querierCount[*SubmissionSubtaskQuery](), ssq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ssq *SubmissionSubtaskQuery) CountX(ctx context.Context) int {
	count, err := ssq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ssq *SubmissionSubtaskQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ssq.ctx, "Exist")
	switch _, err := ssq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ssq *SubmissionSubtaskQuery) ExistX(ctx context.Context) bool {
	exist, err := ssq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SubmissionSubtaskQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ssq *SubmissionSubtaskQuery) Clone() *SubmissionSubtaskQuery {
	if ssq == nil {
		return nil
	}
	return &SubmissionSubtaskQuery{
		config:              ssq.config,
		ctx:                 ssq.ctx.Clone(),
		order:               append([]submissionsubtask.OrderOption{}, ssq.order...),
		inters:              append([]Interceptor{}, ssq.inters...),
		predicates:          append([]predicate.SubmissionSubtask{}, ssq.predicates...),
		withSubmissionCases: ssq.withSubmissionCases.Clone(),
		withSubmissions:     ssq.withSubmissions.Clone(),
		// clone intermediate query.
		sql:  ssq.sql.Clone(),
		path: ssq.path,
	}
}

// WithSubmissionCases tells the query-builder to eager-load the nodes that are connected to
// the "submission_cases" edge. The optional arguments are used to configure the query builder of the edge.
func (ssq *SubmissionSubtaskQuery) WithSubmissionCases(opts ...func(*SubmissionCaseQuery)) *SubmissionSubtaskQuery {
	query := (&SubmissionCaseClient{config: ssq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ssq.withSubmissionCases = query
	return ssq
}

// WithSubmissions tells the query-builder to eager-load the nodes that are connected to
// the "submissions" edge. The optional arguments are used to configure the query builder of the edge.
func (ssq *SubmissionSubtaskQuery) WithSubmissions(opts ...func(*SubmissionQuery)) *SubmissionSubtaskQuery {
	query := (&SubmissionClient{config: ssq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ssq.withSubmissions = query
	return ssq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		State int16 `json:"state,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SubmissionSubtask.Query().
//		GroupBy(submissionsubtask.FieldState).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ssq *SubmissionSubtaskQuery) GroupBy(field string, fields ...string) *SubmissionSubtaskGroupBy {
	ssq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SubmissionSubtaskGroupBy{build: ssq}
	grbuild.flds = &ssq.ctx.Fields
	grbuild.label = submissionsubtask.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		State int16 `json:"state,omitempty"`
//	}
//
//	client.SubmissionSubtask.Query().
//		Select(submissionsubtask.FieldState).
//		Scan(ctx, &v)
func (ssq *SubmissionSubtaskQuery) Select(fields ...string) *SubmissionSubtaskSelect {
	ssq.ctx.Fields = append(ssq.ctx.Fields, fields...)
	sbuild := &SubmissionSubtaskSelect{SubmissionSubtaskQuery: ssq}
	sbuild.label = submissionsubtask.Label
	sbuild.flds, sbuild.scan = &ssq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SubmissionSubtaskSelect configured with the given aggregations.
func (ssq *SubmissionSubtaskQuery) Aggregate(fns ...AggregateFunc) *SubmissionSubtaskSelect {
	return ssq.Select().Aggregate(fns...)
}

func (ssq *SubmissionSubtaskQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ssq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ssq); err != nil {
				return err
			}
		}
	}
	for _, f := range ssq.ctx.Fields {
		if !submissionsubtask.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ssq.path != nil {
		prev, err := ssq.path(ctx)
		if err != nil {
			return err
		}
		ssq.sql = prev
	}
	return nil
}

func (ssq *SubmissionSubtaskQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SubmissionSubtask, error) {
	var (
		nodes       = []*SubmissionSubtask{}
		_spec       = ssq.querySpec()
		loadedTypes = [2]bool{
			ssq.withSubmissionCases != nil,
			ssq.withSubmissions != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SubmissionSubtask).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SubmissionSubtask{config: ssq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ssq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ssq.withSubmissionCases; query != nil {
		if err := ssq.loadSubmissionCases(ctx, query, nodes,
			func(n *SubmissionSubtask) { n.Edges.SubmissionCases = []*SubmissionCase{} },
			func(n *SubmissionSubtask, e *SubmissionCase) {
				n.Edges.SubmissionCases = append(n.Edges.SubmissionCases, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := ssq.withSubmissions; query != nil {
		if err := ssq.loadSubmissions(ctx, query, nodes, nil,
			func(n *SubmissionSubtask, e *Submission) { n.Edges.Submissions = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ssq *SubmissionSubtaskQuery) loadSubmissionCases(ctx context.Context, query *SubmissionCaseQuery, nodes []*SubmissionSubtask, init func(*SubmissionSubtask), assign func(*SubmissionSubtask, *SubmissionCase)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*SubmissionSubtask)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(submissioncase.FieldSubmissionSubtaskID)
	}
	query.Where(predicate.SubmissionCase(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(submissionsubtask.SubmissionCasesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.SubmissionSubtaskID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "submission_subtask_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (ssq *SubmissionSubtaskQuery) loadSubmissions(ctx context.Context, query *SubmissionQuery, nodes []*SubmissionSubtask, init func(*SubmissionSubtask), assign func(*SubmissionSubtask, *Submission)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*SubmissionSubtask)
	for i := range nodes {
		fk := nodes[i].SubmissionID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(submission.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "submission_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ssq *SubmissionSubtaskQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ssq.querySpec()
	_spec.Node.Columns = ssq.ctx.Fields
	if len(ssq.ctx.Fields) > 0 {
		_spec.Unique = ssq.ctx.Unique != nil && *ssq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ssq.driver, _spec)
}

func (ssq *SubmissionSubtaskQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(submissionsubtask.Table, submissionsubtask.Columns, sqlgraph.NewFieldSpec(submissionsubtask.FieldID, field.TypeInt64))
	_spec.From = ssq.sql
	if unique := ssq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ssq.path != nil {
		_spec.Unique = true
	}
	if fields := ssq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, submissionsubtask.FieldID)
		for i := range fields {
			if fields[i] != submissionsubtask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if ssq.withSubmissions != nil {
			_spec.Node.AddColumnOnce(submissionsubtask.FieldSubmissionID)
		}
	}
	if ps := ssq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ssq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ssq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ssq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ssq *SubmissionSubtaskQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ssq.driver.Dialect())
	t1 := builder.Table(submissionsubtask.Table)
	columns := ssq.ctx.Fields
	if len(columns) == 0 {
		columns = submissionsubtask.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ssq.sql != nil {
		selector = ssq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ssq.ctx.Unique != nil && *ssq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ssq.predicates {
		p(selector)
	}
	for _, p := range ssq.order {
		p(selector)
	}
	if offset := ssq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ssq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SubmissionSubtaskGroupBy is the group-by builder for SubmissionSubtask entities.
type SubmissionSubtaskGroupBy struct {
	selector
	build *SubmissionSubtaskQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ssgb *SubmissionSubtaskGroupBy) Aggregate(fns ...AggregateFunc) *SubmissionSubtaskGroupBy {
	ssgb.fns = append(ssgb.fns, fns...)
	return ssgb
}

// Scan applies the selector query and scans the result into the given value.
func (ssgb *SubmissionSubtaskGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ssgb.build.ctx, "GroupBy")
	if err := ssgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SubmissionSubtaskQuery, *SubmissionSubtaskGroupBy](ctx, ssgb.build, ssgb, ssgb.build.inters, v)
}

func (ssgb *SubmissionSubtaskGroupBy) sqlScan(ctx context.Context, root *SubmissionSubtaskQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ssgb.fns))
	for _, fn := range ssgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ssgb.flds)+len(ssgb.fns))
		for _, f := range *ssgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ssgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ssgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SubmissionSubtaskSelect is the builder for selecting fields of SubmissionSubtask entities.
type SubmissionSubtaskSelect struct {
	*SubmissionSubtaskQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sss *SubmissionSubtaskSelect) Aggregate(fns ...AggregateFunc) *SubmissionSubtaskSelect {
	sss.fns = append(sss.fns, fns...)
	return sss
}

// Scan applies the selector query and scans the result into the given value.
func (sss *SubmissionSubtaskSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sss.ctx, "Select")
	if err := sss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SubmissionSubtaskQuery, *SubmissionSubtaskSelect](ctx, sss.SubmissionSubtaskQuery, sss, sss.inters, v)
}

func (sss *SubmissionSubtaskSelect) sqlScan(ctx context.Context, root *SubmissionSubtaskQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sss.fns))
	for _, fn := range sss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
