// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sastoj/ent/predicate"
	"sastoj/ent/submission"
	"sastoj/ent/submissioncase"
	"sastoj/ent/submissionsubtask"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubmissionSubtaskUpdate is the builder for updating SubmissionSubtask entities.
type SubmissionSubtaskUpdate struct {
	config
	hooks    []Hook
	mutation *SubmissionSubtaskMutation
}

// Where appends a list predicates to the SubmissionSubtaskUpdate builder.
func (ssu *SubmissionSubtaskUpdate) Where(ps ...predicate.SubmissionSubtask) *SubmissionSubtaskUpdate {
	ssu.mutation.Where(ps...)
	return ssu
}

// SetState sets the "state" field.
func (ssu *SubmissionSubtaskUpdate) SetState(i int16) *SubmissionSubtaskUpdate {
	ssu.mutation.ResetState()
	ssu.mutation.SetState(i)
	return ssu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (ssu *SubmissionSubtaskUpdate) SetNillableState(i *int16) *SubmissionSubtaskUpdate {
	if i != nil {
		ssu.SetState(*i)
	}
	return ssu
}

// AddState adds i to the "state" field.
func (ssu *SubmissionSubtaskUpdate) AddState(i int16) *SubmissionSubtaskUpdate {
	ssu.mutation.AddState(i)
	return ssu
}

// SetPoint sets the "point" field.
func (ssu *SubmissionSubtaskUpdate) SetPoint(i int16) *SubmissionSubtaskUpdate {
	ssu.mutation.ResetPoint()
	ssu.mutation.SetPoint(i)
	return ssu
}

// SetNillablePoint sets the "point" field if the given value is not nil.
func (ssu *SubmissionSubtaskUpdate) SetNillablePoint(i *int16) *SubmissionSubtaskUpdate {
	if i != nil {
		ssu.SetPoint(*i)
	}
	return ssu
}

// AddPoint adds i to the "point" field.
func (ssu *SubmissionSubtaskUpdate) AddPoint(i int16) *SubmissionSubtaskUpdate {
	ssu.mutation.AddPoint(i)
	return ssu
}

// SetTotalTime sets the "total_time" field.
func (ssu *SubmissionSubtaskUpdate) SetTotalTime(u uint64) *SubmissionSubtaskUpdate {
	ssu.mutation.ResetTotalTime()
	ssu.mutation.SetTotalTime(u)
	return ssu
}

// SetNillableTotalTime sets the "total_time" field if the given value is not nil.
func (ssu *SubmissionSubtaskUpdate) SetNillableTotalTime(u *uint64) *SubmissionSubtaskUpdate {
	if u != nil {
		ssu.SetTotalTime(*u)
	}
	return ssu
}

// AddTotalTime adds u to the "total_time" field.
func (ssu *SubmissionSubtaskUpdate) AddTotalTime(u int64) *SubmissionSubtaskUpdate {
	ssu.mutation.AddTotalTime(u)
	return ssu
}

// SetMaxMemory sets the "max_memory" field.
func (ssu *SubmissionSubtaskUpdate) SetMaxMemory(u uint64) *SubmissionSubtaskUpdate {
	ssu.mutation.ResetMaxMemory()
	ssu.mutation.SetMaxMemory(u)
	return ssu
}

// SetNillableMaxMemory sets the "max_memory" field if the given value is not nil.
func (ssu *SubmissionSubtaskUpdate) SetNillableMaxMemory(u *uint64) *SubmissionSubtaskUpdate {
	if u != nil {
		ssu.SetMaxMemory(*u)
	}
	return ssu
}

// AddMaxMemory adds u to the "max_memory" field.
func (ssu *SubmissionSubtaskUpdate) AddMaxMemory(u int64) *SubmissionSubtaskUpdate {
	ssu.mutation.AddMaxMemory(u)
	return ssu
}

// SetSubmissionID sets the "submission_id" field.
func (ssu *SubmissionSubtaskUpdate) SetSubmissionID(i int64) *SubmissionSubtaskUpdate {
	ssu.mutation.SetSubmissionID(i)
	return ssu
}

// SetNillableSubmissionID sets the "submission_id" field if the given value is not nil.
func (ssu *SubmissionSubtaskUpdate) SetNillableSubmissionID(i *int64) *SubmissionSubtaskUpdate {
	if i != nil {
		ssu.SetSubmissionID(*i)
	}
	return ssu
}

// AddSubmissionCaseIDs adds the "submission_cases" edge to the SubmissionCase entity by IDs.
func (ssu *SubmissionSubtaskUpdate) AddSubmissionCaseIDs(ids ...int64) *SubmissionSubtaskUpdate {
	ssu.mutation.AddSubmissionCaseIDs(ids...)
	return ssu
}

// AddSubmissionCases adds the "submission_cases" edges to the SubmissionCase entity.
func (ssu *SubmissionSubtaskUpdate) AddSubmissionCases(s ...*SubmissionCase) *SubmissionSubtaskUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ssu.AddSubmissionCaseIDs(ids...)
}

// SetSubmissionsID sets the "submissions" edge to the Submission entity by ID.
func (ssu *SubmissionSubtaskUpdate) SetSubmissionsID(id int64) *SubmissionSubtaskUpdate {
	ssu.mutation.SetSubmissionsID(id)
	return ssu
}

// SetSubmissions sets the "submissions" edge to the Submission entity.
func (ssu *SubmissionSubtaskUpdate) SetSubmissions(s *Submission) *SubmissionSubtaskUpdate {
	return ssu.SetSubmissionsID(s.ID)
}

// Mutation returns the SubmissionSubtaskMutation object of the builder.
func (ssu *SubmissionSubtaskUpdate) Mutation() *SubmissionSubtaskMutation {
	return ssu.mutation
}

// ClearSubmissionCases clears all "submission_cases" edges to the SubmissionCase entity.
func (ssu *SubmissionSubtaskUpdate) ClearSubmissionCases() *SubmissionSubtaskUpdate {
	ssu.mutation.ClearSubmissionCases()
	return ssu
}

// RemoveSubmissionCaseIDs removes the "submission_cases" edge to SubmissionCase entities by IDs.
func (ssu *SubmissionSubtaskUpdate) RemoveSubmissionCaseIDs(ids ...int64) *SubmissionSubtaskUpdate {
	ssu.mutation.RemoveSubmissionCaseIDs(ids...)
	return ssu
}

// RemoveSubmissionCases removes "submission_cases" edges to SubmissionCase entities.
func (ssu *SubmissionSubtaskUpdate) RemoveSubmissionCases(s ...*SubmissionCase) *SubmissionSubtaskUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ssu.RemoveSubmissionCaseIDs(ids...)
}

// ClearSubmissions clears the "submissions" edge to the Submission entity.
func (ssu *SubmissionSubtaskUpdate) ClearSubmissions() *SubmissionSubtaskUpdate {
	ssu.mutation.ClearSubmissions()
	return ssu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ssu *SubmissionSubtaskUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ssu.sqlSave, ssu.mutation, ssu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ssu *SubmissionSubtaskUpdate) SaveX(ctx context.Context) int {
	affected, err := ssu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ssu *SubmissionSubtaskUpdate) Exec(ctx context.Context) error {
	_, err := ssu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssu *SubmissionSubtaskUpdate) ExecX(ctx context.Context) {
	if err := ssu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssu *SubmissionSubtaskUpdate) check() error {
	if _, ok := ssu.mutation.SubmissionsID(); ssu.mutation.SubmissionsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SubmissionSubtask.submissions"`)
	}
	return nil
}

func (ssu *SubmissionSubtaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ssu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(submissionsubtask.Table, submissionsubtask.Columns, sqlgraph.NewFieldSpec(submissionsubtask.FieldID, field.TypeInt64))
	if ps := ssu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssu.mutation.State(); ok {
		_spec.SetField(submissionsubtask.FieldState, field.TypeInt16, value)
	}
	if value, ok := ssu.mutation.AddedState(); ok {
		_spec.AddField(submissionsubtask.FieldState, field.TypeInt16, value)
	}
	if value, ok := ssu.mutation.Point(); ok {
		_spec.SetField(submissionsubtask.FieldPoint, field.TypeInt16, value)
	}
	if value, ok := ssu.mutation.AddedPoint(); ok {
		_spec.AddField(submissionsubtask.FieldPoint, field.TypeInt16, value)
	}
	if value, ok := ssu.mutation.TotalTime(); ok {
		_spec.SetField(submissionsubtask.FieldTotalTime, field.TypeUint64, value)
	}
	if value, ok := ssu.mutation.AddedTotalTime(); ok {
		_spec.AddField(submissionsubtask.FieldTotalTime, field.TypeUint64, value)
	}
	if value, ok := ssu.mutation.MaxMemory(); ok {
		_spec.SetField(submissionsubtask.FieldMaxMemory, field.TypeUint64, value)
	}
	if value, ok := ssu.mutation.AddedMaxMemory(); ok {
		_spec.AddField(submissionsubtask.FieldMaxMemory, field.TypeUint64, value)
	}
	if ssu.mutation.SubmissionCasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   submissionsubtask.SubmissionCasesTable,
			Columns: []string{submissionsubtask.SubmissionCasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submissioncase.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.RemovedSubmissionCasesIDs(); len(nodes) > 0 && !ssu.mutation.SubmissionCasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   submissionsubtask.SubmissionCasesTable,
			Columns: []string{submissionsubtask.SubmissionCasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submissioncase.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.SubmissionCasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   submissionsubtask.SubmissionCasesTable,
			Columns: []string{submissionsubtask.SubmissionCasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submissioncase.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssu.mutation.SubmissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submissionsubtask.SubmissionsTable,
			Columns: []string{submissionsubtask.SubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submission.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.SubmissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submissionsubtask.SubmissionsTable,
			Columns: []string{submissionsubtask.SubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ssu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{submissionsubtask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ssu.mutation.done = true
	return n, nil
}

// SubmissionSubtaskUpdateOne is the builder for updating a single SubmissionSubtask entity.
type SubmissionSubtaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubmissionSubtaskMutation
}

// SetState sets the "state" field.
func (ssuo *SubmissionSubtaskUpdateOne) SetState(i int16) *SubmissionSubtaskUpdateOne {
	ssuo.mutation.ResetState()
	ssuo.mutation.SetState(i)
	return ssuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (ssuo *SubmissionSubtaskUpdateOne) SetNillableState(i *int16) *SubmissionSubtaskUpdateOne {
	if i != nil {
		ssuo.SetState(*i)
	}
	return ssuo
}

// AddState adds i to the "state" field.
func (ssuo *SubmissionSubtaskUpdateOne) AddState(i int16) *SubmissionSubtaskUpdateOne {
	ssuo.mutation.AddState(i)
	return ssuo
}

// SetPoint sets the "point" field.
func (ssuo *SubmissionSubtaskUpdateOne) SetPoint(i int16) *SubmissionSubtaskUpdateOne {
	ssuo.mutation.ResetPoint()
	ssuo.mutation.SetPoint(i)
	return ssuo
}

// SetNillablePoint sets the "point" field if the given value is not nil.
func (ssuo *SubmissionSubtaskUpdateOne) SetNillablePoint(i *int16) *SubmissionSubtaskUpdateOne {
	if i != nil {
		ssuo.SetPoint(*i)
	}
	return ssuo
}

// AddPoint adds i to the "point" field.
func (ssuo *SubmissionSubtaskUpdateOne) AddPoint(i int16) *SubmissionSubtaskUpdateOne {
	ssuo.mutation.AddPoint(i)
	return ssuo
}

// SetTotalTime sets the "total_time" field.
func (ssuo *SubmissionSubtaskUpdateOne) SetTotalTime(u uint64) *SubmissionSubtaskUpdateOne {
	ssuo.mutation.ResetTotalTime()
	ssuo.mutation.SetTotalTime(u)
	return ssuo
}

// SetNillableTotalTime sets the "total_time" field if the given value is not nil.
func (ssuo *SubmissionSubtaskUpdateOne) SetNillableTotalTime(u *uint64) *SubmissionSubtaskUpdateOne {
	if u != nil {
		ssuo.SetTotalTime(*u)
	}
	return ssuo
}

// AddTotalTime adds u to the "total_time" field.
func (ssuo *SubmissionSubtaskUpdateOne) AddTotalTime(u int64) *SubmissionSubtaskUpdateOne {
	ssuo.mutation.AddTotalTime(u)
	return ssuo
}

// SetMaxMemory sets the "max_memory" field.
func (ssuo *SubmissionSubtaskUpdateOne) SetMaxMemory(u uint64) *SubmissionSubtaskUpdateOne {
	ssuo.mutation.ResetMaxMemory()
	ssuo.mutation.SetMaxMemory(u)
	return ssuo
}

// SetNillableMaxMemory sets the "max_memory" field if the given value is not nil.
func (ssuo *SubmissionSubtaskUpdateOne) SetNillableMaxMemory(u *uint64) *SubmissionSubtaskUpdateOne {
	if u != nil {
		ssuo.SetMaxMemory(*u)
	}
	return ssuo
}

// AddMaxMemory adds u to the "max_memory" field.
func (ssuo *SubmissionSubtaskUpdateOne) AddMaxMemory(u int64) *SubmissionSubtaskUpdateOne {
	ssuo.mutation.AddMaxMemory(u)
	return ssuo
}

// SetSubmissionID sets the "submission_id" field.
func (ssuo *SubmissionSubtaskUpdateOne) SetSubmissionID(i int64) *SubmissionSubtaskUpdateOne {
	ssuo.mutation.SetSubmissionID(i)
	return ssuo
}

// SetNillableSubmissionID sets the "submission_id" field if the given value is not nil.
func (ssuo *SubmissionSubtaskUpdateOne) SetNillableSubmissionID(i *int64) *SubmissionSubtaskUpdateOne {
	if i != nil {
		ssuo.SetSubmissionID(*i)
	}
	return ssuo
}

// AddSubmissionCaseIDs adds the "submission_cases" edge to the SubmissionCase entity by IDs.
func (ssuo *SubmissionSubtaskUpdateOne) AddSubmissionCaseIDs(ids ...int64) *SubmissionSubtaskUpdateOne {
	ssuo.mutation.AddSubmissionCaseIDs(ids...)
	return ssuo
}

// AddSubmissionCases adds the "submission_cases" edges to the SubmissionCase entity.
func (ssuo *SubmissionSubtaskUpdateOne) AddSubmissionCases(s ...*SubmissionCase) *SubmissionSubtaskUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ssuo.AddSubmissionCaseIDs(ids...)
}

// SetSubmissionsID sets the "submissions" edge to the Submission entity by ID.
func (ssuo *SubmissionSubtaskUpdateOne) SetSubmissionsID(id int64) *SubmissionSubtaskUpdateOne {
	ssuo.mutation.SetSubmissionsID(id)
	return ssuo
}

// SetSubmissions sets the "submissions" edge to the Submission entity.
func (ssuo *SubmissionSubtaskUpdateOne) SetSubmissions(s *Submission) *SubmissionSubtaskUpdateOne {
	return ssuo.SetSubmissionsID(s.ID)
}

// Mutation returns the SubmissionSubtaskMutation object of the builder.
func (ssuo *SubmissionSubtaskUpdateOne) Mutation() *SubmissionSubtaskMutation {
	return ssuo.mutation
}

// ClearSubmissionCases clears all "submission_cases" edges to the SubmissionCase entity.
func (ssuo *SubmissionSubtaskUpdateOne) ClearSubmissionCases() *SubmissionSubtaskUpdateOne {
	ssuo.mutation.ClearSubmissionCases()
	return ssuo
}

// RemoveSubmissionCaseIDs removes the "submission_cases" edge to SubmissionCase entities by IDs.
func (ssuo *SubmissionSubtaskUpdateOne) RemoveSubmissionCaseIDs(ids ...int64) *SubmissionSubtaskUpdateOne {
	ssuo.mutation.RemoveSubmissionCaseIDs(ids...)
	return ssuo
}

// RemoveSubmissionCases removes "submission_cases" edges to SubmissionCase entities.
func (ssuo *SubmissionSubtaskUpdateOne) RemoveSubmissionCases(s ...*SubmissionCase) *SubmissionSubtaskUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ssuo.RemoveSubmissionCaseIDs(ids...)
}

// ClearSubmissions clears the "submissions" edge to the Submission entity.
func (ssuo *SubmissionSubtaskUpdateOne) ClearSubmissions() *SubmissionSubtaskUpdateOne {
	ssuo.mutation.ClearSubmissions()
	return ssuo
}

// Where appends a list predicates to the SubmissionSubtaskUpdate builder.
func (ssuo *SubmissionSubtaskUpdateOne) Where(ps ...predicate.SubmissionSubtask) *SubmissionSubtaskUpdateOne {
	ssuo.mutation.Where(ps...)
	return ssuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ssuo *SubmissionSubtaskUpdateOne) Select(field string, fields ...string) *SubmissionSubtaskUpdateOne {
	ssuo.fields = append([]string{field}, fields...)
	return ssuo
}

// Save executes the query and returns the updated SubmissionSubtask entity.
func (ssuo *SubmissionSubtaskUpdateOne) Save(ctx context.Context) (*SubmissionSubtask, error) {
	return withHooks(ctx, ssuo.sqlSave, ssuo.mutation, ssuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ssuo *SubmissionSubtaskUpdateOne) SaveX(ctx context.Context) *SubmissionSubtask {
	node, err := ssuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ssuo *SubmissionSubtaskUpdateOne) Exec(ctx context.Context) error {
	_, err := ssuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssuo *SubmissionSubtaskUpdateOne) ExecX(ctx context.Context) {
	if err := ssuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssuo *SubmissionSubtaskUpdateOne) check() error {
	if _, ok := ssuo.mutation.SubmissionsID(); ssuo.mutation.SubmissionsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SubmissionSubtask.submissions"`)
	}
	return nil
}

func (ssuo *SubmissionSubtaskUpdateOne) sqlSave(ctx context.Context) (_node *SubmissionSubtask, err error) {
	if err := ssuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(submissionsubtask.Table, submissionsubtask.Columns, sqlgraph.NewFieldSpec(submissionsubtask.FieldID, field.TypeInt64))
	id, ok := ssuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SubmissionSubtask.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ssuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, submissionsubtask.FieldID)
		for _, f := range fields {
			if !submissionsubtask.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != submissionsubtask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ssuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssuo.mutation.State(); ok {
		_spec.SetField(submissionsubtask.FieldState, field.TypeInt16, value)
	}
	if value, ok := ssuo.mutation.AddedState(); ok {
		_spec.AddField(submissionsubtask.FieldState, field.TypeInt16, value)
	}
	if value, ok := ssuo.mutation.Point(); ok {
		_spec.SetField(submissionsubtask.FieldPoint, field.TypeInt16, value)
	}
	if value, ok := ssuo.mutation.AddedPoint(); ok {
		_spec.AddField(submissionsubtask.FieldPoint, field.TypeInt16, value)
	}
	if value, ok := ssuo.mutation.TotalTime(); ok {
		_spec.SetField(submissionsubtask.FieldTotalTime, field.TypeUint64, value)
	}
	if value, ok := ssuo.mutation.AddedTotalTime(); ok {
		_spec.AddField(submissionsubtask.FieldTotalTime, field.TypeUint64, value)
	}
	if value, ok := ssuo.mutation.MaxMemory(); ok {
		_spec.SetField(submissionsubtask.FieldMaxMemory, field.TypeUint64, value)
	}
	if value, ok := ssuo.mutation.AddedMaxMemory(); ok {
		_spec.AddField(submissionsubtask.FieldMaxMemory, field.TypeUint64, value)
	}
	if ssuo.mutation.SubmissionCasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   submissionsubtask.SubmissionCasesTable,
			Columns: []string{submissionsubtask.SubmissionCasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submissioncase.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.RemovedSubmissionCasesIDs(); len(nodes) > 0 && !ssuo.mutation.SubmissionCasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   submissionsubtask.SubmissionCasesTable,
			Columns: []string{submissionsubtask.SubmissionCasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submissioncase.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.SubmissionCasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   submissionsubtask.SubmissionCasesTable,
			Columns: []string{submissionsubtask.SubmissionCasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submissioncase.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssuo.mutation.SubmissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submissionsubtask.SubmissionsTable,
			Columns: []string{submissionsubtask.SubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submission.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.SubmissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submissionsubtask.SubmissionsTable,
			Columns: []string{submissionsubtask.SubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SubmissionSubtask{config: ssuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ssuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{submissionsubtask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ssuo.mutation.done = true
	return _node, nil
}
