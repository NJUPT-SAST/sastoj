// Code generated by ent, DO NOT EDIT.

package submit

import (
	"sastoj/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Submit {
	return predicate.Submit(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Submit {
	return predicate.Submit(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Submit {
	return predicate.Submit(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Submit {
	return predicate.Submit(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Submit {
	return predicate.Submit(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Submit {
	return predicate.Submit(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Submit {
	return predicate.Submit(sql.FieldLTE(FieldID, id))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldCode, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int16) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldStatus, v))
}

// Point applies equality check predicate on the "point" field. It's identical to PointEQ.
func Point(v int16) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldPoint, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldCreateTime, v))
}

// TotalTime applies equality check predicate on the "total_time" field. It's identical to TotalTimeEQ.
func TotalTime(v int32) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldTotalTime, v))
}

// MaxMemory applies equality check predicate on the "max_memory" field. It's identical to MaxMemoryEQ.
func MaxMemory(v int32) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldMaxMemory, v))
}

// Language applies equality check predicate on the "language" field. It's identical to LanguageEQ.
func Language(v string) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldLanguage, v))
}

// CaseVersion applies equality check predicate on the "case_version" field. It's identical to CaseVersionEQ.
func CaseVersion(v int8) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldCaseVersion, v))
}

// ProblemID applies equality check predicate on the "problem_id" field. It's identical to ProblemIDEQ.
func ProblemID(v int64) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldProblemID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int64) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldUserID, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Submit {
	return predicate.Submit(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Submit {
	return predicate.Submit(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Submit {
	return predicate.Submit(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Submit {
	return predicate.Submit(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Submit {
	return predicate.Submit(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Submit {
	return predicate.Submit(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Submit {
	return predicate.Submit(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Submit {
	return predicate.Submit(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Submit {
	return predicate.Submit(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Submit {
	return predicate.Submit(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Submit {
	return predicate.Submit(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Submit {
	return predicate.Submit(sql.FieldContainsFold(FieldCode, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int16) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int16) predicate.Submit {
	return predicate.Submit(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int16) predicate.Submit {
	return predicate.Submit(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int16) predicate.Submit {
	return predicate.Submit(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int16) predicate.Submit {
	return predicate.Submit(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int16) predicate.Submit {
	return predicate.Submit(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int16) predicate.Submit {
	return predicate.Submit(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int16) predicate.Submit {
	return predicate.Submit(sql.FieldLTE(FieldStatus, v))
}

// PointEQ applies the EQ predicate on the "point" field.
func PointEQ(v int16) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldPoint, v))
}

// PointNEQ applies the NEQ predicate on the "point" field.
func PointNEQ(v int16) predicate.Submit {
	return predicate.Submit(sql.FieldNEQ(FieldPoint, v))
}

// PointIn applies the In predicate on the "point" field.
func PointIn(vs ...int16) predicate.Submit {
	return predicate.Submit(sql.FieldIn(FieldPoint, vs...))
}

// PointNotIn applies the NotIn predicate on the "point" field.
func PointNotIn(vs ...int16) predicate.Submit {
	return predicate.Submit(sql.FieldNotIn(FieldPoint, vs...))
}

// PointGT applies the GT predicate on the "point" field.
func PointGT(v int16) predicate.Submit {
	return predicate.Submit(sql.FieldGT(FieldPoint, v))
}

// PointGTE applies the GTE predicate on the "point" field.
func PointGTE(v int16) predicate.Submit {
	return predicate.Submit(sql.FieldGTE(FieldPoint, v))
}

// PointLT applies the LT predicate on the "point" field.
func PointLT(v int16) predicate.Submit {
	return predicate.Submit(sql.FieldLT(FieldPoint, v))
}

// PointLTE applies the LTE predicate on the "point" field.
func PointLTE(v int16) predicate.Submit {
	return predicate.Submit(sql.FieldLTE(FieldPoint, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldLTE(FieldCreateTime, v))
}

// TotalTimeEQ applies the EQ predicate on the "total_time" field.
func TotalTimeEQ(v int32) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldTotalTime, v))
}

// TotalTimeNEQ applies the NEQ predicate on the "total_time" field.
func TotalTimeNEQ(v int32) predicate.Submit {
	return predicate.Submit(sql.FieldNEQ(FieldTotalTime, v))
}

// TotalTimeIn applies the In predicate on the "total_time" field.
func TotalTimeIn(vs ...int32) predicate.Submit {
	return predicate.Submit(sql.FieldIn(FieldTotalTime, vs...))
}

// TotalTimeNotIn applies the NotIn predicate on the "total_time" field.
func TotalTimeNotIn(vs ...int32) predicate.Submit {
	return predicate.Submit(sql.FieldNotIn(FieldTotalTime, vs...))
}

// TotalTimeGT applies the GT predicate on the "total_time" field.
func TotalTimeGT(v int32) predicate.Submit {
	return predicate.Submit(sql.FieldGT(FieldTotalTime, v))
}

// TotalTimeGTE applies the GTE predicate on the "total_time" field.
func TotalTimeGTE(v int32) predicate.Submit {
	return predicate.Submit(sql.FieldGTE(FieldTotalTime, v))
}

// TotalTimeLT applies the LT predicate on the "total_time" field.
func TotalTimeLT(v int32) predicate.Submit {
	return predicate.Submit(sql.FieldLT(FieldTotalTime, v))
}

// TotalTimeLTE applies the LTE predicate on the "total_time" field.
func TotalTimeLTE(v int32) predicate.Submit {
	return predicate.Submit(sql.FieldLTE(FieldTotalTime, v))
}

// MaxMemoryEQ applies the EQ predicate on the "max_memory" field.
func MaxMemoryEQ(v int32) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldMaxMemory, v))
}

// MaxMemoryNEQ applies the NEQ predicate on the "max_memory" field.
func MaxMemoryNEQ(v int32) predicate.Submit {
	return predicate.Submit(sql.FieldNEQ(FieldMaxMemory, v))
}

// MaxMemoryIn applies the In predicate on the "max_memory" field.
func MaxMemoryIn(vs ...int32) predicate.Submit {
	return predicate.Submit(sql.FieldIn(FieldMaxMemory, vs...))
}

// MaxMemoryNotIn applies the NotIn predicate on the "max_memory" field.
func MaxMemoryNotIn(vs ...int32) predicate.Submit {
	return predicate.Submit(sql.FieldNotIn(FieldMaxMemory, vs...))
}

// MaxMemoryGT applies the GT predicate on the "max_memory" field.
func MaxMemoryGT(v int32) predicate.Submit {
	return predicate.Submit(sql.FieldGT(FieldMaxMemory, v))
}

// MaxMemoryGTE applies the GTE predicate on the "max_memory" field.
func MaxMemoryGTE(v int32) predicate.Submit {
	return predicate.Submit(sql.FieldGTE(FieldMaxMemory, v))
}

// MaxMemoryLT applies the LT predicate on the "max_memory" field.
func MaxMemoryLT(v int32) predicate.Submit {
	return predicate.Submit(sql.FieldLT(FieldMaxMemory, v))
}

// MaxMemoryLTE applies the LTE predicate on the "max_memory" field.
func MaxMemoryLTE(v int32) predicate.Submit {
	return predicate.Submit(sql.FieldLTE(FieldMaxMemory, v))
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v string) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldLanguage, v))
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v string) predicate.Submit {
	return predicate.Submit(sql.FieldNEQ(FieldLanguage, v))
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...string) predicate.Submit {
	return predicate.Submit(sql.FieldIn(FieldLanguage, vs...))
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...string) predicate.Submit {
	return predicate.Submit(sql.FieldNotIn(FieldLanguage, vs...))
}

// LanguageGT applies the GT predicate on the "language" field.
func LanguageGT(v string) predicate.Submit {
	return predicate.Submit(sql.FieldGT(FieldLanguage, v))
}

// LanguageGTE applies the GTE predicate on the "language" field.
func LanguageGTE(v string) predicate.Submit {
	return predicate.Submit(sql.FieldGTE(FieldLanguage, v))
}

// LanguageLT applies the LT predicate on the "language" field.
func LanguageLT(v string) predicate.Submit {
	return predicate.Submit(sql.FieldLT(FieldLanguage, v))
}

// LanguageLTE applies the LTE predicate on the "language" field.
func LanguageLTE(v string) predicate.Submit {
	return predicate.Submit(sql.FieldLTE(FieldLanguage, v))
}

// LanguageContains applies the Contains predicate on the "language" field.
func LanguageContains(v string) predicate.Submit {
	return predicate.Submit(sql.FieldContains(FieldLanguage, v))
}

// LanguageHasPrefix applies the HasPrefix predicate on the "language" field.
func LanguageHasPrefix(v string) predicate.Submit {
	return predicate.Submit(sql.FieldHasPrefix(FieldLanguage, v))
}

// LanguageHasSuffix applies the HasSuffix predicate on the "language" field.
func LanguageHasSuffix(v string) predicate.Submit {
	return predicate.Submit(sql.FieldHasSuffix(FieldLanguage, v))
}

// LanguageEqualFold applies the EqualFold predicate on the "language" field.
func LanguageEqualFold(v string) predicate.Submit {
	return predicate.Submit(sql.FieldEqualFold(FieldLanguage, v))
}

// LanguageContainsFold applies the ContainsFold predicate on the "language" field.
func LanguageContainsFold(v string) predicate.Submit {
	return predicate.Submit(sql.FieldContainsFold(FieldLanguage, v))
}

// CaseVersionEQ applies the EQ predicate on the "case_version" field.
func CaseVersionEQ(v int8) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldCaseVersion, v))
}

// CaseVersionNEQ applies the NEQ predicate on the "case_version" field.
func CaseVersionNEQ(v int8) predicate.Submit {
	return predicate.Submit(sql.FieldNEQ(FieldCaseVersion, v))
}

// CaseVersionIn applies the In predicate on the "case_version" field.
func CaseVersionIn(vs ...int8) predicate.Submit {
	return predicate.Submit(sql.FieldIn(FieldCaseVersion, vs...))
}

// CaseVersionNotIn applies the NotIn predicate on the "case_version" field.
func CaseVersionNotIn(vs ...int8) predicate.Submit {
	return predicate.Submit(sql.FieldNotIn(FieldCaseVersion, vs...))
}

// CaseVersionGT applies the GT predicate on the "case_version" field.
func CaseVersionGT(v int8) predicate.Submit {
	return predicate.Submit(sql.FieldGT(FieldCaseVersion, v))
}

// CaseVersionGTE applies the GTE predicate on the "case_version" field.
func CaseVersionGTE(v int8) predicate.Submit {
	return predicate.Submit(sql.FieldGTE(FieldCaseVersion, v))
}

// CaseVersionLT applies the LT predicate on the "case_version" field.
func CaseVersionLT(v int8) predicate.Submit {
	return predicate.Submit(sql.FieldLT(FieldCaseVersion, v))
}

// CaseVersionLTE applies the LTE predicate on the "case_version" field.
func CaseVersionLTE(v int8) predicate.Submit {
	return predicate.Submit(sql.FieldLTE(FieldCaseVersion, v))
}

// ProblemIDEQ applies the EQ predicate on the "problem_id" field.
func ProblemIDEQ(v int64) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldProblemID, v))
}

// ProblemIDNEQ applies the NEQ predicate on the "problem_id" field.
func ProblemIDNEQ(v int64) predicate.Submit {
	return predicate.Submit(sql.FieldNEQ(FieldProblemID, v))
}

// ProblemIDIn applies the In predicate on the "problem_id" field.
func ProblemIDIn(vs ...int64) predicate.Submit {
	return predicate.Submit(sql.FieldIn(FieldProblemID, vs...))
}

// ProblemIDNotIn applies the NotIn predicate on the "problem_id" field.
func ProblemIDNotIn(vs ...int64) predicate.Submit {
	return predicate.Submit(sql.FieldNotIn(FieldProblemID, vs...))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int64) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int64) predicate.Submit {
	return predicate.Submit(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int64) predicate.Submit {
	return predicate.Submit(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int64) predicate.Submit {
	return predicate.Submit(sql.FieldNotIn(FieldUserID, vs...))
}

// HasSubmitCases applies the HasEdge predicate on the "submit_cases" edge.
func HasSubmitCases() predicate.Submit {
	return predicate.Submit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SubmitCasesTable, SubmitCasesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubmitCasesWith applies the HasEdge predicate on the "submit_cases" edge with a given conditions (other predicates).
func HasSubmitCasesWith(preds ...predicate.SubmitCase) predicate.Submit {
	return predicate.Submit(func(s *sql.Selector) {
		step := newSubmitCasesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProblems applies the HasEdge predicate on the "problems" edge.
func HasProblems() predicate.Submit {
	return predicate.Submit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProblemsTable, ProblemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProblemsWith applies the HasEdge predicate on the "problems" edge with a given conditions (other predicates).
func HasProblemsWith(preds ...predicate.Problem) predicate.Submit {
	return predicate.Submit(func(s *sql.Selector) {
		step := newProblemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.Submit {
	return predicate.Submit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.Submit {
	return predicate.Submit(func(s *sql.Selector) {
		step := newUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Submit) predicate.Submit {
	return predicate.Submit(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Submit) predicate.Submit {
	return predicate.Submit(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Submit) predicate.Submit {
	return predicate.Submit(sql.NotPredicates(p))
}
