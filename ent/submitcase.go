// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"sastoj/ent/problemcase"
	"sastoj/ent/submit"
	"sastoj/ent/submitcase"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SubmitCase is the model entity for the SubmitCase schema.
type SubmitCase struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SubmitID holds the value of the "submit_id" field.
	SubmitID int `json:"submit_id,omitempty"`
	// CaseID holds the value of the "case_id" field.
	CaseID int `json:"case_id,omitempty"`
	// State holds the value of the "state" field.
	State int `json:"state,omitempty"`
	// Point holds the value of the "point" field.
	Point int `json:"point,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// Time holds the value of the "time" field.
	Time int `json:"time,omitempty"`
	// Memory holds the value of the "memory" field.
	Memory int `json:"memory,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubmitCaseQuery when eager-loading is set.
	Edges                    SubmitCaseEdges `json:"edges"`
	submit_case_submit       *int
	submit_case_problem_case *int
	selectValues             sql.SelectValues
}

// SubmitCaseEdges holds the relations/edges for other nodes in the graph.
type SubmitCaseEdges struct {
	// Submit holds the value of the submit edge.
	Submit *Submit `json:"submit,omitempty"`
	// ProblemCase holds the value of the problem_case edge.
	ProblemCase *ProblemCase `json:"problem_case,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SubmitOrErr returns the Submit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubmitCaseEdges) SubmitOrErr() (*Submit, error) {
	if e.loadedTypes[0] {
		if e.Submit == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: submit.Label}
		}
		return e.Submit, nil
	}
	return nil, &NotLoadedError{edge: "submit"}
}

// ProblemCaseOrErr returns the ProblemCase value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubmitCaseEdges) ProblemCaseOrErr() (*ProblemCase, error) {
	if e.loadedTypes[1] {
		if e.ProblemCase == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: problemcase.Label}
		}
		return e.ProblemCase, nil
	}
	return nil, &NotLoadedError{edge: "problem_case"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SubmitCase) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case submitcase.FieldID, submitcase.FieldSubmitID, submitcase.FieldCaseID, submitcase.FieldState, submitcase.FieldPoint, submitcase.FieldTime, submitcase.FieldMemory:
			values[i] = new(sql.NullInt64)
		case submitcase.FieldMessage:
			values[i] = new(sql.NullString)
		case submitcase.ForeignKeys[0]: // submit_case_submit
			values[i] = new(sql.NullInt64)
		case submitcase.ForeignKeys[1]: // submit_case_problem_case
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SubmitCase fields.
func (sc *SubmitCase) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case submitcase.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sc.ID = int(value.Int64)
		case submitcase.FieldSubmitID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field submit_id", values[i])
			} else if value.Valid {
				sc.SubmitID = int(value.Int64)
			}
		case submitcase.FieldCaseID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field case_id", values[i])
			} else if value.Valid {
				sc.CaseID = int(value.Int64)
			}
		case submitcase.FieldState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				sc.State = int(value.Int64)
			}
		case submitcase.FieldPoint:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field point", values[i])
			} else if value.Valid {
				sc.Point = int(value.Int64)
			}
		case submitcase.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				sc.Message = value.String
			}
		case submitcase.FieldTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				sc.Time = int(value.Int64)
			}
		case submitcase.FieldMemory:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field memory", values[i])
			} else if value.Valid {
				sc.Memory = int(value.Int64)
			}
		case submitcase.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field submit_case_submit", value)
			} else if value.Valid {
				sc.submit_case_submit = new(int)
				*sc.submit_case_submit = int(value.Int64)
			}
		case submitcase.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field submit_case_problem_case", value)
			} else if value.Valid {
				sc.submit_case_problem_case = new(int)
				*sc.submit_case_problem_case = int(value.Int64)
			}
		default:
			sc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SubmitCase.
// This includes values selected through modifiers, order, etc.
func (sc *SubmitCase) Value(name string) (ent.Value, error) {
	return sc.selectValues.Get(name)
}

// QuerySubmit queries the "submit" edge of the SubmitCase entity.
func (sc *SubmitCase) QuerySubmit() *SubmitQuery {
	return NewSubmitCaseClient(sc.config).QuerySubmit(sc)
}

// QueryProblemCase queries the "problem_case" edge of the SubmitCase entity.
func (sc *SubmitCase) QueryProblemCase() *ProblemCaseQuery {
	return NewSubmitCaseClient(sc.config).QueryProblemCase(sc)
}

// Update returns a builder for updating this SubmitCase.
// Note that you need to call SubmitCase.Unwrap() before calling this method if this SubmitCase
// was returned from a transaction, and the transaction was committed or rolled back.
func (sc *SubmitCase) Update() *SubmitCaseUpdateOne {
	return NewSubmitCaseClient(sc.config).UpdateOne(sc)
}

// Unwrap unwraps the SubmitCase entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sc *SubmitCase) Unwrap() *SubmitCase {
	_tx, ok := sc.config.driver.(*txDriver)
	if !ok {
		panic("ent: SubmitCase is not a transactional entity")
	}
	sc.config.driver = _tx.drv
	return sc
}

// String implements the fmt.Stringer.
func (sc *SubmitCase) String() string {
	var builder strings.Builder
	builder.WriteString("SubmitCase(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sc.ID))
	builder.WriteString("submit_id=")
	builder.WriteString(fmt.Sprintf("%v", sc.SubmitID))
	builder.WriteString(", ")
	builder.WriteString("case_id=")
	builder.WriteString(fmt.Sprintf("%v", sc.CaseID))
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", sc.State))
	builder.WriteString(", ")
	builder.WriteString("point=")
	builder.WriteString(fmt.Sprintf("%v", sc.Point))
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(sc.Message)
	builder.WriteString(", ")
	builder.WriteString("time=")
	builder.WriteString(fmt.Sprintf("%v", sc.Time))
	builder.WriteString(", ")
	builder.WriteString("memory=")
	builder.WriteString(fmt.Sprintf("%v", sc.Memory))
	builder.WriteByte(')')
	return builder.String()
}

// SubmitCases is a parsable slice of SubmitCase.
type SubmitCases []*SubmitCase
