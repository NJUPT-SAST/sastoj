// Code generated by ent, DO NOT EDIT.

package submitcase

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the submitcase type in the database.
	Label = "submit_case"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSubmitID holds the string denoting the submit_id field in the database.
	FieldSubmitID = "submit_id"
	// FieldCaseID holds the string denoting the case_id field in the database.
	FieldCaseID = "case_id"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldPoint holds the string denoting the point field in the database.
	FieldPoint = "point"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldTime holds the string denoting the time field in the database.
	FieldTime = "time"
	// FieldMemory holds the string denoting the memory field in the database.
	FieldMemory = "memory"
	// EdgeSubmit holds the string denoting the submit edge name in mutations.
	EdgeSubmit = "submit"
	// EdgeProblemCase holds the string denoting the problem_case edge name in mutations.
	EdgeProblemCase = "problem_case"
	// Table holds the table name of the submitcase in the database.
	Table = "submit_cases"
	// SubmitTable is the table that holds the submit relation/edge.
	SubmitTable = "submit_cases"
	// SubmitInverseTable is the table name for the Submit entity.
	// It exists in this package in order to avoid circular dependency with the "submit" package.
	SubmitInverseTable = "submit"
	// SubmitColumn is the table column denoting the submit relation/edge.
	SubmitColumn = "submit_case_submit"
	// ProblemCaseTable is the table that holds the problem_case relation/edge.
	ProblemCaseTable = "submit_cases"
	// ProblemCaseInverseTable is the table name for the ProblemCase entity.
	// It exists in this package in order to avoid circular dependency with the "problemcase" package.
	ProblemCaseInverseTable = "problem_cases"
	// ProblemCaseColumn is the table column denoting the problem_case relation/edge.
	ProblemCaseColumn = "submit_case_problem_case"
)

// Columns holds all SQL columns for submitcase fields.
var Columns = []string{
	FieldID,
	FieldSubmitID,
	FieldCaseID,
	FieldState,
	FieldPoint,
	FieldMessage,
	FieldTime,
	FieldMemory,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "submit_cases"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"submit_case_submit",
	"submit_case_problem_case",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// SubmitIDValidator is a validator for the "submit_id" field. It is called by the builders before save.
	SubmitIDValidator func(int) error
	// CaseIDValidator is a validator for the "case_id" field. It is called by the builders before save.
	CaseIDValidator func(int) error
	// StateValidator is a validator for the "state" field. It is called by the builders before save.
	StateValidator func(int) error
)

// OrderOption defines the ordering options for the SubmitCase queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySubmitID orders the results by the submit_id field.
func BySubmitID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubmitID, opts...).ToFunc()
}

// ByCaseID orders the results by the case_id field.
func ByCaseID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCaseID, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByPoint orders the results by the point field.
func ByPoint(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPoint, opts...).ToFunc()
}

// ByMessage orders the results by the message field.
func ByMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMessage, opts...).ToFunc()
}

// ByTime orders the results by the time field.
func ByTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTime, opts...).ToFunc()
}

// ByMemory orders the results by the memory field.
func ByMemory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMemory, opts...).ToFunc()
}

// BySubmitField orders the results by submit field.
func BySubmitField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubmitStep(), sql.OrderByField(field, opts...))
	}
}

// ByProblemCaseField orders the results by problem_case field.
func ByProblemCaseField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProblemCaseStep(), sql.OrderByField(field, opts...))
	}
}
func newSubmitStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubmitInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SubmitTable, SubmitColumn),
	)
}
func newProblemCaseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProblemCaseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ProblemCaseTable, ProblemCaseColumn),
	)
}
