// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sastoj/ent/problemcase"
	"sastoj/ent/submit"
	"sastoj/ent/submitcase"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubmitCaseCreate is the builder for creating a SubmitCase entity.
type SubmitCaseCreate struct {
	config
	mutation *SubmitCaseMutation
	hooks    []Hook
}

// SetState sets the "state" field.
func (scc *SubmitCaseCreate) SetState(i int) *SubmitCaseCreate {
	scc.mutation.SetState(i)
	return scc
}

// SetPoint sets the "point" field.
func (scc *SubmitCaseCreate) SetPoint(i int) *SubmitCaseCreate {
	scc.mutation.SetPoint(i)
	return scc
}

// SetMessage sets the "message" field.
func (scc *SubmitCaseCreate) SetMessage(s string) *SubmitCaseCreate {
	scc.mutation.SetMessage(s)
	return scc
}

// SetTime sets the "time" field.
func (scc *SubmitCaseCreate) SetTime(i int) *SubmitCaseCreate {
	scc.mutation.SetTime(i)
	return scc
}

// SetMemory sets the "memory" field.
func (scc *SubmitCaseCreate) SetMemory(i int) *SubmitCaseCreate {
	scc.mutation.SetMemory(i)
	return scc
}

// SetID sets the "id" field.
func (scc *SubmitCaseCreate) SetID(i int) *SubmitCaseCreate {
	scc.mutation.SetID(i)
	return scc
}

// SetSubmissionID sets the "submission" edge to the Submit entity by ID.
func (scc *SubmitCaseCreate) SetSubmissionID(id int) *SubmitCaseCreate {
	scc.mutation.SetSubmissionID(id)
	return scc
}

// SetNillableSubmissionID sets the "submission" edge to the Submit entity by ID if the given value is not nil.
func (scc *SubmitCaseCreate) SetNillableSubmissionID(id *int) *SubmitCaseCreate {
	if id != nil {
		scc = scc.SetSubmissionID(*id)
	}
	return scc
}

// SetSubmission sets the "submission" edge to the Submit entity.
func (scc *SubmitCaseCreate) SetSubmission(s *Submit) *SubmitCaseCreate {
	return scc.SetSubmissionID(s.ID)
}

// SetProblemCasesID sets the "problem_cases" edge to the ProblemCase entity by ID.
func (scc *SubmitCaseCreate) SetProblemCasesID(id int) *SubmitCaseCreate {
	scc.mutation.SetProblemCasesID(id)
	return scc
}

// SetNillableProblemCasesID sets the "problem_cases" edge to the ProblemCase entity by ID if the given value is not nil.
func (scc *SubmitCaseCreate) SetNillableProblemCasesID(id *int) *SubmitCaseCreate {
	if id != nil {
		scc = scc.SetProblemCasesID(*id)
	}
	return scc
}

// SetProblemCases sets the "problem_cases" edge to the ProblemCase entity.
func (scc *SubmitCaseCreate) SetProblemCases(p *ProblemCase) *SubmitCaseCreate {
	return scc.SetProblemCasesID(p.ID)
}

// Mutation returns the SubmitCaseMutation object of the builder.
func (scc *SubmitCaseCreate) Mutation() *SubmitCaseMutation {
	return scc.mutation
}

// Save creates the SubmitCase in the database.
func (scc *SubmitCaseCreate) Save(ctx context.Context) (*SubmitCase, error) {
	return withHooks(ctx, scc.sqlSave, scc.mutation, scc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (scc *SubmitCaseCreate) SaveX(ctx context.Context) *SubmitCase {
	v, err := scc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scc *SubmitCaseCreate) Exec(ctx context.Context) error {
	_, err := scc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scc *SubmitCaseCreate) ExecX(ctx context.Context) {
	if err := scc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scc *SubmitCaseCreate) check() error {
	if _, ok := scc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "SubmitCase.state"`)}
	}
	if v, ok := scc.mutation.State(); ok {
		if err := submitcase.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "SubmitCase.state": %w`, err)}
		}
	}
	if _, ok := scc.mutation.Point(); !ok {
		return &ValidationError{Name: "point", err: errors.New(`ent: missing required field "SubmitCase.point"`)}
	}
	if v, ok := scc.mutation.Point(); ok {
		if err := submitcase.PointValidator(v); err != nil {
			return &ValidationError{Name: "point", err: fmt.Errorf(`ent: validator failed for field "SubmitCase.point": %w`, err)}
		}
	}
	if _, ok := scc.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New(`ent: missing required field "SubmitCase.message"`)}
	}
	if _, ok := scc.mutation.Time(); !ok {
		return &ValidationError{Name: "time", err: errors.New(`ent: missing required field "SubmitCase.time"`)}
	}
	if v, ok := scc.mutation.Time(); ok {
		if err := submitcase.TimeValidator(v); err != nil {
			return &ValidationError{Name: "time", err: fmt.Errorf(`ent: validator failed for field "SubmitCase.time": %w`, err)}
		}
	}
	if _, ok := scc.mutation.Memory(); !ok {
		return &ValidationError{Name: "memory", err: errors.New(`ent: missing required field "SubmitCase.memory"`)}
	}
	if v, ok := scc.mutation.Memory(); ok {
		if err := submitcase.MemoryValidator(v); err != nil {
			return &ValidationError{Name: "memory", err: fmt.Errorf(`ent: validator failed for field "SubmitCase.memory": %w`, err)}
		}
	}
	return nil
}

func (scc *SubmitCaseCreate) sqlSave(ctx context.Context) (*SubmitCase, error) {
	if err := scc.check(); err != nil {
		return nil, err
	}
	_node, _spec := scc.createSpec()
	if err := sqlgraph.CreateNode(ctx, scc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	scc.mutation.id = &_node.ID
	scc.mutation.done = true
	return _node, nil
}

func (scc *SubmitCaseCreate) createSpec() (*SubmitCase, *sqlgraph.CreateSpec) {
	var (
		_node = &SubmitCase{config: scc.config}
		_spec = sqlgraph.NewCreateSpec(submitcase.Table, sqlgraph.NewFieldSpec(submitcase.FieldID, field.TypeInt))
	)
	if id, ok := scc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := scc.mutation.State(); ok {
		_spec.SetField(submitcase.FieldState, field.TypeInt, value)
		_node.State = value
	}
	if value, ok := scc.mutation.Point(); ok {
		_spec.SetField(submitcase.FieldPoint, field.TypeInt, value)
		_node.Point = value
	}
	if value, ok := scc.mutation.Message(); ok {
		_spec.SetField(submitcase.FieldMessage, field.TypeString, value)
		_node.Message = value
	}
	if value, ok := scc.mutation.Time(); ok {
		_spec.SetField(submitcase.FieldTime, field.TypeInt, value)
		_node.Time = value
	}
	if value, ok := scc.mutation.Memory(); ok {
		_spec.SetField(submitcase.FieldMemory, field.TypeInt, value)
		_node.Memory = value
	}
	if nodes := scc.mutation.SubmissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submitcase.SubmissionTable,
			Columns: []string{submitcase.SubmissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.submit_submit_cases = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := scc.mutation.ProblemCasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submitcase.ProblemCasesTable,
			Columns: []string{submitcase.ProblemCasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problemcase.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.problem_case_submit_cases = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SubmitCaseCreateBulk is the builder for creating many SubmitCase entities in bulk.
type SubmitCaseCreateBulk struct {
	config
	err      error
	builders []*SubmitCaseCreate
}

// Save creates the SubmitCase entities in the database.
func (sccb *SubmitCaseCreateBulk) Save(ctx context.Context) ([]*SubmitCase, error) {
	if sccb.err != nil {
		return nil, sccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sccb.builders))
	nodes := make([]*SubmitCase, len(sccb.builders))
	mutators := make([]Mutator, len(sccb.builders))
	for i := range sccb.builders {
		func(i int, root context.Context) {
			builder := sccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubmitCaseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sccb *SubmitCaseCreateBulk) SaveX(ctx context.Context) []*SubmitCase {
	v, err := sccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sccb *SubmitCaseCreateBulk) Exec(ctx context.Context) error {
	_, err := sccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sccb *SubmitCaseCreateBulk) ExecX(ctx context.Context) {
	if err := sccb.Exec(ctx); err != nil {
		panic(err)
	}
}
