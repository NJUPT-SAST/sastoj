// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sastoj/ent/predicate"
	"sastoj/ent/problemcase"
	"sastoj/ent/submit"
	"sastoj/ent/submitcase"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubmitCaseUpdate is the builder for updating SubmitCase entities.
type SubmitCaseUpdate struct {
	config
	hooks    []Hook
	mutation *SubmitCaseMutation
}

// Where appends a list predicates to the SubmitCaseUpdate builder.
func (scu *SubmitCaseUpdate) Where(ps ...predicate.SubmitCase) *SubmitCaseUpdate {
	scu.mutation.Where(ps...)
	return scu
}

// SetSubmitID sets the "submit_id" field.
func (scu *SubmitCaseUpdate) SetSubmitID(i int) *SubmitCaseUpdate {
	scu.mutation.ResetSubmitID()
	scu.mutation.SetSubmitID(i)
	return scu
}

// SetNillableSubmitID sets the "submit_id" field if the given value is not nil.
func (scu *SubmitCaseUpdate) SetNillableSubmitID(i *int) *SubmitCaseUpdate {
	if i != nil {
		scu.SetSubmitID(*i)
	}
	return scu
}

// AddSubmitID adds i to the "submit_id" field.
func (scu *SubmitCaseUpdate) AddSubmitID(i int) *SubmitCaseUpdate {
	scu.mutation.AddSubmitID(i)
	return scu
}

// SetCaseID sets the "case_id" field.
func (scu *SubmitCaseUpdate) SetCaseID(i int) *SubmitCaseUpdate {
	scu.mutation.ResetCaseID()
	scu.mutation.SetCaseID(i)
	return scu
}

// SetNillableCaseID sets the "case_id" field if the given value is not nil.
func (scu *SubmitCaseUpdate) SetNillableCaseID(i *int) *SubmitCaseUpdate {
	if i != nil {
		scu.SetCaseID(*i)
	}
	return scu
}

// AddCaseID adds i to the "case_id" field.
func (scu *SubmitCaseUpdate) AddCaseID(i int) *SubmitCaseUpdate {
	scu.mutation.AddCaseID(i)
	return scu
}

// SetState sets the "state" field.
func (scu *SubmitCaseUpdate) SetState(i int) *SubmitCaseUpdate {
	scu.mutation.ResetState()
	scu.mutation.SetState(i)
	return scu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (scu *SubmitCaseUpdate) SetNillableState(i *int) *SubmitCaseUpdate {
	if i != nil {
		scu.SetState(*i)
	}
	return scu
}

// AddState adds i to the "state" field.
func (scu *SubmitCaseUpdate) AddState(i int) *SubmitCaseUpdate {
	scu.mutation.AddState(i)
	return scu
}

// SetPoint sets the "point" field.
func (scu *SubmitCaseUpdate) SetPoint(i int) *SubmitCaseUpdate {
	scu.mutation.ResetPoint()
	scu.mutation.SetPoint(i)
	return scu
}

// SetNillablePoint sets the "point" field if the given value is not nil.
func (scu *SubmitCaseUpdate) SetNillablePoint(i *int) *SubmitCaseUpdate {
	if i != nil {
		scu.SetPoint(*i)
	}
	return scu
}

// AddPoint adds i to the "point" field.
func (scu *SubmitCaseUpdate) AddPoint(i int) *SubmitCaseUpdate {
	scu.mutation.AddPoint(i)
	return scu
}

// SetMessage sets the "message" field.
func (scu *SubmitCaseUpdate) SetMessage(s string) *SubmitCaseUpdate {
	scu.mutation.SetMessage(s)
	return scu
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (scu *SubmitCaseUpdate) SetNillableMessage(s *string) *SubmitCaseUpdate {
	if s != nil {
		scu.SetMessage(*s)
	}
	return scu
}

// SetTime sets the "time" field.
func (scu *SubmitCaseUpdate) SetTime(i int) *SubmitCaseUpdate {
	scu.mutation.ResetTime()
	scu.mutation.SetTime(i)
	return scu
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (scu *SubmitCaseUpdate) SetNillableTime(i *int) *SubmitCaseUpdate {
	if i != nil {
		scu.SetTime(*i)
	}
	return scu
}

// AddTime adds i to the "time" field.
func (scu *SubmitCaseUpdate) AddTime(i int) *SubmitCaseUpdate {
	scu.mutation.AddTime(i)
	return scu
}

// SetMemory sets the "memory" field.
func (scu *SubmitCaseUpdate) SetMemory(i int) *SubmitCaseUpdate {
	scu.mutation.ResetMemory()
	scu.mutation.SetMemory(i)
	return scu
}

// SetNillableMemory sets the "memory" field if the given value is not nil.
func (scu *SubmitCaseUpdate) SetNillableMemory(i *int) *SubmitCaseUpdate {
	if i != nil {
		scu.SetMemory(*i)
	}
	return scu
}

// AddMemory adds i to the "memory" field.
func (scu *SubmitCaseUpdate) AddMemory(i int) *SubmitCaseUpdate {
	scu.mutation.AddMemory(i)
	return scu
}

// SetSubmitID sets the "submit" edge to the Submit entity by ID.
func (scu *SubmitCaseUpdate) SetSubmitID(id int) *SubmitCaseUpdate {
	scu.mutation.SetSubmitID(id)
	return scu
}

// SetNillableSubmitID sets the "submit" edge to the Submit entity by ID if the given value is not nil.
func (scu *SubmitCaseUpdate) SetNillableSubmitID(id *int) *SubmitCaseUpdate {
	if id != nil {
		scu = scu.SetSubmitID(*id)
	}
	return scu
}

// SetSubmit sets the "submit" edge to the Submit entity.
func (scu *SubmitCaseUpdate) SetSubmit(s *Submit) *SubmitCaseUpdate {
	return scu.SetSubmitID(s.ID)
}

// SetProblemCaseID sets the "problem_case" edge to the ProblemCase entity by ID.
func (scu *SubmitCaseUpdate) SetProblemCaseID(id int) *SubmitCaseUpdate {
	scu.mutation.SetProblemCaseID(id)
	return scu
}

// SetNillableProblemCaseID sets the "problem_case" edge to the ProblemCase entity by ID if the given value is not nil.
func (scu *SubmitCaseUpdate) SetNillableProblemCaseID(id *int) *SubmitCaseUpdate {
	if id != nil {
		scu = scu.SetProblemCaseID(*id)
	}
	return scu
}

// SetProblemCase sets the "problem_case" edge to the ProblemCase entity.
func (scu *SubmitCaseUpdate) SetProblemCase(p *ProblemCase) *SubmitCaseUpdate {
	return scu.SetProblemCaseID(p.ID)
}

// Mutation returns the SubmitCaseMutation object of the builder.
func (scu *SubmitCaseUpdate) Mutation() *SubmitCaseMutation {
	return scu.mutation
}

// ClearSubmit clears the "submit" edge to the Submit entity.
func (scu *SubmitCaseUpdate) ClearSubmit() *SubmitCaseUpdate {
	scu.mutation.ClearSubmit()
	return scu
}

// ClearProblemCase clears the "problem_case" edge to the ProblemCase entity.
func (scu *SubmitCaseUpdate) ClearProblemCase() *SubmitCaseUpdate {
	scu.mutation.ClearProblemCase()
	return scu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scu *SubmitCaseUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, scu.sqlSave, scu.mutation, scu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scu *SubmitCaseUpdate) SaveX(ctx context.Context) int {
	affected, err := scu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scu *SubmitCaseUpdate) Exec(ctx context.Context) error {
	_, err := scu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scu *SubmitCaseUpdate) ExecX(ctx context.Context) {
	if err := scu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scu *SubmitCaseUpdate) check() error {
	if v, ok := scu.mutation.SubmitID(); ok {
		if err := submitcase.SubmitIDValidator(v); err != nil {
			return &ValidationError{Name: "submit_id", err: fmt.Errorf(`ent: validator failed for field "SubmitCase.submit_id": %w`, err)}
		}
	}
	if v, ok := scu.mutation.CaseID(); ok {
		if err := submitcase.CaseIDValidator(v); err != nil {
			return &ValidationError{Name: "case_id", err: fmt.Errorf(`ent: validator failed for field "SubmitCase.case_id": %w`, err)}
		}
	}
	if v, ok := scu.mutation.State(); ok {
		if err := submitcase.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "SubmitCase.state": %w`, err)}
		}
	}
	return nil
}

func (scu *SubmitCaseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := scu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(submitcase.Table, submitcase.Columns, sqlgraph.NewFieldSpec(submitcase.FieldID, field.TypeInt))
	if ps := scu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scu.mutation.SubmitID(); ok {
		_spec.SetField(submitcase.FieldSubmitID, field.TypeInt, value)
	}
	if value, ok := scu.mutation.AddedSubmitID(); ok {
		_spec.AddField(submitcase.FieldSubmitID, field.TypeInt, value)
	}
	if value, ok := scu.mutation.CaseID(); ok {
		_spec.SetField(submitcase.FieldCaseID, field.TypeInt, value)
	}
	if value, ok := scu.mutation.AddedCaseID(); ok {
		_spec.AddField(submitcase.FieldCaseID, field.TypeInt, value)
	}
	if value, ok := scu.mutation.State(); ok {
		_spec.SetField(submitcase.FieldState, field.TypeInt, value)
	}
	if value, ok := scu.mutation.AddedState(); ok {
		_spec.AddField(submitcase.FieldState, field.TypeInt, value)
	}
	if value, ok := scu.mutation.Point(); ok {
		_spec.SetField(submitcase.FieldPoint, field.TypeInt, value)
	}
	if value, ok := scu.mutation.AddedPoint(); ok {
		_spec.AddField(submitcase.FieldPoint, field.TypeInt, value)
	}
	if value, ok := scu.mutation.Message(); ok {
		_spec.SetField(submitcase.FieldMessage, field.TypeString, value)
	}
	if value, ok := scu.mutation.Time(); ok {
		_spec.SetField(submitcase.FieldTime, field.TypeInt, value)
	}
	if value, ok := scu.mutation.AddedTime(); ok {
		_spec.AddField(submitcase.FieldTime, field.TypeInt, value)
	}
	if value, ok := scu.mutation.Memory(); ok {
		_spec.SetField(submitcase.FieldMemory, field.TypeInt, value)
	}
	if value, ok := scu.mutation.AddedMemory(); ok {
		_spec.AddField(submitcase.FieldMemory, field.TypeInt, value)
	}
	if scu.mutation.SubmitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   submitcase.SubmitTable,
			Columns: []string{submitcase.SubmitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submit.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.SubmitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   submitcase.SubmitTable,
			Columns: []string{submitcase.SubmitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scu.mutation.ProblemCaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   submitcase.ProblemCaseTable,
			Columns: []string{submitcase.ProblemCaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problemcase.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.ProblemCaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   submitcase.ProblemCaseTable,
			Columns: []string{submitcase.ProblemCaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problemcase.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, scu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{submitcase.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	scu.mutation.done = true
	return n, nil
}

// SubmitCaseUpdateOne is the builder for updating a single SubmitCase entity.
type SubmitCaseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubmitCaseMutation
}

// SetSubmitID sets the "submit_id" field.
func (scuo *SubmitCaseUpdateOne) SetSubmitID(i int) *SubmitCaseUpdateOne {
	scuo.mutation.ResetSubmitID()
	scuo.mutation.SetSubmitID(i)
	return scuo
}

// SetNillableSubmitID sets the "submit_id" field if the given value is not nil.
func (scuo *SubmitCaseUpdateOne) SetNillableSubmitID(i *int) *SubmitCaseUpdateOne {
	if i != nil {
		scuo.SetSubmitID(*i)
	}
	return scuo
}

// AddSubmitID adds i to the "submit_id" field.
func (scuo *SubmitCaseUpdateOne) AddSubmitID(i int) *SubmitCaseUpdateOne {
	scuo.mutation.AddSubmitID(i)
	return scuo
}

// SetCaseID sets the "case_id" field.
func (scuo *SubmitCaseUpdateOne) SetCaseID(i int) *SubmitCaseUpdateOne {
	scuo.mutation.ResetCaseID()
	scuo.mutation.SetCaseID(i)
	return scuo
}

// SetNillableCaseID sets the "case_id" field if the given value is not nil.
func (scuo *SubmitCaseUpdateOne) SetNillableCaseID(i *int) *SubmitCaseUpdateOne {
	if i != nil {
		scuo.SetCaseID(*i)
	}
	return scuo
}

// AddCaseID adds i to the "case_id" field.
func (scuo *SubmitCaseUpdateOne) AddCaseID(i int) *SubmitCaseUpdateOne {
	scuo.mutation.AddCaseID(i)
	return scuo
}

// SetState sets the "state" field.
func (scuo *SubmitCaseUpdateOne) SetState(i int) *SubmitCaseUpdateOne {
	scuo.mutation.ResetState()
	scuo.mutation.SetState(i)
	return scuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (scuo *SubmitCaseUpdateOne) SetNillableState(i *int) *SubmitCaseUpdateOne {
	if i != nil {
		scuo.SetState(*i)
	}
	return scuo
}

// AddState adds i to the "state" field.
func (scuo *SubmitCaseUpdateOne) AddState(i int) *SubmitCaseUpdateOne {
	scuo.mutation.AddState(i)
	return scuo
}

// SetPoint sets the "point" field.
func (scuo *SubmitCaseUpdateOne) SetPoint(i int) *SubmitCaseUpdateOne {
	scuo.mutation.ResetPoint()
	scuo.mutation.SetPoint(i)
	return scuo
}

// SetNillablePoint sets the "point" field if the given value is not nil.
func (scuo *SubmitCaseUpdateOne) SetNillablePoint(i *int) *SubmitCaseUpdateOne {
	if i != nil {
		scuo.SetPoint(*i)
	}
	return scuo
}

// AddPoint adds i to the "point" field.
func (scuo *SubmitCaseUpdateOne) AddPoint(i int) *SubmitCaseUpdateOne {
	scuo.mutation.AddPoint(i)
	return scuo
}

// SetMessage sets the "message" field.
func (scuo *SubmitCaseUpdateOne) SetMessage(s string) *SubmitCaseUpdateOne {
	scuo.mutation.SetMessage(s)
	return scuo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (scuo *SubmitCaseUpdateOne) SetNillableMessage(s *string) *SubmitCaseUpdateOne {
	if s != nil {
		scuo.SetMessage(*s)
	}
	return scuo
}

// SetTime sets the "time" field.
func (scuo *SubmitCaseUpdateOne) SetTime(i int) *SubmitCaseUpdateOne {
	scuo.mutation.ResetTime()
	scuo.mutation.SetTime(i)
	return scuo
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (scuo *SubmitCaseUpdateOne) SetNillableTime(i *int) *SubmitCaseUpdateOne {
	if i != nil {
		scuo.SetTime(*i)
	}
	return scuo
}

// AddTime adds i to the "time" field.
func (scuo *SubmitCaseUpdateOne) AddTime(i int) *SubmitCaseUpdateOne {
	scuo.mutation.AddTime(i)
	return scuo
}

// SetMemory sets the "memory" field.
func (scuo *SubmitCaseUpdateOne) SetMemory(i int) *SubmitCaseUpdateOne {
	scuo.mutation.ResetMemory()
	scuo.mutation.SetMemory(i)
	return scuo
}

// SetNillableMemory sets the "memory" field if the given value is not nil.
func (scuo *SubmitCaseUpdateOne) SetNillableMemory(i *int) *SubmitCaseUpdateOne {
	if i != nil {
		scuo.SetMemory(*i)
	}
	return scuo
}

// AddMemory adds i to the "memory" field.
func (scuo *SubmitCaseUpdateOne) AddMemory(i int) *SubmitCaseUpdateOne {
	scuo.mutation.AddMemory(i)
	return scuo
}

// SetSubmitID sets the "submit" edge to the Submit entity by ID.
func (scuo *SubmitCaseUpdateOne) SetSubmitID(id int) *SubmitCaseUpdateOne {
	scuo.mutation.SetSubmitID(id)
	return scuo
}

// SetNillableSubmitID sets the "submit" edge to the Submit entity by ID if the given value is not nil.
func (scuo *SubmitCaseUpdateOne) SetNillableSubmitID(id *int) *SubmitCaseUpdateOne {
	if id != nil {
		scuo = scuo.SetSubmitID(*id)
	}
	return scuo
}

// SetSubmit sets the "submit" edge to the Submit entity.
func (scuo *SubmitCaseUpdateOne) SetSubmit(s *Submit) *SubmitCaseUpdateOne {
	return scuo.SetSubmitID(s.ID)
}

// SetProblemCaseID sets the "problem_case" edge to the ProblemCase entity by ID.
func (scuo *SubmitCaseUpdateOne) SetProblemCaseID(id int) *SubmitCaseUpdateOne {
	scuo.mutation.SetProblemCaseID(id)
	return scuo
}

// SetNillableProblemCaseID sets the "problem_case" edge to the ProblemCase entity by ID if the given value is not nil.
func (scuo *SubmitCaseUpdateOne) SetNillableProblemCaseID(id *int) *SubmitCaseUpdateOne {
	if id != nil {
		scuo = scuo.SetProblemCaseID(*id)
	}
	return scuo
}

// SetProblemCase sets the "problem_case" edge to the ProblemCase entity.
func (scuo *SubmitCaseUpdateOne) SetProblemCase(p *ProblemCase) *SubmitCaseUpdateOne {
	return scuo.SetProblemCaseID(p.ID)
}

// Mutation returns the SubmitCaseMutation object of the builder.
func (scuo *SubmitCaseUpdateOne) Mutation() *SubmitCaseMutation {
	return scuo.mutation
}

// ClearSubmit clears the "submit" edge to the Submit entity.
func (scuo *SubmitCaseUpdateOne) ClearSubmit() *SubmitCaseUpdateOne {
	scuo.mutation.ClearSubmit()
	return scuo
}

// ClearProblemCase clears the "problem_case" edge to the ProblemCase entity.
func (scuo *SubmitCaseUpdateOne) ClearProblemCase() *SubmitCaseUpdateOne {
	scuo.mutation.ClearProblemCase()
	return scuo
}

// Where appends a list predicates to the SubmitCaseUpdate builder.
func (scuo *SubmitCaseUpdateOne) Where(ps ...predicate.SubmitCase) *SubmitCaseUpdateOne {
	scuo.mutation.Where(ps...)
	return scuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scuo *SubmitCaseUpdateOne) Select(field string, fields ...string) *SubmitCaseUpdateOne {
	scuo.fields = append([]string{field}, fields...)
	return scuo
}

// Save executes the query and returns the updated SubmitCase entity.
func (scuo *SubmitCaseUpdateOne) Save(ctx context.Context) (*SubmitCase, error) {
	return withHooks(ctx, scuo.sqlSave, scuo.mutation, scuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scuo *SubmitCaseUpdateOne) SaveX(ctx context.Context) *SubmitCase {
	node, err := scuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scuo *SubmitCaseUpdateOne) Exec(ctx context.Context) error {
	_, err := scuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scuo *SubmitCaseUpdateOne) ExecX(ctx context.Context) {
	if err := scuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scuo *SubmitCaseUpdateOne) check() error {
	if v, ok := scuo.mutation.SubmitID(); ok {
		if err := submitcase.SubmitIDValidator(v); err != nil {
			return &ValidationError{Name: "submit_id", err: fmt.Errorf(`ent: validator failed for field "SubmitCase.submit_id": %w`, err)}
		}
	}
	if v, ok := scuo.mutation.CaseID(); ok {
		if err := submitcase.CaseIDValidator(v); err != nil {
			return &ValidationError{Name: "case_id", err: fmt.Errorf(`ent: validator failed for field "SubmitCase.case_id": %w`, err)}
		}
	}
	if v, ok := scuo.mutation.State(); ok {
		if err := submitcase.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "SubmitCase.state": %w`, err)}
		}
	}
	return nil
}

func (scuo *SubmitCaseUpdateOne) sqlSave(ctx context.Context) (_node *SubmitCase, err error) {
	if err := scuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(submitcase.Table, submitcase.Columns, sqlgraph.NewFieldSpec(submitcase.FieldID, field.TypeInt))
	id, ok := scuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SubmitCase.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, submitcase.FieldID)
		for _, f := range fields {
			if !submitcase.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != submitcase.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scuo.mutation.SubmitID(); ok {
		_spec.SetField(submitcase.FieldSubmitID, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.AddedSubmitID(); ok {
		_spec.AddField(submitcase.FieldSubmitID, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.CaseID(); ok {
		_spec.SetField(submitcase.FieldCaseID, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.AddedCaseID(); ok {
		_spec.AddField(submitcase.FieldCaseID, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.State(); ok {
		_spec.SetField(submitcase.FieldState, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.AddedState(); ok {
		_spec.AddField(submitcase.FieldState, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.Point(); ok {
		_spec.SetField(submitcase.FieldPoint, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.AddedPoint(); ok {
		_spec.AddField(submitcase.FieldPoint, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.Message(); ok {
		_spec.SetField(submitcase.FieldMessage, field.TypeString, value)
	}
	if value, ok := scuo.mutation.Time(); ok {
		_spec.SetField(submitcase.FieldTime, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.AddedTime(); ok {
		_spec.AddField(submitcase.FieldTime, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.Memory(); ok {
		_spec.SetField(submitcase.FieldMemory, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.AddedMemory(); ok {
		_spec.AddField(submitcase.FieldMemory, field.TypeInt, value)
	}
	if scuo.mutation.SubmitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   submitcase.SubmitTable,
			Columns: []string{submitcase.SubmitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submit.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.SubmitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   submitcase.SubmitTable,
			Columns: []string{submitcase.SubmitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scuo.mutation.ProblemCaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   submitcase.ProblemCaseTable,
			Columns: []string{submitcase.ProblemCaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problemcase.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.ProblemCaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   submitcase.ProblemCaseTable,
			Columns: []string{submitcase.ProblemCaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problemcase.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SubmitCase{config: scuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{submitcase.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	scuo.mutation.done = true
	return _node, nil
}
