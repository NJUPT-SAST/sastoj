// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"sastoj/ent/submit"
	"sastoj/ent/submitjudge"
	"sastoj/ent/user"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SubmitJudge is the model entity for the SubmitJudge schema.
type SubmitJudge struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// SubmitID holds the value of the "submit_id" field.
	SubmitID int `json:"submit_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubmitJudgeQuery when eager-loading is set.
	Edges               SubmitJudgeEdges `json:"edges"`
	submit_judge_submit *int
	submit_judge_user   *int
	selectValues        sql.SelectValues
}

// SubmitJudgeEdges holds the relations/edges for other nodes in the graph.
type SubmitJudgeEdges struct {
	// Submit holds the value of the submit edge.
	Submit *Submit `json:"submit,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SubmitOrErr returns the Submit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubmitJudgeEdges) SubmitOrErr() (*Submit, error) {
	if e.loadedTypes[0] {
		if e.Submit == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: submit.Label}
		}
		return e.Submit, nil
	}
	return nil, &NotLoadedError{edge: "submit"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubmitJudgeEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SubmitJudge) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case submitjudge.FieldID, submitjudge.FieldUserID, submitjudge.FieldSubmitID:
			values[i] = new(sql.NullInt64)
		case submitjudge.ForeignKeys[0]: // submit_judge_submit
			values[i] = new(sql.NullInt64)
		case submitjudge.ForeignKeys[1]: // submit_judge_user
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SubmitJudge fields.
func (sj *SubmitJudge) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case submitjudge.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sj.ID = int(value.Int64)
		case submitjudge.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				sj.UserID = int(value.Int64)
			}
		case submitjudge.FieldSubmitID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field submit_id", values[i])
			} else if value.Valid {
				sj.SubmitID = int(value.Int64)
			}
		case submitjudge.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field submit_judge_submit", value)
			} else if value.Valid {
				sj.submit_judge_submit = new(int)
				*sj.submit_judge_submit = int(value.Int64)
			}
		case submitjudge.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field submit_judge_user", value)
			} else if value.Valid {
				sj.submit_judge_user = new(int)
				*sj.submit_judge_user = int(value.Int64)
			}
		default:
			sj.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SubmitJudge.
// This includes values selected through modifiers, order, etc.
func (sj *SubmitJudge) Value(name string) (ent.Value, error) {
	return sj.selectValues.Get(name)
}

// QuerySubmit queries the "submit" edge of the SubmitJudge entity.
func (sj *SubmitJudge) QuerySubmit() *SubmitQuery {
	return NewSubmitJudgeClient(sj.config).QuerySubmit(sj)
}

// QueryUser queries the "user" edge of the SubmitJudge entity.
func (sj *SubmitJudge) QueryUser() *UserQuery {
	return NewSubmitJudgeClient(sj.config).QueryUser(sj)
}

// Update returns a builder for updating this SubmitJudge.
// Note that you need to call SubmitJudge.Unwrap() before calling this method if this SubmitJudge
// was returned from a transaction, and the transaction was committed or rolled back.
func (sj *SubmitJudge) Update() *SubmitJudgeUpdateOne {
	return NewSubmitJudgeClient(sj.config).UpdateOne(sj)
}

// Unwrap unwraps the SubmitJudge entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sj *SubmitJudge) Unwrap() *SubmitJudge {
	_tx, ok := sj.config.driver.(*txDriver)
	if !ok {
		panic("ent: SubmitJudge is not a transactional entity")
	}
	sj.config.driver = _tx.drv
	return sj
}

// String implements the fmt.Stringer.
func (sj *SubmitJudge) String() string {
	var builder strings.Builder
	builder.WriteString("SubmitJudge(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sj.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", sj.UserID))
	builder.WriteString(", ")
	builder.WriteString("submit_id=")
	builder.WriteString(fmt.Sprintf("%v", sj.SubmitID))
	builder.WriteByte(')')
	return builder.String()
}

// SubmitJudges is a parsable slice of SubmitJudge.
type SubmitJudges []*SubmitJudge
