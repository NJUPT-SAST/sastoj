// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sastoj/ent/submit"
	"sastoj/ent/submitjudge"
	"sastoj/ent/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubmitJudgeCreate is the builder for creating a SubmitJudge entity.
type SubmitJudgeCreate struct {
	config
	mutation *SubmitJudgeMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (sjc *SubmitJudgeCreate) SetUserID(i int) *SubmitJudgeCreate {
	sjc.mutation.SetUserID(i)
	return sjc
}

// SetSubmitID sets the "submit_id" field.
func (sjc *SubmitJudgeCreate) SetSubmitID(i int) *SubmitJudgeCreate {
	sjc.mutation.SetSubmitID(i)
	return sjc
}

// SetID sets the "id" field.
func (sjc *SubmitJudgeCreate) SetID(i int) *SubmitJudgeCreate {
	sjc.mutation.SetID(i)
	return sjc
}

// SetSubmitID sets the "submit" edge to the Submit entity by ID.
func (sjc *SubmitJudgeCreate) SetSubmitID(id int) *SubmitJudgeCreate {
	sjc.mutation.SetSubmitID(id)
	return sjc
}

// SetNillableSubmitID sets the "submit" edge to the Submit entity by ID if the given value is not nil.
func (sjc *SubmitJudgeCreate) SetNillableSubmitID(id *int) *SubmitJudgeCreate {
	if id != nil {
		sjc = sjc.SetSubmitID(*id)
	}
	return sjc
}

// SetSubmit sets the "submit" edge to the Submit entity.
func (sjc *SubmitJudgeCreate) SetSubmit(s *Submit) *SubmitJudgeCreate {
	return sjc.SetSubmitID(s.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (sjc *SubmitJudgeCreate) SetUserID(id int) *SubmitJudgeCreate {
	sjc.mutation.SetUserID(id)
	return sjc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (sjc *SubmitJudgeCreate) SetNillableUserID(id *int) *SubmitJudgeCreate {
	if id != nil {
		sjc = sjc.SetUserID(*id)
	}
	return sjc
}

// SetUser sets the "user" edge to the User entity.
func (sjc *SubmitJudgeCreate) SetUser(u *User) *SubmitJudgeCreate {
	return sjc.SetUserID(u.ID)
}

// Mutation returns the SubmitJudgeMutation object of the builder.
func (sjc *SubmitJudgeCreate) Mutation() *SubmitJudgeMutation {
	return sjc.mutation
}

// Save creates the SubmitJudge in the database.
func (sjc *SubmitJudgeCreate) Save(ctx context.Context) (*SubmitJudge, error) {
	return withHooks(ctx, sjc.sqlSave, sjc.mutation, sjc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sjc *SubmitJudgeCreate) SaveX(ctx context.Context) *SubmitJudge {
	v, err := sjc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sjc *SubmitJudgeCreate) Exec(ctx context.Context) error {
	_, err := sjc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sjc *SubmitJudgeCreate) ExecX(ctx context.Context) {
	if err := sjc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sjc *SubmitJudgeCreate) check() error {
	if _, ok := sjc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "SubmitJudge.user_id"`)}
	}
	if _, ok := sjc.mutation.SubmitID(); !ok {
		return &ValidationError{Name: "submit_id", err: errors.New(`ent: missing required field "SubmitJudge.submit_id"`)}
	}
	if v, ok := sjc.mutation.SubmitID(); ok {
		if err := submitjudge.SubmitIDValidator(v); err != nil {
			return &ValidationError{Name: "submit_id", err: fmt.Errorf(`ent: validator failed for field "SubmitJudge.submit_id": %w`, err)}
		}
	}
	return nil
}

func (sjc *SubmitJudgeCreate) sqlSave(ctx context.Context) (*SubmitJudge, error) {
	if err := sjc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sjc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sjc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	sjc.mutation.id = &_node.ID
	sjc.mutation.done = true
	return _node, nil
}

func (sjc *SubmitJudgeCreate) createSpec() (*SubmitJudge, *sqlgraph.CreateSpec) {
	var (
		_node = &SubmitJudge{config: sjc.config}
		_spec = sqlgraph.NewCreateSpec(submitjudge.Table, sqlgraph.NewFieldSpec(submitjudge.FieldID, field.TypeInt))
	)
	if id, ok := sjc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sjc.mutation.UserID(); ok {
		_spec.SetField(submitjudge.FieldUserID, field.TypeInt, value)
		_node.UserID = value
	}
	if value, ok := sjc.mutation.SubmitID(); ok {
		_spec.SetField(submitjudge.FieldSubmitID, field.TypeInt, value)
		_node.SubmitID = value
	}
	if nodes := sjc.mutation.SubmitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   submitjudge.SubmitTable,
			Columns: []string{submitjudge.SubmitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.submit_judge_submit = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sjc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   submitjudge.UserTable,
			Columns: []string{submitjudge.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.submit_judge_user = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SubmitJudgeCreateBulk is the builder for creating many SubmitJudge entities in bulk.
type SubmitJudgeCreateBulk struct {
	config
	err      error
	builders []*SubmitJudgeCreate
}

// Save creates the SubmitJudge entities in the database.
func (sjcb *SubmitJudgeCreateBulk) Save(ctx context.Context) ([]*SubmitJudge, error) {
	if sjcb.err != nil {
		return nil, sjcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sjcb.builders))
	nodes := make([]*SubmitJudge, len(sjcb.builders))
	mutators := make([]Mutator, len(sjcb.builders))
	for i := range sjcb.builders {
		func(i int, root context.Context) {
			builder := sjcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubmitJudgeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sjcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sjcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sjcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sjcb *SubmitJudgeCreateBulk) SaveX(ctx context.Context) []*SubmitJudge {
	v, err := sjcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sjcb *SubmitJudgeCreateBulk) Exec(ctx context.Context) error {
	_, err := sjcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sjcb *SubmitJudgeCreateBulk) ExecX(ctx context.Context) {
	if err := sjcb.Exec(ctx); err != nil {
		panic(err)
	}
}
