// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sastoj/ent/predicate"
	"sastoj/ent/submit"
	"sastoj/ent/submitjudge"
	"sastoj/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubmitJudgeUpdate is the builder for updating SubmitJudge entities.
type SubmitJudgeUpdate struct {
	config
	hooks    []Hook
	mutation *SubmitJudgeMutation
}

// Where appends a list predicates to the SubmitJudgeUpdate builder.
func (sju *SubmitJudgeUpdate) Where(ps ...predicate.SubmitJudge) *SubmitJudgeUpdate {
	sju.mutation.Where(ps...)
	return sju
}

// SetUserID sets the "user_id" field.
func (sju *SubmitJudgeUpdate) SetUserID(i int) *SubmitJudgeUpdate {
	sju.mutation.ResetUserID()
	sju.mutation.SetUserID(i)
	return sju
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (sju *SubmitJudgeUpdate) SetNillableUserID(i *int) *SubmitJudgeUpdate {
	if i != nil {
		sju.SetUserID(*i)
	}
	return sju
}

// AddUserID adds i to the "user_id" field.
func (sju *SubmitJudgeUpdate) AddUserID(i int) *SubmitJudgeUpdate {
	sju.mutation.AddUserID(i)
	return sju
}

// SetSubmitID sets the "submit_id" field.
func (sju *SubmitJudgeUpdate) SetSubmitID(i int) *SubmitJudgeUpdate {
	sju.mutation.ResetSubmitID()
	sju.mutation.SetSubmitID(i)
	return sju
}

// SetNillableSubmitID sets the "submit_id" field if the given value is not nil.
func (sju *SubmitJudgeUpdate) SetNillableSubmitID(i *int) *SubmitJudgeUpdate {
	if i != nil {
		sju.SetSubmitID(*i)
	}
	return sju
}

// AddSubmitID adds i to the "submit_id" field.
func (sju *SubmitJudgeUpdate) AddSubmitID(i int) *SubmitJudgeUpdate {
	sju.mutation.AddSubmitID(i)
	return sju
}

// SetSubmissionID sets the "submission" edge to the Submit entity by ID.
func (sju *SubmitJudgeUpdate) SetSubmissionID(id int) *SubmitJudgeUpdate {
	sju.mutation.SetSubmissionID(id)
	return sju
}

// SetNillableSubmissionID sets the "submission" edge to the Submit entity by ID if the given value is not nil.
func (sju *SubmitJudgeUpdate) SetNillableSubmissionID(id *int) *SubmitJudgeUpdate {
	if id != nil {
		sju = sju.SetSubmissionID(*id)
	}
	return sju
}

// SetSubmission sets the "submission" edge to the Submit entity.
func (sju *SubmitJudgeUpdate) SetSubmission(s *Submit) *SubmitJudgeUpdate {
	return sju.SetSubmissionID(s.ID)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (sju *SubmitJudgeUpdate) SetUsersID(id int) *SubmitJudgeUpdate {
	sju.mutation.SetUsersID(id)
	return sju
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (sju *SubmitJudgeUpdate) SetNillableUsersID(id *int) *SubmitJudgeUpdate {
	if id != nil {
		sju = sju.SetUsersID(*id)
	}
	return sju
}

// SetUsers sets the "users" edge to the User entity.
func (sju *SubmitJudgeUpdate) SetUsers(u *User) *SubmitJudgeUpdate {
	return sju.SetUsersID(u.ID)
}

// Mutation returns the SubmitJudgeMutation object of the builder.
func (sju *SubmitJudgeUpdate) Mutation() *SubmitJudgeMutation {
	return sju.mutation
}

// ClearSubmission clears the "submission" edge to the Submit entity.
func (sju *SubmitJudgeUpdate) ClearSubmission() *SubmitJudgeUpdate {
	sju.mutation.ClearSubmission()
	return sju
}

// ClearUsers clears the "users" edge to the User entity.
func (sju *SubmitJudgeUpdate) ClearUsers() *SubmitJudgeUpdate {
	sju.mutation.ClearUsers()
	return sju
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sju *SubmitJudgeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sju.sqlSave, sju.mutation, sju.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sju *SubmitJudgeUpdate) SaveX(ctx context.Context) int {
	affected, err := sju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sju *SubmitJudgeUpdate) Exec(ctx context.Context) error {
	_, err := sju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sju *SubmitJudgeUpdate) ExecX(ctx context.Context) {
	if err := sju.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sju *SubmitJudgeUpdate) check() error {
	if v, ok := sju.mutation.SubmitID(); ok {
		if err := submitjudge.SubmitIDValidator(v); err != nil {
			return &ValidationError{Name: "submit_id", err: fmt.Errorf(`ent: validator failed for field "SubmitJudge.submit_id": %w`, err)}
		}
	}
	return nil
}

func (sju *SubmitJudgeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sju.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(submitjudge.Table, submitjudge.Columns, sqlgraph.NewFieldSpec(submitjudge.FieldID, field.TypeInt))
	if ps := sju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sju.mutation.UserID(); ok {
		_spec.SetField(submitjudge.FieldUserID, field.TypeInt, value)
	}
	if value, ok := sju.mutation.AddedUserID(); ok {
		_spec.AddField(submitjudge.FieldUserID, field.TypeInt, value)
	}
	if value, ok := sju.mutation.SubmitID(); ok {
		_spec.SetField(submitjudge.FieldSubmitID, field.TypeInt, value)
	}
	if value, ok := sju.mutation.AddedSubmitID(); ok {
		_spec.AddField(submitjudge.FieldSubmitID, field.TypeInt, value)
	}
	if sju.mutation.SubmissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submitjudge.SubmissionTable,
			Columns: []string{submitjudge.SubmissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submit.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sju.mutation.SubmissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submitjudge.SubmissionTable,
			Columns: []string{submitjudge.SubmissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sju.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submitjudge.UsersTable,
			Columns: []string{submitjudge.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sju.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submitjudge.UsersTable,
			Columns: []string{submitjudge.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{submitjudge.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sju.mutation.done = true
	return n, nil
}

// SubmitJudgeUpdateOne is the builder for updating a single SubmitJudge entity.
type SubmitJudgeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubmitJudgeMutation
}

// SetUserID sets the "user_id" field.
func (sjuo *SubmitJudgeUpdateOne) SetUserID(i int) *SubmitJudgeUpdateOne {
	sjuo.mutation.ResetUserID()
	sjuo.mutation.SetUserID(i)
	return sjuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (sjuo *SubmitJudgeUpdateOne) SetNillableUserID(i *int) *SubmitJudgeUpdateOne {
	if i != nil {
		sjuo.SetUserID(*i)
	}
	return sjuo
}

// AddUserID adds i to the "user_id" field.
func (sjuo *SubmitJudgeUpdateOne) AddUserID(i int) *SubmitJudgeUpdateOne {
	sjuo.mutation.AddUserID(i)
	return sjuo
}

// SetSubmitID sets the "submit_id" field.
func (sjuo *SubmitJudgeUpdateOne) SetSubmitID(i int) *SubmitJudgeUpdateOne {
	sjuo.mutation.ResetSubmitID()
	sjuo.mutation.SetSubmitID(i)
	return sjuo
}

// SetNillableSubmitID sets the "submit_id" field if the given value is not nil.
func (sjuo *SubmitJudgeUpdateOne) SetNillableSubmitID(i *int) *SubmitJudgeUpdateOne {
	if i != nil {
		sjuo.SetSubmitID(*i)
	}
	return sjuo
}

// AddSubmitID adds i to the "submit_id" field.
func (sjuo *SubmitJudgeUpdateOne) AddSubmitID(i int) *SubmitJudgeUpdateOne {
	sjuo.mutation.AddSubmitID(i)
	return sjuo
}

// SetSubmissionID sets the "submission" edge to the Submit entity by ID.
func (sjuo *SubmitJudgeUpdateOne) SetSubmissionID(id int) *SubmitJudgeUpdateOne {
	sjuo.mutation.SetSubmissionID(id)
	return sjuo
}

// SetNillableSubmissionID sets the "submission" edge to the Submit entity by ID if the given value is not nil.
func (sjuo *SubmitJudgeUpdateOne) SetNillableSubmissionID(id *int) *SubmitJudgeUpdateOne {
	if id != nil {
		sjuo = sjuo.SetSubmissionID(*id)
	}
	return sjuo
}

// SetSubmission sets the "submission" edge to the Submit entity.
func (sjuo *SubmitJudgeUpdateOne) SetSubmission(s *Submit) *SubmitJudgeUpdateOne {
	return sjuo.SetSubmissionID(s.ID)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (sjuo *SubmitJudgeUpdateOne) SetUsersID(id int) *SubmitJudgeUpdateOne {
	sjuo.mutation.SetUsersID(id)
	return sjuo
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (sjuo *SubmitJudgeUpdateOne) SetNillableUsersID(id *int) *SubmitJudgeUpdateOne {
	if id != nil {
		sjuo = sjuo.SetUsersID(*id)
	}
	return sjuo
}

// SetUsers sets the "users" edge to the User entity.
func (sjuo *SubmitJudgeUpdateOne) SetUsers(u *User) *SubmitJudgeUpdateOne {
	return sjuo.SetUsersID(u.ID)
}

// Mutation returns the SubmitJudgeMutation object of the builder.
func (sjuo *SubmitJudgeUpdateOne) Mutation() *SubmitJudgeMutation {
	return sjuo.mutation
}

// ClearSubmission clears the "submission" edge to the Submit entity.
func (sjuo *SubmitJudgeUpdateOne) ClearSubmission() *SubmitJudgeUpdateOne {
	sjuo.mutation.ClearSubmission()
	return sjuo
}

// ClearUsers clears the "users" edge to the User entity.
func (sjuo *SubmitJudgeUpdateOne) ClearUsers() *SubmitJudgeUpdateOne {
	sjuo.mutation.ClearUsers()
	return sjuo
}

// Where appends a list predicates to the SubmitJudgeUpdate builder.
func (sjuo *SubmitJudgeUpdateOne) Where(ps ...predicate.SubmitJudge) *SubmitJudgeUpdateOne {
	sjuo.mutation.Where(ps...)
	return sjuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sjuo *SubmitJudgeUpdateOne) Select(field string, fields ...string) *SubmitJudgeUpdateOne {
	sjuo.fields = append([]string{field}, fields...)
	return sjuo
}

// Save executes the query and returns the updated SubmitJudge entity.
func (sjuo *SubmitJudgeUpdateOne) Save(ctx context.Context) (*SubmitJudge, error) {
	return withHooks(ctx, sjuo.sqlSave, sjuo.mutation, sjuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sjuo *SubmitJudgeUpdateOne) SaveX(ctx context.Context) *SubmitJudge {
	node, err := sjuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sjuo *SubmitJudgeUpdateOne) Exec(ctx context.Context) error {
	_, err := sjuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sjuo *SubmitJudgeUpdateOne) ExecX(ctx context.Context) {
	if err := sjuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sjuo *SubmitJudgeUpdateOne) check() error {
	if v, ok := sjuo.mutation.SubmitID(); ok {
		if err := submitjudge.SubmitIDValidator(v); err != nil {
			return &ValidationError{Name: "submit_id", err: fmt.Errorf(`ent: validator failed for field "SubmitJudge.submit_id": %w`, err)}
		}
	}
	return nil
}

func (sjuo *SubmitJudgeUpdateOne) sqlSave(ctx context.Context) (_node *SubmitJudge, err error) {
	if err := sjuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(submitjudge.Table, submitjudge.Columns, sqlgraph.NewFieldSpec(submitjudge.FieldID, field.TypeInt))
	id, ok := sjuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SubmitJudge.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sjuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, submitjudge.FieldID)
		for _, f := range fields {
			if !submitjudge.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != submitjudge.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sjuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sjuo.mutation.UserID(); ok {
		_spec.SetField(submitjudge.FieldUserID, field.TypeInt, value)
	}
	if value, ok := sjuo.mutation.AddedUserID(); ok {
		_spec.AddField(submitjudge.FieldUserID, field.TypeInt, value)
	}
	if value, ok := sjuo.mutation.SubmitID(); ok {
		_spec.SetField(submitjudge.FieldSubmitID, field.TypeInt, value)
	}
	if value, ok := sjuo.mutation.AddedSubmitID(); ok {
		_spec.AddField(submitjudge.FieldSubmitID, field.TypeInt, value)
	}
	if sjuo.mutation.SubmissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submitjudge.SubmissionTable,
			Columns: []string{submitjudge.SubmissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submit.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sjuo.mutation.SubmissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submitjudge.SubmissionTable,
			Columns: []string{submitjudge.SubmissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sjuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submitjudge.UsersTable,
			Columns: []string{submitjudge.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sjuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submitjudge.UsersTable,
			Columns: []string{submitjudge.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SubmitJudge{config: sjuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sjuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{submitjudge.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sjuo.mutation.done = true
	return _node, nil
}
