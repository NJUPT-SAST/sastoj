// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldSalt holds the string denoting the salt field in the database.
	FieldSalt = "salt"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldGroupID holds the string denoting the group_id field in the database.
	FieldGroupID = "group_id"
	// EdgeSubmission holds the string denoting the submission edge name in mutations.
	EdgeSubmission = "submission"
	// EdgeLoginSessions holds the string denoting the login_sessions edge name in mutations.
	EdgeLoginSessions = "login_sessions"
	// EdgeGroups holds the string denoting the groups edge name in mutations.
	EdgeGroups = "groups"
	// Table holds the table name of the user in the database.
	Table = "users"
	// SubmissionTable is the table that holds the submission relation/edge.
	SubmissionTable = "submissions"
	// SubmissionInverseTable is the table name for the Submission entity.
	// It exists in this package in order to avoid circular dependency with the "submission" package.
	SubmissionInverseTable = "submissions"
	// SubmissionColumn is the table column denoting the submission relation/edge.
	SubmissionColumn = "user_id"
	// LoginSessionsTable is the table that holds the login_sessions relation/edge.
	LoginSessionsTable = "login_session"
	// LoginSessionsInverseTable is the table name for the LoginSession entity.
	// It exists in this package in order to avoid circular dependency with the "loginsession" package.
	LoginSessionsInverseTable = "login_session"
	// LoginSessionsColumn is the table column denoting the login_sessions relation/edge.
	LoginSessionsColumn = "user_id"
	// GroupsTable is the table that holds the groups relation/edge.
	GroupsTable = "users"
	// GroupsInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	GroupsInverseTable = "groups"
	// GroupsColumn is the table column denoting the groups relation/edge.
	GroupsColumn = "group_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldPassword,
	FieldSalt,
	FieldStatus,
	FieldGroupID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUsername holds the default value on creation for the "username" field.
	DefaultUsername string
	// StatusValidator is a validator for the "status" field. It is called by the builders before save.
	StatusValidator func(int16) error
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// BySalt orders the results by the salt field.
func BySalt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSalt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByGroupID orders the results by the group_id field.
func ByGroupID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGroupID, opts...).ToFunc()
}

// BySubmissionCount orders the results by submission count.
func BySubmissionCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSubmissionStep(), opts...)
	}
}

// BySubmission orders the results by submission terms.
func BySubmission(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubmissionStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLoginSessionsCount orders the results by login_sessions count.
func ByLoginSessionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLoginSessionsStep(), opts...)
	}
}

// ByLoginSessions orders the results by login_sessions terms.
func ByLoginSessions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLoginSessionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGroupsField orders the results by groups field.
func ByGroupsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroupsStep(), sql.OrderByField(field, opts...))
	}
}
func newSubmissionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubmissionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SubmissionTable, SubmissionColumn),
	)
}
func newLoginSessionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LoginSessionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LoginSessionsTable, LoginSessionsColumn),
	)
}
func newGroupsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroupsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, GroupsTable, GroupsColumn),
	)
}
